
// ** Expanded prelude

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Basic theory for vectors using arrays. This version of vectors is not extensional.

datatype Vec<T> {
    Vec(v: [int]T, l: int)
}

function {:builtin "MapConst"} MapConstVec<T>(T): [int]T;
function DefaultVecElem<T>(): T;
function {:inline} DefaultVecMap<T>(): [int]T { MapConstVec(DefaultVecElem()) }

function {:inline} EmptyVec<T>(): Vec T {
    Vec(DefaultVecMap(), 0)
}

function {:inline} MakeVec1<T>(v: T): Vec T {
    Vec(DefaultVecMap()[0 := v], 1)
}

function {:inline} MakeVec2<T>(v1: T, v2: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2], 2)
}

function {:inline} MakeVec3<T>(v1: T, v2: T, v3: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3], 3)
}

function {:inline} MakeVec4<T>(v1: T, v2: T, v3: T, v4: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3][3 := v4], 4)
}

function {:inline} ExtendVec<T>(v: Vec T, elem: T): Vec T {
    (var l := v->l;
    Vec(v->v[l := elem], l + 1))
}

function {:inline} ReadVec<T>(v: Vec T, i: int): T {
    v->v[i]
}

function {:inline} LenVec<T>(v: Vec T): int {
    v->l
}

function {:inline} IsEmptyVec<T>(v: Vec T): bool {
    v->l == 0
}

function {:inline} RemoveVec<T>(v: Vec T): Vec T {
    (var l := v->l - 1;
    Vec(v->v[l := DefaultVecElem()], l))
}

function {:inline} RemoveAtVec<T>(v: Vec T, i: int): Vec T {
    (var l := v->l - 1;
    Vec(
        (lambda j: int ::
           if j >= 0 && j < l then
               if j < i then v->v[j] else v->v[j+1]
           else DefaultVecElem()),
        l))
}

function {:inline} ConcatVec<T>(v1: Vec T, v2: Vec T): Vec T {
    (var l1, m1, l2, m2 := v1->l, v1->v, v2->l, v2->v;
    Vec(
        (lambda i: int ::
          if i >= 0 && i < l1 + l2 then
            if i < l1 then m1[i] else m2[i - l1]
          else DefaultVecElem()),
        l1 + l2))
}

function {:inline} ReverseVec<T>(v: Vec T): Vec T {
    (var l := v->l;
    Vec(
        (lambda i: int :: if 0 <= i && i < l then v->v[l - i - 1] else DefaultVecElem()),
        l))
}

function {:inline} SliceVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v->v;
    Vec(
        (lambda k:int ::
          if 0 <= k && k < j - i then
            m[i + k]
          else
            DefaultVecElem()),
        (if j - i < 0 then 0 else j - i)))
}


function {:inline} UpdateVec<T>(v: Vec T, i: int, elem: T): Vec T {
    Vec(v->v[i := elem], v->l)
}

function {:inline} SwapVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v->v;
    Vec(m[i := m[j]][j := m[i]], v->l))
}

function {:inline} ContainsVec<T>(v: Vec T, e: T): bool {
    (var l := v->l;
    (exists i: int :: InRangeVec(v, i) && v->v[i] == e))
}

function IndexOfVec<T>(v: Vec T, e: T): int;
axiom {:ctor "Vec"} (forall<T> v: Vec T, e: T :: {IndexOfVec(v, e)}
    (var i := IndexOfVec(v,e);
     if (!ContainsVec(v, e)) then i == -1
     else InRangeVec(v, i) && ReadVec(v, i) == e &&
        (forall j: int :: j >= 0 && j < i ==> ReadVec(v, j) != e)));

// This function should stay non-inlined as it guards many quantifiers
// over vectors. It appears important to have this uninterpreted for
// quantifier triggering.
function InRangeVec<T>(v: Vec T, i: int): bool {
    i >= 0 && i < LenVec(v)
}

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for multisets, based on Boogie arrays. This theory assumes extensional equality for element types.

datatype Multiset<T> {
    Multiset(v: [T]int, l: int)
}

function {:builtin "MapConst"} MapConstMultiset<T>(l: int): [T]int;

function {:inline} EmptyMultiset<T>(): Multiset T {
    Multiset(MapConstMultiset(0), 0)
}

function {:inline} LenMultiset<T>(s: Multiset T): int {
    s->l
}

function {:inline} ExtendMultiset<T>(s: Multiset T, v: T): Multiset T {
    (var len := s->l;
    (var cnt := s->v[v];
    Multiset(s->v[v := (cnt + 1)], len + 1)))
}

// This function returns (s1 - s2). This function assumes that s2 is a subset of s1.
function {:inline} SubtractMultiset<T>(s1: Multiset T, s2: Multiset T): Multiset T {
    (var len1 := s1->l;
    (var len2 := s2->l;
    Multiset((lambda v:T :: s1->v[v]-s2->v[v]), len1-len2)))
}

function {:inline} IsEmptyMultiset<T>(s: Multiset T): bool {
    (s->l == 0) &&
    (forall v: T :: s->v[v] == 0)
}

function {:inline} IsSubsetMultiset<T>(s1: Multiset T, s2: Multiset T): bool {
    (s1->l <= s2->l) &&
    (forall v: T :: s1->v[v] <= s2->v[v])
}

function {:inline} ContainsMultiset<T>(s: Multiset T, v: T): bool {
    s->v[v] > 0
}

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Theory for tables.

// v is the SMT array holding the key-value assignment. e is an array which
// independently determines whether a key is valid or not. l is the length.
//
// Note that even though the program cannot reflect over existence of a key,
// we want the specification to be able to do this, so it can express
// verification conditions like "key has been inserted".
datatype Table <K, V> {
    Table(v: [K]V, e: [K]bool, l: int)
}

// Functions for default SMT arrays. For the table values, we don't care and
// use an uninterpreted function.
function DefaultTableArray<K, V>(): [K]V;
function DefaultTableKeyExistsArray<K>(): [K]bool;
axiom DefaultTableKeyExistsArray() == (lambda i: int :: false);

function {:inline} EmptyTable<K, V>(): Table K V {
    Table(DefaultTableArray(), DefaultTableKeyExistsArray(), 0)
}

function {:inline} GetTable<K,V>(t: Table K V, k: K): V {
    // Notice we do not check whether key is in the table. The result is undetermined if it is not.
    t->v[k]
}

function {:inline} LenTable<K,V>(t: Table K V): int {
    t->l
}


function {:inline} ContainsTable<K,V>(t: Table K V, k: K): bool {
    t->e[k]
}

function {:inline} UpdateTable<K,V>(t: Table K V, k: K, v: V): Table K V {
    Table(t->v[k := v], t->e, t->l)
}

function {:inline} AddTable<K,V>(t: Table K V, k: K, v: V): Table K V {
    // This function has an undetermined result if the key is already in the table
    // (all specification functions have this "partial definiteness" behavior). Thus we can
    // just increment the length.
    Table(t->v[k := v], t->e[k := true], t->l + 1)
}

function {:inline} RemoveTable<K,V>(t: Table K V, k: K): Table K V {
    // Similar as above, we only need to consider the case where the key is in the table.
    Table(t->v, t->e[k := false], t->l - 1)
}

axiom {:ctor "Table"} (forall<K,V> t: Table K V :: {LenTable(t)}
    (exists k: K :: {ContainsTable(t, k)} ContainsTable(t, k)) ==> LenTable(t) >= 1
);
// TODO: we might want to encoder a stronger property that the length of table
// must be more than N given a set of N items. Currently we don't see a need here
// and the above axiom seems to be sufficient.
// Copyright Â© Aptos Foundation
// SPDX-License-Identifier: Apache-2.0

// ==================================================================================
// Native object::exists_at// ==================================================================================
// Intrinsic implementation of aggregator_v2 for element type `u128`


datatype $1_aggregator_v2_Aggregator'u128' {
    $1_aggregator_v2_Aggregator'u128'($value: int, $max_value: int)
}
function {:inline} $Update'$1_aggregator_v2_Aggregator'u128''_value(s: $1_aggregator_v2_Aggregator'u128', x: int): $1_aggregator_v2_Aggregator'u128' {
    $1_aggregator_v2_Aggregator'u128'(x, s->$max_value)
}
function {:inline} $Update'$1_aggregator_v2_Aggregator'u128''_max_value(s: $1_aggregator_v2_Aggregator'u128', x: int): $1_aggregator_v2_Aggregator'u128' {
    $1_aggregator_v2_Aggregator'u128'(s->$value, x)
}
function $IsValid'$1_aggregator_v2_Aggregator'u128''(s: $1_aggregator_v2_Aggregator'u128'): bool {
    $IsValid'u128'(s->$value)
      && $IsValid'u128'(s->$max_value)
}
function {:inline} $IsEqual'$1_aggregator_v2_Aggregator'u128''(s1: $1_aggregator_v2_Aggregator'u128', s2: $1_aggregator_v2_Aggregator'u128'): bool {
    $IsEqual'u128'(s1->$value, s2->$value)
      && $IsEqual'u128'(s1->$max_value, s2->$max_value)
}

procedure {:inline 1} $1_aggregator_v2_create_unbounded_aggregator'u128'() returns (res: $1_aggregator_v2_Aggregator'u128')
{
    res := $1_aggregator_v2_Aggregator'u128'(0, $MAX_U128);
    }


    procedure {:inline 1} $1_aggregator_v2_create_aggregator'u128'($max_value: int) returns (res: $1_aggregator_v2_Aggregator'u128')
    {
        res := $1_aggregator_v2_Aggregator'u128'(0, $max_value);
        }


    procedure {:inline 1} $1_aggregator_v2_try_add'u128'(aggregator: $Mutation ($1_aggregator_v2_Aggregator'u128'), value: int) returns (res: bool, aggregator_updated: $Mutation ($1_aggregator_v2_Aggregator'u128'))
    {
        if ($Dereference(aggregator)->$max_value < value + $Dereference(aggregator)->$value) {
            res := false;
            aggregator_updated:= aggregator;
        } else {
            res := true;
            aggregator_updated:= $UpdateMutation(aggregator, $1_aggregator_v2_Aggregator'u128'(value + $Dereference(aggregator)->$value, $Dereference(aggregator)->$max_value));
        }
        }

    procedure {:inline 1} $1_aggregator_v2_try_sub'u128'(aggregator: $Mutation ($1_aggregator_v2_Aggregator'u128'), value: int) returns (res: bool, aggregator_updated: $Mutation ($1_aggregator_v2_Aggregator'u128'))
    {
        if ($Dereference(aggregator)->$value < value) {
            res := false;
            aggregator_updated:= aggregator;
            return;
        } else {
            res := true;
            aggregator_updated:= $UpdateMutation(aggregator, $1_aggregator_v2_Aggregator'u128'($Dereference(aggregator)->$value - value, $Dereference(aggregator)->$max_value));
            return;
        }
        }

    procedure {:inline 1} $1_aggregator_v2_add'u128'(aggregator: $Mutation ($1_aggregator_v2_Aggregator'u128'), value: int) returns (aggregator_updated: $Mutation ($1_aggregator_v2_Aggregator'u128'))
    {
       var try_result: bool;
       var try_aggregator: $Mutation $1_aggregator_v2_Aggregator'u128';
       call try_result, try_aggregator := $1_aggregator_v2_try_add'u128'(aggregator, value);
       if (!try_result) {
           call $ExecFailureAbort();
           return;
       }
       aggregator_updated := try_aggregator;
       return;
       }

   procedure {:inline 1} $1_aggregator_v2_sub'u128'(aggregator: $Mutation ($1_aggregator_v2_Aggregator'u128'), value: int) returns (aggregator_updated: $Mutation ($1_aggregator_v2_Aggregator'u128'))
   {
       var try_result: bool;
          var try_aggregator: $Mutation $1_aggregator_v2_Aggregator'u128';
          call try_result, try_aggregator := $1_aggregator_v2_try_sub'u128'(aggregator, value);
          if (!try_result) {
              call $ExecFailureAbort();
              return;
          }
          aggregator_updated := try_aggregator;
         return;
       }

   procedure {:inline 1} $1_aggregator_v2_read'u128'(aggregator: $1_aggregator_v2_Aggregator'u128') returns (res: int) {
       res := aggregator->$value;
       }

   procedure {:inline 1} $1_aggregator_v2_max_value'u128'(aggregator: $1_aggregator_v2_Aggregator'u128') returns (res: int) {
       res := aggregator->$max_value;
       }

   procedure {:inline 1} $1_aggregator_v2_is_at_least_impl'u128'(aggregator: $1_aggregator_v2_Aggregator'u128', min_amount: int) returns (res: bool)
   {
       res := aggregator->$value >= min_amount;
          return;
       }

function {:inline} $1_aggregator_v2_spec_get_value'u128'(s: $1_aggregator_v2_Aggregator'u128'): int {
    s->$value
}

function {:inline} $1_aggregator_v2_spec_get_max_value'u128'(s: $1_aggregator_v2_Aggregator'u128'): int {
    s->$max_value
}

function {:inline} $1_aggregator_v2_$read'u128'(s: $1_aggregator_v2_Aggregator'u128'): int {
    s->$value
}

function {:inline} $1_aggregator_v2_$is_at_least_impl'u128'(aggregator: $1_aggregator_v2_Aggregator'u128', min_amount: int): bool
   {
       aggregator->$value >= min_amount
   }
// ==================================================================================
// Intrinsic implementation of aggregator_v2 for element type `u64`


datatype $1_aggregator_v2_Aggregator'u64' {
    $1_aggregator_v2_Aggregator'u64'($value: int, $max_value: int)
}
function {:inline} $Update'$1_aggregator_v2_Aggregator'u64''_value(s: $1_aggregator_v2_Aggregator'u64', x: int): $1_aggregator_v2_Aggregator'u64' {
    $1_aggregator_v2_Aggregator'u64'(x, s->$max_value)
}
function {:inline} $Update'$1_aggregator_v2_Aggregator'u64''_max_value(s: $1_aggregator_v2_Aggregator'u64', x: int): $1_aggregator_v2_Aggregator'u64' {
    $1_aggregator_v2_Aggregator'u64'(s->$value, x)
}
function $IsValid'$1_aggregator_v2_Aggregator'u64''(s: $1_aggregator_v2_Aggregator'u64'): bool {
    $IsValid'u64'(s->$value)
      && $IsValid'u64'(s->$max_value)
}
function {:inline} $IsEqual'$1_aggregator_v2_Aggregator'u64''(s1: $1_aggregator_v2_Aggregator'u64', s2: $1_aggregator_v2_Aggregator'u64'): bool {
    $IsEqual'u64'(s1->$value, s2->$value)
      && $IsEqual'u64'(s1->$max_value, s2->$max_value)
}

procedure {:inline 1} $1_aggregator_v2_create_unbounded_aggregator'u64'() returns (res: $1_aggregator_v2_Aggregator'u64')
{
    res := $1_aggregator_v2_Aggregator'u64'(0, $MAX_U64);
    }


    procedure {:inline 1} $1_aggregator_v2_create_aggregator'u64'($max_value: int) returns (res: $1_aggregator_v2_Aggregator'u64')
    {
        res := $1_aggregator_v2_Aggregator'u64'(0, $max_value);
        }


    procedure {:inline 1} $1_aggregator_v2_try_add'u64'(aggregator: $Mutation ($1_aggregator_v2_Aggregator'u64'), value: int) returns (res: bool, aggregator_updated: $Mutation ($1_aggregator_v2_Aggregator'u64'))
    {
        if ($Dereference(aggregator)->$max_value < value + $Dereference(aggregator)->$value) {
            res := false;
            aggregator_updated:= aggregator;
        } else {
            res := true;
            aggregator_updated:= $UpdateMutation(aggregator, $1_aggregator_v2_Aggregator'u64'(value + $Dereference(aggregator)->$value, $Dereference(aggregator)->$max_value));
        }
        }

    procedure {:inline 1} $1_aggregator_v2_try_sub'u64'(aggregator: $Mutation ($1_aggregator_v2_Aggregator'u64'), value: int) returns (res: bool, aggregator_updated: $Mutation ($1_aggregator_v2_Aggregator'u64'))
    {
        if ($Dereference(aggregator)->$value < value) {
            res := false;
            aggregator_updated:= aggregator;
            return;
        } else {
            res := true;
            aggregator_updated:= $UpdateMutation(aggregator, $1_aggregator_v2_Aggregator'u64'($Dereference(aggregator)->$value - value, $Dereference(aggregator)->$max_value));
            return;
        }
        }

    procedure {:inline 1} $1_aggregator_v2_add'u64'(aggregator: $Mutation ($1_aggregator_v2_Aggregator'u64'), value: int) returns (aggregator_updated: $Mutation ($1_aggregator_v2_Aggregator'u64'))
    {
       var try_result: bool;
       var try_aggregator: $Mutation $1_aggregator_v2_Aggregator'u64';
       call try_result, try_aggregator := $1_aggregator_v2_try_add'u64'(aggregator, value);
       if (!try_result) {
           call $ExecFailureAbort();
           return;
       }
       aggregator_updated := try_aggregator;
       return;
       }

   procedure {:inline 1} $1_aggregator_v2_sub'u64'(aggregator: $Mutation ($1_aggregator_v2_Aggregator'u64'), value: int) returns (aggregator_updated: $Mutation ($1_aggregator_v2_Aggregator'u64'))
   {
       var try_result: bool;
          var try_aggregator: $Mutation $1_aggregator_v2_Aggregator'u64';
          call try_result, try_aggregator := $1_aggregator_v2_try_sub'u64'(aggregator, value);
          if (!try_result) {
              call $ExecFailureAbort();
              return;
          }
          aggregator_updated := try_aggregator;
         return;
       }

   procedure {:inline 1} $1_aggregator_v2_read'u64'(aggregator: $1_aggregator_v2_Aggregator'u64') returns (res: int) {
       res := aggregator->$value;
       }

   procedure {:inline 1} $1_aggregator_v2_max_value'u64'(aggregator: $1_aggregator_v2_Aggregator'u64') returns (res: int) {
       res := aggregator->$max_value;
       }

   procedure {:inline 1} $1_aggregator_v2_is_at_least_impl'u64'(aggregator: $1_aggregator_v2_Aggregator'u64', min_amount: int) returns (res: bool)
   {
       res := aggregator->$value >= min_amount;
          return;
       }

function {:inline} $1_aggregator_v2_spec_get_value'u64'(s: $1_aggregator_v2_Aggregator'u64'): int {
    s->$value
}

function {:inline} $1_aggregator_v2_spec_get_max_value'u64'(s: $1_aggregator_v2_Aggregator'u64'): int {
    s->$max_value
}

function {:inline} $1_aggregator_v2_$read'u64'(s: $1_aggregator_v2_Aggregator'u64'): int {
    s->$value
}

function {:inline} $1_aggregator_v2_$is_at_least_impl'u64'(aggregator: $1_aggregator_v2_Aggregator'u64', min_amount: int): bool
   {
       aggregator->$value >= min_amount
   }


// ==================================================================================
// Intrinsic implementation of aggregator and aggregator factory

datatype $1_aggregator_Aggregator {
    $1_aggregator_Aggregator($handle: int, $key: int, $limit: int, $val: int)
}
function {:inline} $Update'$1_aggregator_Aggregator'_handle(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(x, s->$key, s->$limit, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_key(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, x, s->$limit, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_limit(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, s->$key, x, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_val(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, s->$key, s->$limit, x)
}
function $IsValid'$1_aggregator_Aggregator'(s: $1_aggregator_Aggregator): bool {
    $IsValid'address'(s->$handle)
      && $IsValid'address'(s->$key)
      && $IsValid'u128'(s->$limit)
      && $IsValid'u128'(s->$val)
}
function {:inline} $IsEqual'$1_aggregator_Aggregator'(s1: $1_aggregator_Aggregator, s2: $1_aggregator_Aggregator): bool {
    s1 == s2
}
function {:inline} $1_aggregator_spec_get_limit(s: $1_aggregator_Aggregator): int {
    s->$limit
}
function {:inline} $1_aggregator_limit(s: $1_aggregator_Aggregator): int {
    s->$limit
}
procedure {:inline 1} $1_aggregator_limit(s: $1_aggregator_Aggregator) returns (res: int) {
    res := s->$limit;
    return;
}
function {:inline} $1_aggregator_spec_get_handle(s: $1_aggregator_Aggregator): int {
    s->$handle
}
function {:inline} $1_aggregator_spec_get_key(s: $1_aggregator_Aggregator): int {
    s->$key
}
function {:inline} $1_aggregator_spec_get_val(s: $1_aggregator_Aggregator): int {
    s->$val
}

function $1_aggregator_spec_read(agg: $1_aggregator_Aggregator): int {
    $1_aggregator_spec_get_val(agg)
}

function $1_aggregator_spec_aggregator_set_val(agg: $1_aggregator_Aggregator, val: int): $1_aggregator_Aggregator {
    $Update'$1_aggregator_Aggregator'_val(agg, val)
}

function $1_aggregator_spec_aggregator_get_val(agg: $1_aggregator_Aggregator): int {
    $1_aggregator_spec_get_val(agg)
}

function $1_aggregator_factory_spec_new_aggregator(limit: int) : $1_aggregator_Aggregator;

axiom (forall limit: int :: {$1_aggregator_factory_spec_new_aggregator(limit)}
    (var agg := $1_aggregator_factory_spec_new_aggregator(limit);
     $1_aggregator_spec_get_limit(agg) == limit));

axiom (forall limit: int :: {$1_aggregator_factory_spec_new_aggregator(limit)}
     (var agg := $1_aggregator_factory_spec_new_aggregator(limit);
     $1_aggregator_spec_aggregator_get_val(agg) == 0));

// ==================================================================================
// Native for function_info

procedure $1_function_info_is_identifier(s: Vec int) returns (res: bool);



// Uninterpreted function for all types

function $Arbitrary_value_of'#0'(): #0;

function $Arbitrary_value_of'$1_aggregator_v2_Aggregator'u128''(): $1_aggregator_v2_Aggregator'u128';

function $Arbitrary_value_of'$1_aggregator_v2_Aggregator'u64''(): $1_aggregator_v2_Aggregator'u64';

function $Arbitrary_value_of'$1_chain_status_GenesisEndMarker'(): $1_chain_status_GenesisEndMarker;

function $Arbitrary_value_of'$1_event_EventHandle'$1_object_TransferEvent''(): $1_event_EventHandle'$1_object_TransferEvent';

function $Arbitrary_value_of'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent';

function $Arbitrary_value_of'$1_features_Features'(): $1_features_Features;

function $Arbitrary_value_of'$1_fungible_asset_BurnRef'(): $1_fungible_asset_BurnRef;

function $Arbitrary_value_of'$1_fungible_asset_ConcurrentFungibleBalance'(): $1_fungible_asset_ConcurrentFungibleBalance;

function $Arbitrary_value_of'$1_fungible_asset_ConcurrentSupply'(): $1_fungible_asset_ConcurrentSupply;

function $Arbitrary_value_of'$1_fungible_asset_Deposit'(): $1_fungible_asset_Deposit;

function $Arbitrary_value_of'$1_fungible_asset_Frozen'(): $1_fungible_asset_Frozen;

function $Arbitrary_value_of'$1_fungible_asset_FungibleAsset'(): $1_fungible_asset_FungibleAsset;

function $Arbitrary_value_of'$1_fungible_asset_FungibleStore'(): $1_fungible_asset_FungibleStore;

function $Arbitrary_value_of'$1_fungible_asset_Metadata'(): $1_fungible_asset_Metadata;

function $Arbitrary_value_of'$1_fungible_asset_MintRef'(): $1_fungible_asset_MintRef;

function $Arbitrary_value_of'$1_fungible_asset_Supply'(): $1_fungible_asset_Supply;

function $Arbitrary_value_of'$1_fungible_asset_TransferRef'(): $1_fungible_asset_TransferRef;

function $Arbitrary_value_of'$1_fungible_asset_Untransferable'(): $1_fungible_asset_Untransferable;

function $Arbitrary_value_of'$1_fungible_asset_Withdraw'(): $1_fungible_asset_Withdraw;

function $Arbitrary_value_of'$1_guid_GUID'(): $1_guid_GUID;

function $Arbitrary_value_of'$1_guid_ID'(): $1_guid_ID;

function $Arbitrary_value_of'$1_object_ConstructorRef'(): $1_object_ConstructorRef;

function $Arbitrary_value_of'$1_object_DeriveRef'(): $1_object_DeriveRef;

function $Arbitrary_value_of'$1_object_Object'$1_fungible_asset_FungibleStore''(): $1_object_Object'$1_fungible_asset_FungibleStore';

function $Arbitrary_value_of'$1_object_Object'$1_fungible_asset_Metadata''(): $1_object_Object'$1_fungible_asset_Metadata';

function $Arbitrary_value_of'$1_object_ObjectCore'(): $1_object_ObjectCore;

function $Arbitrary_value_of'$1_object_TransferRef'(): $1_object_TransferRef;

function $Arbitrary_value_of'$1_object_Untransferable'(): $1_object_Untransferable;

function $Arbitrary_value_of'$1_option_Option'u128''(): $1_option_Option'u128';

function $Arbitrary_value_of'$1_option_Option'u64''(): $1_option_Option'u64';

function $Arbitrary_value_of'$1_permissioned_signer_GrantedPermissionHandles'(): $1_permissioned_signer_GrantedPermissionHandles;

function $Arbitrary_value_of'$1_primary_fungible_store_DeriveRefPod'(): $1_primary_fungible_store_DeriveRefPod;

function $Arbitrary_value_of'$1_reconfiguration_Configuration'(): $1_reconfiguration_Configuration;

function $Arbitrary_value_of'$1_string_String'(): $1_string_String;

function $Arbitrary_value_of'$1_timestamp_CurrentTimeMicroseconds'(): $1_timestamp_CurrentTimeMicroseconds;

function $Arbitrary_value_of'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'(): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin;

function $Arbitrary_value_of'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'(): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock;

function $Arbitrary_value_of'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability'(): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability;

function $Arbitrary_value_of'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability'(): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability;

function $Arbitrary_value_of'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'(): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState;

function $Arbitrary_value_of'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability'(): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability;

function $Arbitrary_value_of'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'(): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset;

function $Arbitrary_value_of'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability'(): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability;

function $Arbitrary_value_of'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability'(): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability;

function $Arbitrary_value_of'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability'(): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability;

function $Arbitrary_value_of'signer'(): $signer;

function $Arbitrary_value_of'vec'#0''(): Vec (#0);

function $Arbitrary_value_of'vec'address''(): Vec (int);

function $Arbitrary_value_of'vec'u128''(): Vec (int);

function $Arbitrary_value_of'vec'u64''(): Vec (int);

function $Arbitrary_value_of'vec'u8''(): Vec (int);

function $Arbitrary_value_of'bool'(): bool;

function $Arbitrary_value_of'address'(): int;

function $Arbitrary_value_of'u128'(): int;

function $Arbitrary_value_of'u256'(): int;

function $Arbitrary_value_of'u64'(): int;

function $Arbitrary_value_of'u8'(): int;

function $Arbitrary_value_of'vec'bv128''(): Vec (bv128);

function $Arbitrary_value_of'vec'bv64''(): Vec (bv64);

function $Arbitrary_value_of'vec'bv8''(): Vec (bv8);

function $Arbitrary_value_of'bv128'(): bv128;

function $Arbitrary_value_of'bv256'(): bv256;

function $Arbitrary_value_of'bv64'(): bv64;

function $Arbitrary_value_of'bv8'(): bv8;



// ============================================================================================
// Primitive Types

const $MAX_U8: int;
axiom $MAX_U8 == 255;
const $MAX_U16: int;
axiom $MAX_U16 == 65535;
const $MAX_U32: int;
axiom $MAX_U32 == 4294967295;
const $MAX_U64: int;
axiom $MAX_U64 == 18446744073709551615;
const $MAX_U128: int;
axiom $MAX_U128 == 340282366920938463463374607431768211455;
const $MAX_U256: int;
axiom $MAX_U256 == 115792089237316195423570985008687907853269984665640564039457584007913129639935;

// Templates for bitvector operations

function {:bvbuiltin "bvand"} $And'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvor"} $Or'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvxor"} $Xor'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvadd"} $Add'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvsub"} $Sub'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvmul"} $Mul'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvudiv"} $Div'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvurem"} $Mod'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvshl"} $Shl'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvlshr"} $Shr'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvult"} $Lt'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv8'(bv8,bv8) returns(bool);

procedure {:inline 1} $AddBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'($Add'Bv8'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv8'(src1, src2);
}

procedure {:inline 1} $AddBv8_unchecked(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Add'Bv8'(src1, src2);
}

procedure {:inline 1} $SubBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv8'(src1, src2);
}

procedure {:inline 1} $MulBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'($Mul'Bv8'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv8'(src1, src2);
}

procedure {:inline 1} $DivBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if (src2 == 0bv8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv8'(src1, src2);
}

procedure {:inline 1} $ModBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if (src2 == 0bv8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv8'(src1, src2);
}

procedure {:inline 1} $AndBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $And'Bv8'(src1,src2);
}

procedure {:inline 1} $OrBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Or'Bv8'(src1,src2);
}

procedure {:inline 1} $XorBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Xor'Bv8'(src1,src2);
}

procedure {:inline 1} $LtBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Lt'Bv8'(src1,src2);
}

procedure {:inline 1} $LeBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Le'Bv8'(src1,src2);
}

procedure {:inline 1} $GtBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Gt'Bv8'(src1,src2);
}

procedure {:inline 1} $GeBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Ge'Bv8'(src1,src2);
}

function $IsValid'bv8'(v: bv8): bool {
  $Ge'Bv8'(v,0bv8) && $Le'Bv8'(v,255bv8)
}

function {:inline} $IsEqual'bv8'(x: bv8, y: bv8): bool {
    x == y
}

procedure {:inline 1} $int2bv8(src: int) returns (dst: bv8)
{
    if (src > 255) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.8(src);
}

procedure {:inline 1} $bv2int8(src: bv8) returns (dst: int)
{
    dst := $bv2int.8(src);
}

function {:builtin "(_ int2bv 8)"} $int2bv.8(i: int) returns (bv8);
function {:builtin "bv2nat"} $bv2int.8(i: bv8) returns (int);

function {:bvbuiltin "bvand"} $And'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvor"} $Or'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvxor"} $Xor'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvadd"} $Add'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvsub"} $Sub'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvmul"} $Mul'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvudiv"} $Div'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvurem"} $Mod'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvshl"} $Shl'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvlshr"} $Shr'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvult"} $Lt'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv16'(bv16,bv16) returns(bool);

procedure {:inline 1} $AddBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'($Add'Bv16'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv16'(src1, src2);
}

procedure {:inline 1} $AddBv16_unchecked(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Add'Bv16'(src1, src2);
}

procedure {:inline 1} $SubBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv16'(src1, src2);
}

procedure {:inline 1} $MulBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'($Mul'Bv16'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv16'(src1, src2);
}

procedure {:inline 1} $DivBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if (src2 == 0bv16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv16'(src1, src2);
}

procedure {:inline 1} $ModBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if (src2 == 0bv16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv16'(src1, src2);
}

procedure {:inline 1} $AndBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $And'Bv16'(src1,src2);
}

procedure {:inline 1} $OrBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Or'Bv16'(src1,src2);
}

procedure {:inline 1} $XorBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Xor'Bv16'(src1,src2);
}

procedure {:inline 1} $LtBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Lt'Bv16'(src1,src2);
}

procedure {:inline 1} $LeBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Le'Bv16'(src1,src2);
}

procedure {:inline 1} $GtBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Gt'Bv16'(src1,src2);
}

procedure {:inline 1} $GeBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Ge'Bv16'(src1,src2);
}

function $IsValid'bv16'(v: bv16): bool {
  $Ge'Bv16'(v,0bv16) && $Le'Bv16'(v,65535bv16)
}

function {:inline} $IsEqual'bv16'(x: bv16, y: bv16): bool {
    x == y
}

procedure {:inline 1} $int2bv16(src: int) returns (dst: bv16)
{
    if (src > 65535) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.16(src);
}

procedure {:inline 1} $bv2int16(src: bv16) returns (dst: int)
{
    dst := $bv2int.16(src);
}

function {:builtin "(_ int2bv 16)"} $int2bv.16(i: int) returns (bv16);
function {:builtin "bv2nat"} $bv2int.16(i: bv16) returns (int);

function {:bvbuiltin "bvand"} $And'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvor"} $Or'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvxor"} $Xor'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvadd"} $Add'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvsub"} $Sub'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvmul"} $Mul'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvudiv"} $Div'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvurem"} $Mod'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvshl"} $Shl'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvlshr"} $Shr'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvult"} $Lt'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv32'(bv32,bv32) returns(bool);

procedure {:inline 1} $AddBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'($Add'Bv32'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv32'(src1, src2);
}

procedure {:inline 1} $AddBv32_unchecked(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Add'Bv32'(src1, src2);
}

procedure {:inline 1} $SubBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv32'(src1, src2);
}

procedure {:inline 1} $MulBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'($Mul'Bv32'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv32'(src1, src2);
}

procedure {:inline 1} $DivBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if (src2 == 0bv32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv32'(src1, src2);
}

procedure {:inline 1} $ModBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if (src2 == 0bv32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv32'(src1, src2);
}

procedure {:inline 1} $AndBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $And'Bv32'(src1,src2);
}

procedure {:inline 1} $OrBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Or'Bv32'(src1,src2);
}

procedure {:inline 1} $XorBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Xor'Bv32'(src1,src2);
}

procedure {:inline 1} $LtBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Lt'Bv32'(src1,src2);
}

procedure {:inline 1} $LeBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Le'Bv32'(src1,src2);
}

procedure {:inline 1} $GtBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Gt'Bv32'(src1,src2);
}

procedure {:inline 1} $GeBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Ge'Bv32'(src1,src2);
}

function $IsValid'bv32'(v: bv32): bool {
  $Ge'Bv32'(v,0bv32) && $Le'Bv32'(v,2147483647bv32)
}

function {:inline} $IsEqual'bv32'(x: bv32, y: bv32): bool {
    x == y
}

procedure {:inline 1} $int2bv32(src: int) returns (dst: bv32)
{
    if (src > 2147483647) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.32(src);
}

procedure {:inline 1} $bv2int32(src: bv32) returns (dst: int)
{
    dst := $bv2int.32(src);
}

function {:builtin "(_ int2bv 32)"} $int2bv.32(i: int) returns (bv32);
function {:builtin "bv2nat"} $bv2int.32(i: bv32) returns (int);

function {:bvbuiltin "bvand"} $And'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvor"} $Or'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvxor"} $Xor'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvadd"} $Add'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvsub"} $Sub'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvmul"} $Mul'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvudiv"} $Div'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvurem"} $Mod'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvshl"} $Shl'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvlshr"} $Shr'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvult"} $Lt'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv64'(bv64,bv64) returns(bool);

procedure {:inline 1} $AddBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'($Add'Bv64'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv64'(src1, src2);
}

procedure {:inline 1} $AddBv64_unchecked(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Add'Bv64'(src1, src2);
}

procedure {:inline 1} $SubBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv64'(src1, src2);
}

procedure {:inline 1} $MulBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'($Mul'Bv64'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv64'(src1, src2);
}

procedure {:inline 1} $DivBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if (src2 == 0bv64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv64'(src1, src2);
}

procedure {:inline 1} $ModBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if (src2 == 0bv64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv64'(src1, src2);
}

procedure {:inline 1} $AndBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $And'Bv64'(src1,src2);
}

procedure {:inline 1} $OrBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Or'Bv64'(src1,src2);
}

procedure {:inline 1} $XorBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Xor'Bv64'(src1,src2);
}

procedure {:inline 1} $LtBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Lt'Bv64'(src1,src2);
}

procedure {:inline 1} $LeBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Le'Bv64'(src1,src2);
}

procedure {:inline 1} $GtBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Gt'Bv64'(src1,src2);
}

procedure {:inline 1} $GeBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Ge'Bv64'(src1,src2);
}

function $IsValid'bv64'(v: bv64): bool {
  $Ge'Bv64'(v,0bv64) && $Le'Bv64'(v,18446744073709551615bv64)
}

function {:inline} $IsEqual'bv64'(x: bv64, y: bv64): bool {
    x == y
}

procedure {:inline 1} $int2bv64(src: int) returns (dst: bv64)
{
    if (src > 18446744073709551615) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.64(src);
}

procedure {:inline 1} $bv2int64(src: bv64) returns (dst: int)
{
    dst := $bv2int.64(src);
}

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: int) returns (bv64);
function {:builtin "bv2nat"} $bv2int.64(i: bv64) returns (int);

function {:bvbuiltin "bvand"} $And'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvor"} $Or'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvxor"} $Xor'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvadd"} $Add'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvsub"} $Sub'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvmul"} $Mul'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvudiv"} $Div'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvurem"} $Mod'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvshl"} $Shl'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvlshr"} $Shr'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvult"} $Lt'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv128'(bv128,bv128) returns(bool);

procedure {:inline 1} $AddBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'($Add'Bv128'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv128'(src1, src2);
}

procedure {:inline 1} $AddBv128_unchecked(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Add'Bv128'(src1, src2);
}

procedure {:inline 1} $SubBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv128'(src1, src2);
}

procedure {:inline 1} $MulBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'($Mul'Bv128'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv128'(src1, src2);
}

procedure {:inline 1} $DivBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if (src2 == 0bv128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv128'(src1, src2);
}

procedure {:inline 1} $ModBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if (src2 == 0bv128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv128'(src1, src2);
}

procedure {:inline 1} $AndBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $And'Bv128'(src1,src2);
}

procedure {:inline 1} $OrBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Or'Bv128'(src1,src2);
}

procedure {:inline 1} $XorBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Xor'Bv128'(src1,src2);
}

procedure {:inline 1} $LtBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Lt'Bv128'(src1,src2);
}

procedure {:inline 1} $LeBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Le'Bv128'(src1,src2);
}

procedure {:inline 1} $GtBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Gt'Bv128'(src1,src2);
}

procedure {:inline 1} $GeBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Ge'Bv128'(src1,src2);
}

function $IsValid'bv128'(v: bv128): bool {
  $Ge'Bv128'(v,0bv128) && $Le'Bv128'(v,340282366920938463463374607431768211455bv128)
}

function {:inline} $IsEqual'bv128'(x: bv128, y: bv128): bool {
    x == y
}

procedure {:inline 1} $int2bv128(src: int) returns (dst: bv128)
{
    if (src > 340282366920938463463374607431768211455) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.128(src);
}

procedure {:inline 1} $bv2int128(src: bv128) returns (dst: int)
{
    dst := $bv2int.128(src);
}

function {:builtin "(_ int2bv 128)"} $int2bv.128(i: int) returns (bv128);
function {:builtin "bv2nat"} $bv2int.128(i: bv128) returns (int);

function {:bvbuiltin "bvand"} $And'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvor"} $Or'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvxor"} $Xor'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvadd"} $Add'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvsub"} $Sub'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvmul"} $Mul'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvudiv"} $Div'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvurem"} $Mod'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvshl"} $Shl'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvlshr"} $Shr'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvult"} $Lt'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv256'(bv256,bv256) returns(bool);

procedure {:inline 1} $AddBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'($Add'Bv256'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv256'(src1, src2);
}

procedure {:inline 1} $AddBv256_unchecked(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Add'Bv256'(src1, src2);
}

procedure {:inline 1} $SubBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv256'(src1, src2);
}

procedure {:inline 1} $MulBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'($Mul'Bv256'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv256'(src1, src2);
}

procedure {:inline 1} $DivBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if (src2 == 0bv256) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv256'(src1, src2);
}

procedure {:inline 1} $ModBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if (src2 == 0bv256) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv256'(src1, src2);
}

procedure {:inline 1} $AndBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $And'Bv256'(src1,src2);
}

procedure {:inline 1} $OrBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Or'Bv256'(src1,src2);
}

procedure {:inline 1} $XorBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Xor'Bv256'(src1,src2);
}

procedure {:inline 1} $LtBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Lt'Bv256'(src1,src2);
}

procedure {:inline 1} $LeBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Le'Bv256'(src1,src2);
}

procedure {:inline 1} $GtBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Gt'Bv256'(src1,src2);
}

procedure {:inline 1} $GeBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Ge'Bv256'(src1,src2);
}

function $IsValid'bv256'(v: bv256): bool {
  $Ge'Bv256'(v,0bv256) && $Le'Bv256'(v,115792089237316195423570985008687907853269984665640564039457584007913129639935bv256)
}

function {:inline} $IsEqual'bv256'(x: bv256, y: bv256): bool {
    x == y
}

procedure {:inline 1} $int2bv256(src: int) returns (dst: bv256)
{
    if (src > 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.256(src);
}

procedure {:inline 1} $bv2int256(src: bv256) returns (dst: int)
{
    dst := $bv2int.256(src);
}

function {:builtin "(_ int2bv 256)"} $int2bv.256(i: int) returns (bv256);
function {:builtin "bv2nat"} $bv2int.256(i: bv256) returns (int);

datatype $Range {
    $Range(lb: int, ub: int)
}

function {:inline} $IsValid'bool'(v: bool): bool {
  true
}

function $IsValid'u8'(v: int): bool {
  v >= 0 && v <= $MAX_U8
}

function $IsValid'u16'(v: int): bool {
  v >= 0 && v <= $MAX_U16
}

function $IsValid'u32'(v: int): bool {
  v >= 0 && v <= $MAX_U32
}

function $IsValid'u64'(v: int): bool {
  v >= 0 && v <= $MAX_U64
}

function $IsValid'u128'(v: int): bool {
  v >= 0 && v <= $MAX_U128
}

function $IsValid'u256'(v: int): bool {
  v >= 0 && v <= $MAX_U256
}

function $IsValid'num'(v: int): bool {
  true
}

function $IsValid'address'(v: int): bool {
  // TODO: restrict max to representable addresses?
  v >= 0
}

function {:inline} $IsValidRange(r: $Range): bool {
   $IsValid'u64'(r->lb) &&  $IsValid'u64'(r->ub)
}

// Intentionally not inlined so it serves as a trigger in quantifiers.
function $InRange(r: $Range, i: int): bool {
   r->lb <= i && i < r->ub
}


function {:inline} $IsEqual'u8'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u16'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u32'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u64'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u128'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u256'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'num'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'address'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'bool'(x: bool, y: bool): bool {
    x == y
}

// ============================================================================================
// Memory

datatype $Location {
    // A global resource location within the statically known resource type's memory,
    // where `a` is an address.
    $Global(a: int),
    // A local location. `i` is the unique index of the local.
    $Local(i: int),
    // The location of a reference outside of the verification scope, for example, a `&mut` parameter
    // of the function being verified. References with these locations don't need to be written back
    // when mutation ends.
    $Param(i: int),
    // The location of an uninitialized mutation. Using this to make sure that the location
    // will not be equal to any valid mutation locations, i.e., $Local, $Global, or $Param.
    $Uninitialized()
}

// A mutable reference which also carries its current value. Since mutable references
// are single threaded in Move, we can keep them together and treat them as a value
// during mutation until the point they are stored back to their original location.
datatype $Mutation<T> {
    $Mutation(l: $Location, p: Vec int, v: T)
}

// Representation of memory for a given type.
datatype $Memory<T> {
    $Memory(domain: [int]bool, contents: [int]T)
}

function {:builtin "MapConst"} $ConstMemoryDomain(v: bool): [int]bool;
function {:builtin "MapConst"} $ConstMemoryContent<T>(v: T): [int]T;
axiom $ConstMemoryDomain(false) == (lambda i: int :: false);
axiom $ConstMemoryDomain(true) == (lambda i: int :: true);


// Dereferences a mutation.
function {:inline} $Dereference<T>(ref: $Mutation T): T {
    ref->v
}

// Update the value of a mutation.
function {:inline} $UpdateMutation<T>(m: $Mutation T, v: T): $Mutation T {
    $Mutation(m->l, m->p, v)
}

function {:inline} $ChildMutation<T1, T2>(m: $Mutation T1, offset: int, v: T2): $Mutation T2 {
    $Mutation(m->l, ExtendVec(m->p, offset), v)
}

// Return true if two mutations share the location and path
function {:inline} $IsSameMutation<T1, T2>(parent: $Mutation T1, child: $Mutation T2 ): bool {
    parent->l == child->l && parent->p == child->p
}

// Return true if the mutation is a parent of a child which was derived with the given edge offset. This
// is used to implement write-back choices.
function {:inline} $IsParentMutation<T1, T2>(parent: $Mutation T1, edge: int, child: $Mutation T2 ): bool {
    parent->l == child->l &&
    (var pp := parent->p;
    (var cp := child->p;
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
     cl == pl + 1 &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) ==  ReadVec(cp, i)) &&
     $EdgeMatches(ReadVec(cp, pl), edge)
    ))))
}

// Return true if the mutation is a parent of a child, for hyper edge.
function {:inline} $IsParentMutationHyper<T1, T2>(parent: $Mutation T1, hyper_edge: Vec int, child: $Mutation T2 ): bool {
    parent->l == child->l &&
    (var pp := parent->p;
    (var cp := child->p;
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
    (var el := LenVec(hyper_edge);
     cl == pl + el &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) == ReadVec(cp, i)) &&
     (forall i: int:: i >= 0 && i < el ==> $EdgeMatches(ReadVec(cp, pl + i), ReadVec(hyper_edge, i)))
    )))))
}

function {:inline} $EdgeMatches(edge: int, edge_pattern: int): bool {
    edge_pattern == -1 // wildcard
    || edge_pattern == edge
}



function {:inline} $SameLocation<T1, T2>(m1: $Mutation T1, m2: $Mutation T2): bool {
    m1->l == m2->l
}

function {:inline} $HasGlobalLocation<T>(m: $Mutation T): bool {
    (m->l) is $Global
}

function {:inline} $HasLocalLocation<T>(m: $Mutation T, idx: int): bool {
    m->l == $Local(idx)
}

function {:inline} $GlobalLocationAddress<T>(m: $Mutation T): int {
    (m->l)->a
}



// Tests whether resource exists.
function {:inline} $ResourceExists<T>(m: $Memory T, addr: int): bool {
    m->domain[addr]
}

// Obtains Value of given resource.
function {:inline} $ResourceValue<T>(m: $Memory T, addr: int): T {
    m->contents[addr]
}

// Update resource.
function {:inline} $ResourceUpdate<T>(m: $Memory T, a: int, v: T): $Memory T {
    $Memory(m->domain[a := true], m->contents[a := v])
}

// Remove resource.
function {:inline} $ResourceRemove<T>(m: $Memory T, a: int): $Memory T {
    $Memory(m->domain[a := false], m->contents)
}

// Copies resource from memory s to m.
function {:inline} $ResourceCopy<T>(m: $Memory T, s: $Memory T, a: int): $Memory T {
    $Memory(m->domain[a := s->domain[a]],
            m->contents[a := s->contents[a]])
}



// ============================================================================================
// Abort Handling

var $abort_flag: bool;
var $abort_code: int;

function {:inline} $process_abort_code(code: int): int {
    code
}

const $EXEC_FAILURE_CODE: int;
axiom $EXEC_FAILURE_CODE == -1;

// TODO(wrwg): currently we map aborts of native functions like those for vectors also to
//   execution failure. This may need to be aligned with what the runtime actually does.

procedure {:inline 1} $ExecFailureAbort() {
    $abort_flag := true;
    $abort_code := $EXEC_FAILURE_CODE;
}

procedure {:inline 1} $Abort(code: int) {
    $abort_flag := true;
    $abort_code := code;
}

function {:inline} $StdError(cat: int, reason: int): int {
    reason * 256 + cat
}

procedure {:inline 1} $InitVerification() {
    // Set abort_flag to false, and havoc abort_code
    $abort_flag := false;
    havoc $abort_code;
    // Initialize event store
    call $InitEventStore();
}

// ============================================================================================
// Instructions


procedure {:inline 1} $CastU8(src: int) returns (dst: int)
{
    if (src > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU16(src: int) returns (dst: int)
{
    if (src > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU32(src: int) returns (dst: int)
{
    if (src > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU64(src: int) returns (dst: int)
{
    if (src > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU128(src: int) returns (dst: int)
{
    if (src > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU256(src: int) returns (dst: int)
{
    if (src > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $AddU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU16(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU16_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU32(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU32_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU256(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU256_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $Sub(src1: int, src2: int) returns (dst: int)
{
    if (src1 < src2) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 - src2;
}

// uninterpreted function to return an undefined value.
function $undefined_int(): int;

// Recursive exponentiation function
// Undefined unless e >=0.  $pow(0,0) is also undefined.
function $pow(n: int, e: int): int {
    if n != 0 && e == 0 then 1
    else if e > 0 then n * $pow(n, e - 1)
    else $undefined_int()
}

function $shl(src1: int, p: int): int {
    src1 * $pow(2, p)
}

function $shlU8(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 256
}

function $shlU16(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 65536
}

function $shlU32(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 4294967296
}

function $shlU64(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 18446744073709551616
}

function $shlU128(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 340282366920938463463374607431768211456
}

function $shlU256(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 115792089237316195423570985008687907853269984665640564039457584007913129639936
}

function $shr(src1: int, p: int): int {
    src1 div $pow(2, p)
}

// We need to know the size of the destination in order to drop bits
// that have been shifted left more than that, so we have $ShlU8/16/32/64/128/256
procedure {:inline 1} $ShlU8(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU8(src1, src2);
}

// Template for cast and shift operations of bitvector types

procedure {:inline 1} $CastBv8to8(src: bv8) returns (dst: bv8)
{
    dst := src;
}


function $castBv8to8(src: bv8) returns (bv8)
{
    src
}


function $shlBv8From8(src1: bv8, src2: bv8) returns (bv8)
{
    $Shl'Bv8'(src1, src2)
}

procedure {:inline 1} $ShlBv8From8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Ge'Bv8'(src2, 8bv8)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv8'(src1, src2);
}

function $shrBv8From8(src1: bv8, src2: bv8) returns (bv8)
{
    $Shr'Bv8'(src1, src2)
}

procedure {:inline 1} $ShrBv8From8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Ge'Bv8'(src2, 8bv8)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv8'(src1, src2);
}

procedure {:inline 1} $CastBv16to8(src: bv16) returns (dst: bv8)
{
    if ($Gt'Bv16'(src, 255bv16)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}



function $shlBv8From16(src1: bv8, src2: bv16) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From16(src1: bv8, src2: bv16) returns (dst: bv8)
{
    if ($Ge'Bv16'(src2, 8bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From16(src1: bv8, src2: bv16) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From16(src1: bv8, src2: bv16) returns (dst: bv8)
{
    if ($Ge'Bv16'(src2, 8bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv32to8(src: bv32) returns (dst: bv8)
{
    if ($Gt'Bv32'(src, 255bv32)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}



function $shlBv8From32(src1: bv8, src2: bv32) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From32(src1: bv8, src2: bv32) returns (dst: bv8)
{
    if ($Ge'Bv32'(src2, 8bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From32(src1: bv8, src2: bv32) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From32(src1: bv8, src2: bv32) returns (dst: bv8)
{
    if ($Ge'Bv32'(src2, 8bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv64to8(src: bv64) returns (dst: bv8)
{
    if ($Gt'Bv64'(src, 255bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $castBv64to8(src: bv64) returns (bv8)
{
    if ($Gt'Bv64'(src, 255bv64)) then
        $Arbitrary_value_of'bv8'()
    else
    src[8:0]
}


function $shlBv8From64(src1: bv8, src2: bv64) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From64(src1: bv8, src2: bv64) returns (dst: bv8)
{
    if ($Ge'Bv64'(src2, 8bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From64(src1: bv8, src2: bv64) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From64(src1: bv8, src2: bv64) returns (dst: bv8)
{
    if ($Ge'Bv64'(src2, 8bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv128to8(src: bv128) returns (dst: bv8)
{
    if ($Gt'Bv128'(src, 255bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $castBv128to8(src: bv128) returns (bv8)
{
    if ($Gt'Bv128'(src, 255bv128)) then
        $Arbitrary_value_of'bv8'()
    else
    src[8:0]
}


function $shlBv8From128(src1: bv8, src2: bv128) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From128(src1: bv8, src2: bv128) returns (dst: bv8)
{
    if ($Ge'Bv128'(src2, 8bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From128(src1: bv8, src2: bv128) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From128(src1: bv8, src2: bv128) returns (dst: bv8)
{
    if ($Ge'Bv128'(src2, 8bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv256to8(src: bv256) returns (dst: bv8)
{
    if ($Gt'Bv256'(src, 255bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $castBv256to8(src: bv256) returns (bv8)
{
    if ($Gt'Bv256'(src, 255bv256)) then
        $Arbitrary_value_of'bv8'()
    else
    src[8:0]
}


function $shlBv8From256(src1: bv8, src2: bv256) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From256(src1: bv8, src2: bv256) returns (dst: bv8)
{
    if ($Ge'Bv256'(src2, 8bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From256(src1: bv8, src2: bv256) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From256(src1: bv8, src2: bv256) returns (dst: bv8)
{
    if ($Ge'Bv256'(src2, 8bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv8to16(src: bv8) returns (dst: bv16)
{
    dst := 0bv8 ++ src;
}



function $shlBv16From8(src1: bv16, src2: bv8) returns (bv16)
{
    $Shl'Bv16'(src1, 0bv8 ++ src2)
}

procedure {:inline 1} $ShlBv16From8(src1: bv16, src2: bv8) returns (dst: bv16)
{
    if ($Ge'Bv8'(src2, 16bv8)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv16'(src1, 0bv8 ++ src2);
}

function $shrBv16From8(src1: bv16, src2: bv8) returns (bv16)
{
    $Shr'Bv16'(src1, 0bv8 ++ src2)
}

procedure {:inline 1} $ShrBv16From8(src1: bv16, src2: bv8) returns (dst: bv16)
{
    if ($Ge'Bv8'(src2, 16bv8)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv16'(src1, 0bv8 ++ src2);
}

procedure {:inline 1} $CastBv16to16(src: bv16) returns (dst: bv16)
{
    dst := src;
}



function $shlBv16From16(src1: bv16, src2: bv16) returns (bv16)
{
    $Shl'Bv16'(src1, src2)
}

procedure {:inline 1} $ShlBv16From16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Ge'Bv16'(src2, 16bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv16'(src1, src2);
}

function $shrBv16From16(src1: bv16, src2: bv16) returns (bv16)
{
    $Shr'Bv16'(src1, src2)
}

procedure {:inline 1} $ShrBv16From16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Ge'Bv16'(src2, 16bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv16'(src1, src2);
}

procedure {:inline 1} $CastBv32to16(src: bv32) returns (dst: bv16)
{
    if ($Gt'Bv32'(src, 65535bv32)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}



function $shlBv16From32(src1: bv16, src2: bv32) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From32(src1: bv16, src2: bv32) returns (dst: bv16)
{
    if ($Ge'Bv32'(src2, 16bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From32(src1: bv16, src2: bv32) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From32(src1: bv16, src2: bv32) returns (dst: bv16)
{
    if ($Ge'Bv32'(src2, 16bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv64to16(src: bv64) returns (dst: bv16)
{
    if ($Gt'Bv64'(src, 65535bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}



function $shlBv16From64(src1: bv16, src2: bv64) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From64(src1: bv16, src2: bv64) returns (dst: bv16)
{
    if ($Ge'Bv64'(src2, 16bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From64(src1: bv16, src2: bv64) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From64(src1: bv16, src2: bv64) returns (dst: bv16)
{
    if ($Ge'Bv64'(src2, 16bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv128to16(src: bv128) returns (dst: bv16)
{
    if ($Gt'Bv128'(src, 65535bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}



function $shlBv16From128(src1: bv16, src2: bv128) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From128(src1: bv16, src2: bv128) returns (dst: bv16)
{
    if ($Ge'Bv128'(src2, 16bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From128(src1: bv16, src2: bv128) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From128(src1: bv16, src2: bv128) returns (dst: bv16)
{
    if ($Ge'Bv128'(src2, 16bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv256to16(src: bv256) returns (dst: bv16)
{
    if ($Gt'Bv256'(src, 65535bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}



function $shlBv16From256(src1: bv16, src2: bv256) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From256(src1: bv16, src2: bv256) returns (dst: bv16)
{
    if ($Ge'Bv256'(src2, 16bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From256(src1: bv16, src2: bv256) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From256(src1: bv16, src2: bv256) returns (dst: bv16)
{
    if ($Ge'Bv256'(src2, 16bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv8to32(src: bv8) returns (dst: bv32)
{
    dst := 0bv24 ++ src;
}



function $shlBv32From8(src1: bv32, src2: bv8) returns (bv32)
{
    $Shl'Bv32'(src1, 0bv24 ++ src2)
}

procedure {:inline 1} $ShlBv32From8(src1: bv32, src2: bv8) returns (dst: bv32)
{
    if ($Ge'Bv8'(src2, 32bv8)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv32'(src1, 0bv24 ++ src2);
}

function $shrBv32From8(src1: bv32, src2: bv8) returns (bv32)
{
    $Shr'Bv32'(src1, 0bv24 ++ src2)
}

procedure {:inline 1} $ShrBv32From8(src1: bv32, src2: bv8) returns (dst: bv32)
{
    if ($Ge'Bv8'(src2, 32bv8)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv32'(src1, 0bv24 ++ src2);
}

procedure {:inline 1} $CastBv16to32(src: bv16) returns (dst: bv32)
{
    dst := 0bv16 ++ src;
}



function $shlBv32From16(src1: bv32, src2: bv16) returns (bv32)
{
    $Shl'Bv32'(src1, 0bv16 ++ src2)
}

procedure {:inline 1} $ShlBv32From16(src1: bv32, src2: bv16) returns (dst: bv32)
{
    if ($Ge'Bv16'(src2, 32bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv32'(src1, 0bv16 ++ src2);
}

function $shrBv32From16(src1: bv32, src2: bv16) returns (bv32)
{
    $Shr'Bv32'(src1, 0bv16 ++ src2)
}

procedure {:inline 1} $ShrBv32From16(src1: bv32, src2: bv16) returns (dst: bv32)
{
    if ($Ge'Bv16'(src2, 32bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv32'(src1, 0bv16 ++ src2);
}

procedure {:inline 1} $CastBv32to32(src: bv32) returns (dst: bv32)
{
    dst := src;
}



function $shlBv32From32(src1: bv32, src2: bv32) returns (bv32)
{
    $Shl'Bv32'(src1, src2)
}

procedure {:inline 1} $ShlBv32From32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Ge'Bv32'(src2, 32bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv32'(src1, src2);
}

function $shrBv32From32(src1: bv32, src2: bv32) returns (bv32)
{
    $Shr'Bv32'(src1, src2)
}

procedure {:inline 1} $ShrBv32From32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Ge'Bv32'(src2, 32bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv32'(src1, src2);
}

procedure {:inline 1} $CastBv64to32(src: bv64) returns (dst: bv32)
{
    if ($Gt'Bv64'(src, 2147483647bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}



function $shlBv32From64(src1: bv32, src2: bv64) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From64(src1: bv32, src2: bv64) returns (dst: bv32)
{
    if ($Ge'Bv64'(src2, 32bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From64(src1: bv32, src2: bv64) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From64(src1: bv32, src2: bv64) returns (dst: bv32)
{
    if ($Ge'Bv64'(src2, 32bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv128to32(src: bv128) returns (dst: bv32)
{
    if ($Gt'Bv128'(src, 2147483647bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}



function $shlBv32From128(src1: bv32, src2: bv128) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From128(src1: bv32, src2: bv128) returns (dst: bv32)
{
    if ($Ge'Bv128'(src2, 32bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From128(src1: bv32, src2: bv128) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From128(src1: bv32, src2: bv128) returns (dst: bv32)
{
    if ($Ge'Bv128'(src2, 32bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv256to32(src: bv256) returns (dst: bv32)
{
    if ($Gt'Bv256'(src, 2147483647bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}



function $shlBv32From256(src1: bv32, src2: bv256) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From256(src1: bv32, src2: bv256) returns (dst: bv32)
{
    if ($Ge'Bv256'(src2, 32bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From256(src1: bv32, src2: bv256) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From256(src1: bv32, src2: bv256) returns (dst: bv32)
{
    if ($Ge'Bv256'(src2, 32bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv8to64(src: bv8) returns (dst: bv64)
{
    dst := 0bv56 ++ src;
}


function $castBv8to64(src: bv8) returns (bv64)
{
    0bv56 ++ src
}


function $shlBv64From8(src1: bv64, src2: bv8) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv56 ++ src2)
}

procedure {:inline 1} $ShlBv64From8(src1: bv64, src2: bv8) returns (dst: bv64)
{
    if ($Ge'Bv8'(src2, 64bv8)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv64'(src1, 0bv56 ++ src2);
}

function $shrBv64From8(src1: bv64, src2: bv8) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv56 ++ src2)
}

procedure {:inline 1} $ShrBv64From8(src1: bv64, src2: bv8) returns (dst: bv64)
{
    if ($Ge'Bv8'(src2, 64bv8)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv64'(src1, 0bv56 ++ src2);
}

procedure {:inline 1} $CastBv16to64(src: bv16) returns (dst: bv64)
{
    dst := 0bv48 ++ src;
}



function $shlBv64From16(src1: bv64, src2: bv16) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv48 ++ src2)
}

procedure {:inline 1} $ShlBv64From16(src1: bv64, src2: bv16) returns (dst: bv64)
{
    if ($Ge'Bv16'(src2, 64bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv64'(src1, 0bv48 ++ src2);
}

function $shrBv64From16(src1: bv64, src2: bv16) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv48 ++ src2)
}

procedure {:inline 1} $ShrBv64From16(src1: bv64, src2: bv16) returns (dst: bv64)
{
    if ($Ge'Bv16'(src2, 64bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv64'(src1, 0bv48 ++ src2);
}

procedure {:inline 1} $CastBv32to64(src: bv32) returns (dst: bv64)
{
    dst := 0bv32 ++ src;
}



function $shlBv64From32(src1: bv64, src2: bv32) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv32 ++ src2)
}

procedure {:inline 1} $ShlBv64From32(src1: bv64, src2: bv32) returns (dst: bv64)
{
    if ($Ge'Bv32'(src2, 64bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv64'(src1, 0bv32 ++ src2);
}

function $shrBv64From32(src1: bv64, src2: bv32) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv32 ++ src2)
}

procedure {:inline 1} $ShrBv64From32(src1: bv64, src2: bv32) returns (dst: bv64)
{
    if ($Ge'Bv32'(src2, 64bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv64'(src1, 0bv32 ++ src2);
}

procedure {:inline 1} $CastBv64to64(src: bv64) returns (dst: bv64)
{
    dst := src;
}


function $castBv64to64(src: bv64) returns (bv64)
{
    src
}


function $shlBv64From64(src1: bv64, src2: bv64) returns (bv64)
{
    $Shl'Bv64'(src1, src2)
}

procedure {:inline 1} $ShlBv64From64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Ge'Bv64'(src2, 64bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv64'(src1, src2);
}

function $shrBv64From64(src1: bv64, src2: bv64) returns (bv64)
{
    $Shr'Bv64'(src1, src2)
}

procedure {:inline 1} $ShrBv64From64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Ge'Bv64'(src2, 64bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv64'(src1, src2);
}

procedure {:inline 1} $CastBv128to64(src: bv128) returns (dst: bv64)
{
    if ($Gt'Bv128'(src, 18446744073709551615bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[64:0];
}


function $castBv128to64(src: bv128) returns (bv64)
{
    if ($Gt'Bv128'(src, 18446744073709551615bv128)) then
        $Arbitrary_value_of'bv64'()
    else
    src[64:0]
}


function $shlBv64From128(src1: bv64, src2: bv128) returns (bv64)
{
    $Shl'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShlBv64From128(src1: bv64, src2: bv128) returns (dst: bv64)
{
    if ($Ge'Bv128'(src2, 64bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv64'(src1, src2[64:0]);
}

function $shrBv64From128(src1: bv64, src2: bv128) returns (bv64)
{
    $Shr'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShrBv64From128(src1: bv64, src2: bv128) returns (dst: bv64)
{
    if ($Ge'Bv128'(src2, 64bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv64'(src1, src2[64:0]);
}

procedure {:inline 1} $CastBv256to64(src: bv256) returns (dst: bv64)
{
    if ($Gt'Bv256'(src, 18446744073709551615bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[64:0];
}


function $castBv256to64(src: bv256) returns (bv64)
{
    if ($Gt'Bv256'(src, 18446744073709551615bv256)) then
        $Arbitrary_value_of'bv64'()
    else
    src[64:0]
}


function $shlBv64From256(src1: bv64, src2: bv256) returns (bv64)
{
    $Shl'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShlBv64From256(src1: bv64, src2: bv256) returns (dst: bv64)
{
    if ($Ge'Bv256'(src2, 64bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv64'(src1, src2[64:0]);
}

function $shrBv64From256(src1: bv64, src2: bv256) returns (bv64)
{
    $Shr'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShrBv64From256(src1: bv64, src2: bv256) returns (dst: bv64)
{
    if ($Ge'Bv256'(src2, 64bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv64'(src1, src2[64:0]);
}

procedure {:inline 1} $CastBv8to128(src: bv8) returns (dst: bv128)
{
    dst := 0bv120 ++ src;
}


function $castBv8to128(src: bv8) returns (bv128)
{
    0bv120 ++ src
}


function $shlBv128From8(src1: bv128, src2: bv8) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv120 ++ src2)
}

procedure {:inline 1} $ShlBv128From8(src1: bv128, src2: bv8) returns (dst: bv128)
{
    if ($Ge'Bv8'(src2, 128bv8)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv128'(src1, 0bv120 ++ src2);
}

function $shrBv128From8(src1: bv128, src2: bv8) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv120 ++ src2)
}

procedure {:inline 1} $ShrBv128From8(src1: bv128, src2: bv8) returns (dst: bv128)
{
    if ($Ge'Bv8'(src2, 128bv8)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv128'(src1, 0bv120 ++ src2);
}

procedure {:inline 1} $CastBv16to128(src: bv16) returns (dst: bv128)
{
    dst := 0bv112 ++ src;
}



function $shlBv128From16(src1: bv128, src2: bv16) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv112 ++ src2)
}

procedure {:inline 1} $ShlBv128From16(src1: bv128, src2: bv16) returns (dst: bv128)
{
    if ($Ge'Bv16'(src2, 128bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv128'(src1, 0bv112 ++ src2);
}

function $shrBv128From16(src1: bv128, src2: bv16) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv112 ++ src2)
}

procedure {:inline 1} $ShrBv128From16(src1: bv128, src2: bv16) returns (dst: bv128)
{
    if ($Ge'Bv16'(src2, 128bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv128'(src1, 0bv112 ++ src2);
}

procedure {:inline 1} $CastBv32to128(src: bv32) returns (dst: bv128)
{
    dst := 0bv96 ++ src;
}



function $shlBv128From32(src1: bv128, src2: bv32) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv96 ++ src2)
}

procedure {:inline 1} $ShlBv128From32(src1: bv128, src2: bv32) returns (dst: bv128)
{
    if ($Ge'Bv32'(src2, 128bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv128'(src1, 0bv96 ++ src2);
}

function $shrBv128From32(src1: bv128, src2: bv32) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv96 ++ src2)
}

procedure {:inline 1} $ShrBv128From32(src1: bv128, src2: bv32) returns (dst: bv128)
{
    if ($Ge'Bv32'(src2, 128bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv128'(src1, 0bv96 ++ src2);
}

procedure {:inline 1} $CastBv64to128(src: bv64) returns (dst: bv128)
{
    dst := 0bv64 ++ src;
}


function $castBv64to128(src: bv64) returns (bv128)
{
    0bv64 ++ src
}


function $shlBv128From64(src1: bv128, src2: bv64) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv64 ++ src2)
}

procedure {:inline 1} $ShlBv128From64(src1: bv128, src2: bv64) returns (dst: bv128)
{
    if ($Ge'Bv64'(src2, 128bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv128'(src1, 0bv64 ++ src2);
}

function $shrBv128From64(src1: bv128, src2: bv64) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv64 ++ src2)
}

procedure {:inline 1} $ShrBv128From64(src1: bv128, src2: bv64) returns (dst: bv128)
{
    if ($Ge'Bv64'(src2, 128bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv128'(src1, 0bv64 ++ src2);
}

procedure {:inline 1} $CastBv128to128(src: bv128) returns (dst: bv128)
{
    dst := src;
}


function $castBv128to128(src: bv128) returns (bv128)
{
    src
}


function $shlBv128From128(src1: bv128, src2: bv128) returns (bv128)
{
    $Shl'Bv128'(src1, src2)
}

procedure {:inline 1} $ShlBv128From128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Ge'Bv128'(src2, 128bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv128'(src1, src2);
}

function $shrBv128From128(src1: bv128, src2: bv128) returns (bv128)
{
    $Shr'Bv128'(src1, src2)
}

procedure {:inline 1} $ShrBv128From128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Ge'Bv128'(src2, 128bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv128'(src1, src2);
}

procedure {:inline 1} $CastBv256to128(src: bv256) returns (dst: bv128)
{
    if ($Gt'Bv256'(src, 340282366920938463463374607431768211455bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[128:0];
}


function $castBv256to128(src: bv256) returns (bv128)
{
    if ($Gt'Bv256'(src, 340282366920938463463374607431768211455bv256)) then
        $Arbitrary_value_of'bv128'()
    else
    src[128:0]
}


function $shlBv128From256(src1: bv128, src2: bv256) returns (bv128)
{
    $Shl'Bv128'(src1, src2[128:0])
}

procedure {:inline 1} $ShlBv128From256(src1: bv128, src2: bv256) returns (dst: bv128)
{
    if ($Ge'Bv256'(src2, 128bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv128'(src1, src2[128:0]);
}

function $shrBv128From256(src1: bv128, src2: bv256) returns (bv128)
{
    $Shr'Bv128'(src1, src2[128:0])
}

procedure {:inline 1} $ShrBv128From256(src1: bv128, src2: bv256) returns (dst: bv128)
{
    if ($Ge'Bv256'(src2, 128bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv128'(src1, src2[128:0]);
}

procedure {:inline 1} $CastBv8to256(src: bv8) returns (dst: bv256)
{
    dst := 0bv248 ++ src;
}


function $castBv8to256(src: bv8) returns (bv256)
{
    0bv248 ++ src
}


function $shlBv256From8(src1: bv256, src2: bv8) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv248 ++ src2)
}

procedure {:inline 1} $ShlBv256From8(src1: bv256, src2: bv8) returns (dst: bv256)
{
    assume $bv2int.8(src2) >= 0 && $bv2int.8(src2) < 256;
    dst := $Shl'Bv256'(src1, 0bv248 ++ src2);
}

function $shrBv256From8(src1: bv256, src2: bv8) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv248 ++ src2)
}

procedure {:inline 1} $ShrBv256From8(src1: bv256, src2: bv8) returns (dst: bv256)
{
    assume $bv2int.8(src2) >= 0 && $bv2int.8(src2) < 256;
    dst := $Shr'Bv256'(src1, 0bv248 ++ src2);
}

procedure {:inline 1} $CastBv16to256(src: bv16) returns (dst: bv256)
{
    dst := 0bv240 ++ src;
}



function $shlBv256From16(src1: bv256, src2: bv16) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv240 ++ src2)
}

procedure {:inline 1} $ShlBv256From16(src1: bv256, src2: bv16) returns (dst: bv256)
{
    if ($Ge'Bv16'(src2, 256bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv256'(src1, 0bv240 ++ src2);
}

function $shrBv256From16(src1: bv256, src2: bv16) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv240 ++ src2)
}

procedure {:inline 1} $ShrBv256From16(src1: bv256, src2: bv16) returns (dst: bv256)
{
    if ($Ge'Bv16'(src2, 256bv16)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv256'(src1, 0bv240 ++ src2);
}

procedure {:inline 1} $CastBv32to256(src: bv32) returns (dst: bv256)
{
    dst := 0bv224 ++ src;
}



function $shlBv256From32(src1: bv256, src2: bv32) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv224 ++ src2)
}

procedure {:inline 1} $ShlBv256From32(src1: bv256, src2: bv32) returns (dst: bv256)
{
    if ($Ge'Bv32'(src2, 256bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv256'(src1, 0bv224 ++ src2);
}

function $shrBv256From32(src1: bv256, src2: bv32) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv224 ++ src2)
}

procedure {:inline 1} $ShrBv256From32(src1: bv256, src2: bv32) returns (dst: bv256)
{
    if ($Ge'Bv32'(src2, 256bv32)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv256'(src1, 0bv224 ++ src2);
}

procedure {:inline 1} $CastBv64to256(src: bv64) returns (dst: bv256)
{
    dst := 0bv192 ++ src;
}


function $castBv64to256(src: bv64) returns (bv256)
{
    0bv192 ++ src
}


function $shlBv256From64(src1: bv256, src2: bv64) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv192 ++ src2)
}

procedure {:inline 1} $ShlBv256From64(src1: bv256, src2: bv64) returns (dst: bv256)
{
    if ($Ge'Bv64'(src2, 256bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv256'(src1, 0bv192 ++ src2);
}

function $shrBv256From64(src1: bv256, src2: bv64) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv192 ++ src2)
}

procedure {:inline 1} $ShrBv256From64(src1: bv256, src2: bv64) returns (dst: bv256)
{
    if ($Ge'Bv64'(src2, 256bv64)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv256'(src1, 0bv192 ++ src2);
}

procedure {:inline 1} $CastBv128to256(src: bv128) returns (dst: bv256)
{
    dst := 0bv128 ++ src;
}


function $castBv128to256(src: bv128) returns (bv256)
{
    0bv128 ++ src
}


function $shlBv256From128(src1: bv256, src2: bv128) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv128 ++ src2)
}

procedure {:inline 1} $ShlBv256From128(src1: bv256, src2: bv128) returns (dst: bv256)
{
    if ($Ge'Bv128'(src2, 256bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv256'(src1, 0bv128 ++ src2);
}

function $shrBv256From128(src1: bv256, src2: bv128) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv128 ++ src2)
}

procedure {:inline 1} $ShrBv256From128(src1: bv256, src2: bv128) returns (dst: bv256)
{
    if ($Ge'Bv128'(src2, 256bv128)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv256'(src1, 0bv128 ++ src2);
}

procedure {:inline 1} $CastBv256to256(src: bv256) returns (dst: bv256)
{
    dst := src;
}


function $castBv256to256(src: bv256) returns (bv256)
{
    src
}


function $shlBv256From256(src1: bv256, src2: bv256) returns (bv256)
{
    $Shl'Bv256'(src1, src2)
}

procedure {:inline 1} $ShlBv256From256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Ge'Bv256'(src2, 256bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shl'Bv256'(src1, src2);
}

function $shrBv256From256(src1: bv256, src2: bv256) returns (bv256)
{
    $Shr'Bv256'(src1, src2)
}

procedure {:inline 1} $ShrBv256From256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Ge'Bv256'(src2, 256bv256)) {
        call $ExecFailureAbort();
        return;
    }

    dst := $Shr'Bv256'(src1, src2);
}

procedure {:inline 1} $ShlU16(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU16(src1, src2);
}

procedure {:inline 1} $ShlU32(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU32(src1, src2);
}

procedure {:inline 1} $ShlU64(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 64) {
       call $ExecFailureAbort();
       return;
    }
    dst := $shlU64(src1, src2);
}

procedure {:inline 1} $ShlU128(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU128(src1, src2);
}

procedure {:inline 1} $ShlU256(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shlU256(src1, src2);
}

procedure {:inline 1} $Shr(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU8(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU16(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU32(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU64(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU128(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU256(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shr(src1, src2);
}

procedure {:inline 1} $MulU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU16(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU32(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU256(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $Div(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 div src2;
}

procedure {:inline 1} $Mod(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 mod src2;
}

procedure {:inline 1} $ArithBinaryUnimplemented(src1: int, src2: int) returns (dst: int);

procedure {:inline 1} $Lt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 < src2;
}

procedure {:inline 1} $Gt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 > src2;
}

procedure {:inline 1} $Le(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 <= src2;
}

procedure {:inline 1} $Ge(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 >= src2;
}

procedure {:inline 1} $And(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 && src2;
}

procedure {:inline 1} $Or(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 || src2;
}

procedure {:inline 1} $Not(src: bool) returns (dst: bool)
{
    dst := !src;
}

// Pack and Unpack are auto-generated for each type T


// ==================================================================================
// Native Vector

function {:inline} $SliceVecByRange<T>(v: Vec T, r: $Range): Vec T {
    SliceVec(v, r->lb, r->ub)
}

// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `#0`

// Not inlined. It appears faster this way.
function $IsEqual'vec'#0''(v1: Vec (#0), v2: Vec (#0)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'#0'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'#0''(v: Vec (#0), prefix: Vec (#0)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'#0'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'#0''(v: Vec (#0), suffix: Vec (#0)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'#0'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'#0''(v: Vec (#0)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'#0'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'#0'(v: Vec (#0), e: #0): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e))
}

function $IndexOfVec'#0'(v: Vec (#0), e: #0): int;
axiom (forall v: Vec (#0), e: #0:: {$IndexOfVec'#0'(v, e)}
    (var i := $IndexOfVec'#0'(v, e);
     if (!$ContainsVec'#0'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'#0'(ReadVec(v, j), e))));


function {:inline} $RangeVec'#0'(v: Vec (#0)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'#0'() returns (v: Vec (#0)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'#0'(v: Vec (#0)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'#0'(m: $Mutation (Vec (#0)), val: #0) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'#0'(v: Vec (#0), val: #0): Vec (#0) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'#0'(m: $Mutation (Vec (#0))) returns (e: #0, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'#0'(m: $Mutation (Vec (#0))) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'#0'(m: $Mutation (Vec (#0)), new_len: int) returns (v: (Vec (#0)), m': $Mutation (Vec (#0))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'#0'(m: $Mutation (Vec (#0)), new_len: int) returns (v: (Vec (#0)), m': $Mutation (Vec (#0))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'#0'(m: $Mutation (Vec (#0)), left: int, right: int) returns (m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var mid_vec: Vec (#0);
    var right_vec: Vec (#0);
    var v: Vec (#0);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'#0'(m: $Mutation (Vec (#0)), rot: int) returns (n: int, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    var left_vec: Vec (#0);
    var right_vec: Vec (#0);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'#0'(m: $Mutation (Vec (#0)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var mid_vec: Vec (#0);
    var right_vec: Vec (#0);
    var mid_left_vec: Vec (#0);
    var mid_right_vec: Vec (#0);
    var v: Vec (#0);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'#0'(m: $Mutation (Vec (#0)), i: int, e: #0) returns (m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var right_vec: Vec (#0);
    var v: Vec (#0);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'#0'(v: Vec (#0)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'#0'(v: Vec (#0)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'#0'(v: Vec (#0), i: int) returns (dst: #0) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'#0'(m: $Mutation (Vec (#0)), index: int)
returns (dst: $Mutation (#0), m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'#0'(v: Vec (#0)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'#0'(m: $Mutation (Vec (#0)), i: int, j: int) returns (m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'#0'(v: Vec (#0), i: int, j: int): Vec (#0) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var len: int;
    var v: Vec (#0);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'#0'(v: Vec (#0), e: #0) returns (res: bool)  {
    res := $ContainsVec'#0'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'#0'(v: Vec (#0), e: #0) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'#0'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `address`

// Not inlined. It appears faster this way.
function $IsEqual'vec'address''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'address'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'address''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'address'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'address''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'address'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'address''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'address'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'address'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e))
}

function $IndexOfVec'address'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'address'(v, e)}
    (var i := $IndexOfVec'address'(v, e);
     if (!$ContainsVec'address'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'address'(ReadVec(v, j), e))));


function {:inline} $RangeVec'address'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'address'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'address'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'address'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'address'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'address'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'address'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'address'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'address'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'address'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'address'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'address'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'address'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'address'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'address'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'address'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'address'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'address'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'address'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'address'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'address'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'address'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'address'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'address'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u128`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u128''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u128'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'u128''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'u128'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'u128''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'u128'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'u128''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u128'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u128'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u128'(ReadVec(v, i), e))
}

function $IndexOfVec'u128'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u128'(v, e)}
    (var i := $IndexOfVec'u128'(v, e);
     if (!$ContainsVec'u128'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u128'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u128'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u128'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u128'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'u128'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'u128'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'u128'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'u128'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'u128'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'u128'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'u128'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'u128'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'u128'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'u128'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'u128'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'u128'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'u128'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'u128'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'u128'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'u128'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'u128'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'u128'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'u128'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'u128'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'u128'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'u128'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'u128'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'u128'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'u128'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'u128'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'u128'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u128'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'u128'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u128'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u64`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u64''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u64'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'u64''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'u64'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'u64''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'u64'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'u64''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u64'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u64'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u64'(ReadVec(v, i), e))
}

function $IndexOfVec'u64'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u64'(v, e)}
    (var i := $IndexOfVec'u64'(v, e);
     if (!$ContainsVec'u64'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u64'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u64'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u64'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u64'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'u64'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'u64'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'u64'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'u64'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'u64'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'u64'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'u64'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'u64'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'u64'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'u64'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'u64'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'u64'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'u64'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'u64'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'u64'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'u64'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'u64'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'u64'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'u64'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'u64'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'u64'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'u64'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'u64'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'u64'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'u64'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'u64'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'u64'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u64'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'u64'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u64'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u8`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u8''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u8'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'u8''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'u8'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'u8''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'u8'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'u8''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u8'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e))
}

function $IndexOfVec'u8'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u8'(v, e)}
    (var i := $IndexOfVec'u8'(v, e);
     if (!$ContainsVec'u8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u8'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'u8'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'u8'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'u8'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'u8'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'u8'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'u8'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'u8'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'u8'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'u8'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'u8'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'u8'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'u8'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'u8'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'u8'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'u8'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'u8'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'u8'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'u8'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'u8'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'u8'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u8'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'u8'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `bv128`

// Not inlined. It appears faster this way.
function $IsEqual'vec'bv128''(v1: Vec (bv128), v2: Vec (bv128)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'bv128'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'bv128''(v: Vec (bv128), prefix: Vec (bv128)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'bv128'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'bv128''(v: Vec (bv128), suffix: Vec (bv128)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'bv128'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'bv128''(v: Vec (bv128)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'bv128'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'bv128'(v: Vec (bv128), e: bv128): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv128'(ReadVec(v, i), e))
}

function $IndexOfVec'bv128'(v: Vec (bv128), e: bv128): int;
axiom (forall v: Vec (bv128), e: bv128:: {$IndexOfVec'bv128'(v, e)}
    (var i := $IndexOfVec'bv128'(v, e);
     if (!$ContainsVec'bv128'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv128'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'bv128'(ReadVec(v, j), e))));


function {:inline} $RangeVec'bv128'(v: Vec (bv128)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'bv128'(): Vec (bv128) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'bv128'() returns (v: Vec (bv128)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'bv128'(): Vec (bv128) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'bv128'(v: Vec (bv128)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'bv128'(m: $Mutation (Vec (bv128)), val: bv128) returns (m': $Mutation (Vec (bv128))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'bv128'(v: Vec (bv128), val: bv128): Vec (bv128) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'bv128'(m: $Mutation (Vec (bv128))) returns (e: bv128, m': $Mutation (Vec (bv128))) {
    var v: Vec (bv128);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'bv128'(m: $Mutation (Vec (bv128)), other: Vec (bv128)) returns (m': $Mutation (Vec (bv128))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'bv128'(m: $Mutation (Vec (bv128))) returns (m': $Mutation (Vec (bv128))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'bv128'(m: $Mutation (Vec (bv128)), other: Vec (bv128)) returns (m': $Mutation (Vec (bv128))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'bv128'(m: $Mutation (Vec (bv128)), new_len: int) returns (v: (Vec (bv128)), m': $Mutation (Vec (bv128))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'bv128'(m: $Mutation (Vec (bv128)), new_len: int) returns (v: (Vec (bv128)), m': $Mutation (Vec (bv128))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'bv128'(m: $Mutation (Vec (bv128)), left: int, right: int) returns (m': $Mutation (Vec (bv128))) {
    var left_vec: Vec (bv128);
    var mid_vec: Vec (bv128);
    var right_vec: Vec (bv128);
    var v: Vec (bv128);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'bv128'(m: $Mutation (Vec (bv128)), rot: int) returns (n: int, m': $Mutation (Vec (bv128))) {
    var v: Vec (bv128);
    var len: int;
    var left_vec: Vec (bv128);
    var right_vec: Vec (bv128);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'bv128'(m: $Mutation (Vec (bv128)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (bv128))) {
    var left_vec: Vec (bv128);
    var mid_vec: Vec (bv128);
    var right_vec: Vec (bv128);
    var mid_left_vec: Vec (bv128);
    var mid_right_vec: Vec (bv128);
    var v: Vec (bv128);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'bv128'(m: $Mutation (Vec (bv128)), i: int, e: bv128) returns (m': $Mutation (Vec (bv128))) {
    var left_vec: Vec (bv128);
    var right_vec: Vec (bv128);
    var v: Vec (bv128);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'bv128'(v: Vec (bv128)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'bv128'(v: Vec (bv128)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'bv128'(v: Vec (bv128), i: int) returns (dst: bv128) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'bv128'(v: Vec (bv128), i: int): bv128 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'bv128'(m: $Mutation (Vec (bv128)), index: int)
returns (dst: $Mutation (bv128), m': $Mutation (Vec (bv128)))
{
    var v: Vec (bv128);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'bv128'(v: Vec (bv128), i: int): bv128 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'bv128'(v: Vec (bv128)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'bv128'(m: $Mutation (Vec (bv128)), i: int, j: int) returns (m': $Mutation (Vec (bv128)))
{
    var v: Vec (bv128);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'bv128'(v: Vec (bv128), i: int, j: int): Vec (bv128) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'bv128'(m: $Mutation (Vec (bv128)), i: int) returns (e: bv128, m': $Mutation (Vec (bv128)))
{
    var v: Vec (bv128);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'bv128'(m: $Mutation (Vec (bv128)), i: int) returns (e: bv128, m': $Mutation (Vec (bv128)))
{
    var len: int;
    var v: Vec (bv128);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'bv128'(v: Vec (bv128), e: bv128) returns (res: bool)  {
    res := $ContainsVec'bv128'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'bv128'(v: Vec (bv128), e: bv128) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'bv128'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `bv64`

// Not inlined. It appears faster this way.
function $IsEqual'vec'bv64''(v1: Vec (bv64), v2: Vec (bv64)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'bv64'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'bv64''(v: Vec (bv64), prefix: Vec (bv64)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'bv64'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'bv64''(v: Vec (bv64), suffix: Vec (bv64)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'bv64'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'bv64''(v: Vec (bv64)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'bv64'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'bv64'(v: Vec (bv64), e: bv64): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv64'(ReadVec(v, i), e))
}

function $IndexOfVec'bv64'(v: Vec (bv64), e: bv64): int;
axiom (forall v: Vec (bv64), e: bv64:: {$IndexOfVec'bv64'(v, e)}
    (var i := $IndexOfVec'bv64'(v, e);
     if (!$ContainsVec'bv64'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv64'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'bv64'(ReadVec(v, j), e))));


function {:inline} $RangeVec'bv64'(v: Vec (bv64)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'bv64'(): Vec (bv64) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'bv64'() returns (v: Vec (bv64)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'bv64'(): Vec (bv64) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'bv64'(v: Vec (bv64)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'bv64'(m: $Mutation (Vec (bv64)), val: bv64) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'bv64'(v: Vec (bv64), val: bv64): Vec (bv64) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'bv64'(m: $Mutation (Vec (bv64))) returns (e: bv64, m': $Mutation (Vec (bv64))) {
    var v: Vec (bv64);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'bv64'(m: $Mutation (Vec (bv64)), other: Vec (bv64)) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'bv64'(m: $Mutation (Vec (bv64))) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'bv64'(m: $Mutation (Vec (bv64)), other: Vec (bv64)) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'bv64'(m: $Mutation (Vec (bv64)), new_len: int) returns (v: (Vec (bv64)), m': $Mutation (Vec (bv64))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'bv64'(m: $Mutation (Vec (bv64)), new_len: int) returns (v: (Vec (bv64)), m': $Mutation (Vec (bv64))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'bv64'(m: $Mutation (Vec (bv64)), left: int, right: int) returns (m': $Mutation (Vec (bv64))) {
    var left_vec: Vec (bv64);
    var mid_vec: Vec (bv64);
    var right_vec: Vec (bv64);
    var v: Vec (bv64);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'bv64'(m: $Mutation (Vec (bv64)), rot: int) returns (n: int, m': $Mutation (Vec (bv64))) {
    var v: Vec (bv64);
    var len: int;
    var left_vec: Vec (bv64);
    var right_vec: Vec (bv64);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'bv64'(m: $Mutation (Vec (bv64)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (bv64))) {
    var left_vec: Vec (bv64);
    var mid_vec: Vec (bv64);
    var right_vec: Vec (bv64);
    var mid_left_vec: Vec (bv64);
    var mid_right_vec: Vec (bv64);
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'bv64'(m: $Mutation (Vec (bv64)), i: int, e: bv64) returns (m': $Mutation (Vec (bv64))) {
    var left_vec: Vec (bv64);
    var right_vec: Vec (bv64);
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'bv64'(v: Vec (bv64)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'bv64'(v: Vec (bv64)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'bv64'(v: Vec (bv64), i: int) returns (dst: bv64) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'bv64'(v: Vec (bv64), i: int): bv64 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'bv64'(m: $Mutation (Vec (bv64)), index: int)
returns (dst: $Mutation (bv64), m': $Mutation (Vec (bv64)))
{
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'bv64'(v: Vec (bv64), i: int): bv64 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'bv64'(v: Vec (bv64)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'bv64'(m: $Mutation (Vec (bv64)), i: int, j: int) returns (m': $Mutation (Vec (bv64)))
{
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'bv64'(v: Vec (bv64), i: int, j: int): Vec (bv64) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'bv64'(m: $Mutation (Vec (bv64)), i: int) returns (e: bv64, m': $Mutation (Vec (bv64)))
{
    var v: Vec (bv64);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'bv64'(m: $Mutation (Vec (bv64)), i: int) returns (e: bv64, m': $Mutation (Vec (bv64)))
{
    var len: int;
    var v: Vec (bv64);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'bv64'(v: Vec (bv64), e: bv64) returns (res: bool)  {
    res := $ContainsVec'bv64'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'bv64'(v: Vec (bv64), e: bv64) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'bv64'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `bv8`

// Not inlined. It appears faster this way.
function $IsEqual'vec'bv8''(v1: Vec (bv8), v2: Vec (bv8)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'bv8'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'bv8''(v: Vec (bv8), prefix: Vec (bv8)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'bv8'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'bv8''(v: Vec (bv8), suffix: Vec (bv8)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'bv8'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'bv8''(v: Vec (bv8)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'bv8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'bv8'(v: Vec (bv8), e: bv8): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv8'(ReadVec(v, i), e))
}

function $IndexOfVec'bv8'(v: Vec (bv8), e: bv8): int;
axiom (forall v: Vec (bv8), e: bv8:: {$IndexOfVec'bv8'(v, e)}
    (var i := $IndexOfVec'bv8'(v, e);
     if (!$ContainsVec'bv8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'bv8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'bv8'(v: Vec (bv8)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'bv8'(): Vec (bv8) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'bv8'() returns (v: Vec (bv8)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'bv8'(): Vec (bv8) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'bv8'(v: Vec (bv8)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'bv8'(m: $Mutation (Vec (bv8)), val: bv8) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'bv8'(v: Vec (bv8), val: bv8): Vec (bv8) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'bv8'(m: $Mutation (Vec (bv8))) returns (e: bv8, m': $Mutation (Vec (bv8))) {
    var v: Vec (bv8);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'bv8'(m: $Mutation (Vec (bv8)), other: Vec (bv8)) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'bv8'(m: $Mutation (Vec (bv8))) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'bv8'(m: $Mutation (Vec (bv8)), other: Vec (bv8)) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'bv8'(m: $Mutation (Vec (bv8)), new_len: int) returns (v: (Vec (bv8)), m': $Mutation (Vec (bv8))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'bv8'(m: $Mutation (Vec (bv8)), new_len: int) returns (v: (Vec (bv8)), m': $Mutation (Vec (bv8))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'bv8'(m: $Mutation (Vec (bv8)), left: int, right: int) returns (m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var mid_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var v: Vec (bv8);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'bv8'(m: $Mutation (Vec (bv8)), rot: int) returns (n: int, m': $Mutation (Vec (bv8))) {
    var v: Vec (bv8);
    var len: int;
    var left_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'bv8'(m: $Mutation (Vec (bv8)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var mid_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var mid_left_vec: Vec (bv8);
    var mid_right_vec: Vec (bv8);
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'bv8'(m: $Mutation (Vec (bv8)), i: int, e: bv8) returns (m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'bv8'(v: Vec (bv8)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'bv8'(v: Vec (bv8)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'bv8'(v: Vec (bv8), i: int) returns (dst: bv8) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'bv8'(v: Vec (bv8), i: int): bv8 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'bv8'(m: $Mutation (Vec (bv8)), index: int)
returns (dst: $Mutation (bv8), m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'bv8'(v: Vec (bv8), i: int): bv8 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'bv8'(v: Vec (bv8)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'bv8'(m: $Mutation (Vec (bv8)), i: int, j: int) returns (m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'bv8'(v: Vec (bv8), i: int, j: int): Vec (bv8) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'bv8'(m: $Mutation (Vec (bv8)), i: int) returns (e: bv8, m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'bv8'(m: $Mutation (Vec (bv8)), i: int) returns (e: bv8, m': $Mutation (Vec (bv8)))
{
    var len: int;
    var v: Vec (bv8);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'bv8'(v: Vec (bv8), e: bv8) returns (res: bool)  {
    res := $ContainsVec'bv8'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'bv8'(v: Vec (bv8), e: bv8) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'bv8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ==================================================================================
// Native Table

// ==================================================================================
// Native Hash

// Hash is modeled as an otherwise uninterpreted injection.
// In truth, it is not an injection since the domain has greater cardinality
// (arbitrary length vectors) than the co-domain (vectors of length 32).  But it is
// common to assume in code there are no hash collisions in practice.  Fortunately,
// Boogie is not smart enough to recognized that there is an inconsistency.
// FIXME: If we were using a reliable extensional theory of arrays, and if we could use ==
// instead of $IsEqual, we might be able to avoid so many quantified formulas by
// using a sha2_inverse function in the ensures conditions of Hash_sha2_256 to
// assert that sha2/3 are injections without using global quantified axioms.


function $1_hash_sha2(val: Vec int): Vec int;

// This says that Hash_sha2 is bijective.
axiom (forall v1,v2: Vec int :: {$1_hash_sha2(v1), $1_hash_sha2(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_hash_sha2(v1), $1_hash_sha2(v2)));

procedure $1_hash_sha2_256(val: Vec int) returns (res: Vec int);
ensures res == $1_hash_sha2(val);     // returns Hash_sha2 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_hash_$sha2_256(val: Vec int): Vec int {
    $1_hash_sha2(val)
}

// similarly for Hash_sha3
function $1_hash_sha3(val: Vec int): Vec int;

axiom (forall v1,v2: Vec int :: {$1_hash_sha3(v1), $1_hash_sha3(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_hash_sha3(v1), $1_hash_sha3(v2)));

procedure $1_hash_sha3_256(val: Vec int) returns (res: Vec int);
ensures res == $1_hash_sha3(val);     // returns Hash_sha3 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_hash_$sha3_256(val: Vec int): Vec int {
    $1_hash_sha3(val)
}

// ==================================================================================
// Native string

// TODO: correct implementation of strings

procedure {:inline 1} $1_string_internal_check_utf8(x: Vec int) returns (r: bool) {
}

procedure {:inline 1} $1_string_internal_sub_string(x: Vec int, i: int, j: int) returns (r: Vec int) {
}

procedure {:inline 1} $1_string_internal_index_of(x: Vec int, y: Vec int) returns (r: int) {
}

procedure {:inline 1} $1_string_internal_is_char_boundary(x: Vec int, i: int) returns (r: bool) {
}




// ==================================================================================
// Native diem_account

procedure {:inline 1} $1_DiemAccount_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

procedure {:inline 1} $1_DiemAccount_destroy_signer(
  signer: $signer
) {
  return;
}

// ==================================================================================
// Native account

procedure {:inline 1} $1_Account_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

// ==================================================================================
// Native Signer

datatype $signer {
    $signer($addr: int),
    $permissioned_signer($addr: int, $permission_addr: int)
}

function {:inline} $IsValid'signer'(s: $signer): bool {
    if s is $signer then
        $IsValid'address'(s->$addr)
    else
        $IsValid'address'(s->$addr) &&
        $IsValid'address'(s->$permission_addr)
}

function {:inline} $IsEqual'signer'(s1: $signer, s2: $signer): bool {
    if s1 is $signer && s2 is $signer then
        s1 == s2
    else if s1 is $permissioned_signer && s2 is $permissioned_signer then
        s1 == s2
    else
        false
}

procedure {:inline 1} $1_signer_borrow_address(signer: $signer) returns (res: int) {
    res := signer->$addr;
}

function {:inline} $1_signer_$borrow_address(signer: $signer): int
{
    signer->$addr
}

function $1_signer_is_txn_signer(s: $signer): bool;

function $1_signer_is_txn_signer_addr(a: int): bool;


// ==================================================================================
// Native signature

// Signature related functionality is handled via uninterpreted functions. This is sound
// currently because we verify every code path based on signature verification with
// an arbitrary interpretation.

function $1_Signature_$ed25519_validate_pubkey(public_key: Vec int): bool;
function $1_Signature_$ed25519_verify(signature: Vec int, public_key: Vec int, message: Vec int): bool;

// Needed because we do not have extensional equality:
axiom (forall k1, k2: Vec int ::
    {$1_Signature_$ed25519_validate_pubkey(k1), $1_Signature_$ed25519_validate_pubkey(k2)}
    $IsEqual'vec'u8''(k1, k2) ==> $1_Signature_$ed25519_validate_pubkey(k1) == $1_Signature_$ed25519_validate_pubkey(k2));
axiom (forall s1, s2, k1, k2, m1, m2: Vec int ::
    {$1_Signature_$ed25519_verify(s1, k1, m1), $1_Signature_$ed25519_verify(s2, k2, m2)}
    $IsEqual'vec'u8''(s1, s2) && $IsEqual'vec'u8''(k1, k2) && $IsEqual'vec'u8''(m1, m2)
    ==> $1_Signature_$ed25519_verify(s1, k1, m1) == $1_Signature_$ed25519_verify(s2, k2, m2));


procedure {:inline 1} $1_Signature_ed25519_validate_pubkey(public_key: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_validate_pubkey(public_key);
}

procedure {:inline 1} $1_Signature_ed25519_verify(
        signature: Vec int, public_key: Vec int, message: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_verify(signature, public_key, message);
}


// ==================================================================================
// Native bcs::serialize


// ==================================================================================
// Native Event module



procedure {:inline 1} $InitEventStore() {
}

// ============================================================================================
// Type Reflection on Type Parameters

datatype $TypeParamInfo {
    $TypeParamBool(),
    $TypeParamU8(),
    $TypeParamU16(),
    $TypeParamU32(),
    $TypeParamU64(),
    $TypeParamU128(),
    $TypeParamU256(),
    $TypeParamAddress(),
    $TypeParamSigner(),
    $TypeParamVector(e: $TypeParamInfo),
    $TypeParamStruct(a: int, m: Vec int, s: Vec int)
}



//==================================
// Begin Translation

function $TypeName(t: $TypeParamInfo): Vec int;
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamBool ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 98][1 := 111][2 := 111][3 := 108], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 98][1 := 111][2 := 111][3 := 108], 4)) ==> t is $TypeParamBool);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU8 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 56], 2)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 56], 2)) ==> t is $TypeParamU8);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU16 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 54], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 54], 3)) ==> t is $TypeParamU16);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU32 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 51][2 := 50], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 51][2 := 50], 3)) ==> t is $TypeParamU32);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU64 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 54][2 := 52], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 54][2 := 52], 3)) ==> t is $TypeParamU64);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU128 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 50][3 := 56], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 50][3 := 56], 4)) ==> t is $TypeParamU128);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU256 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 50][2 := 53][3 := 54], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 50][2 := 53][3 := 54], 4)) ==> t is $TypeParamU256);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamAddress ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 97][1 := 100][2 := 100][3 := 114][4 := 101][5 := 115][6 := 115], 7)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 97][1 := 100][2 := 100][3 := 114][4 := 101][5 := 115][6 := 115], 7)) ==> t is $TypeParamAddress);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamSigner ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 115][1 := 105][2 := 103][3 := 110][4 := 101][5 := 114], 6)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 115][1 := 105][2 := 103][3 := 110][4 := 101][5 := 114], 6)) ==> t is $TypeParamSigner);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamVector ==> $IsEqual'vec'u8''($TypeName(t), ConcatVec(ConcatVec(Vec(DefaultVecMap()[0 := 118][1 := 101][2 := 99][3 := 116][4 := 111][5 := 114][6 := 60], 7), $TypeName(t->e)), Vec(DefaultVecMap()[0 := 62], 1))));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} ($IsPrefix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 118][1 := 101][2 := 99][3 := 116][4 := 111][5 := 114][6 := 60], 7)) && $IsSuffix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 62], 1))) ==> t is $TypeParamVector);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamStruct ==> $IsEqual'vec'u8''($TypeName(t), ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(Vec(DefaultVecMap()[0 := 48][1 := 120], 2), MakeVec1(t->a)), Vec(DefaultVecMap()[0 := 58][1 := 58], 2)), t->m), Vec(DefaultVecMap()[0 := 58][1 := 58], 2)), t->s)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsPrefix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 48][1 := 120], 2)) ==> t is $TypeParamVector);


// Given Types for Type Parameters

type #0;
function {:inline} $IsEqual'#0'(x1: #0, x2: #0): bool { x1 == x2 }
function {:inline} $IsValid'#0'(x: #0): bool { true }
var #0_info: $TypeParamInfo;
var #0_$memory: $Memory #0;

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <bool>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'bool'(b1), $1_from_bcs_deserializable'bool'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <u8>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u8'(b1), $1_from_bcs_deserializable'u8'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <u64>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u64'(b1), $1_from_bcs_deserializable'u64'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <u128>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u128'(b1), $1_from_bcs_deserializable'u128'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <u256>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u256'(b1), $1_from_bcs_deserializable'u256'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <address>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'address'(b1), $1_from_bcs_deserializable'address'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <signer>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'signer'(b1), $1_from_bcs_deserializable'signer'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <vector<u8>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'u8''(b1), $1_from_bcs_deserializable'vec'u8''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <vector<u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'u64''(b1), $1_from_bcs_deserializable'vec'u64''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <vector<u128>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'u128''(b1), $1_from_bcs_deserializable'vec'u128''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <vector<address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'address''(b1), $1_from_bcs_deserializable'vec'address''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <vector<#0>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'#0''(b1), $1_from_bcs_deserializable'vec'#0''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::option::Option<u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'u64''(b1), $1_from_bcs_deserializable'$1_option_Option'u64''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::option::Option<u128>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'u128''(b1), $1_from_bcs_deserializable'$1_option_Option'u128''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::string::String>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_string_String'(b1), $1_from_bcs_deserializable'$1_string_String'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::features::Features>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_features_Features'(b1), $1_from_bcs_deserializable'$1_features_Features'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::chain_status::GenesisEndMarker>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(b1), $1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::timestamp::CurrentTimeMicroseconds>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(b1), $1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::permissioned_signer::GrantedPermissionHandles>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_permissioned_signer_GrantedPermissionHandles'(b1), $1_from_bcs_deserializable'$1_permissioned_signer_GrantedPermissionHandles'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::guid::GUID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_guid_GUID'(b1), $1_from_bcs_deserializable'$1_guid_GUID'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::guid::ID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_guid_ID'(b1), $1_from_bcs_deserializable'$1_guid_ID'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::event::EventHandle<0x1::object::TransferEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_object_TransferEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_object_TransferEvent''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::event::EventHandle<0x1::reconfiguration::NewEpochEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::object::ConstructorRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_ConstructorRef'(b1), $1_from_bcs_deserializable'$1_object_ConstructorRef'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::object::DeriveRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_DeriveRef'(b1), $1_from_bcs_deserializable'$1_object_DeriveRef'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::object::Object<0x1::fungible_asset::FungibleStore>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_FungibleStore''(b1), $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_FungibleStore''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::object::Object<0x1::fungible_asset::Metadata>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_Metadata''(b1), $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_Metadata''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::object::ObjectCore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_ObjectCore'(b1), $1_from_bcs_deserializable'$1_object_ObjectCore'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::object::TransferRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_TransferRef'(b1), $1_from_bcs_deserializable'$1_object_TransferRef'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::object::Untransferable>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_Untransferable'(b1), $1_from_bcs_deserializable'$1_object_Untransferable'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::aggregator_v2::Aggregator<u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u64''(b1), $1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u64''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::aggregator_v2::Aggregator<u128>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u128''(b1), $1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u128''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::TransferRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_TransferRef'(b1), $1_from_bcs_deserializable'$1_fungible_asset_TransferRef'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::Untransferable>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_Untransferable'(b1), $1_from_bcs_deserializable'$1_fungible_asset_Untransferable'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::BurnRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_BurnRef'(b1), $1_from_bcs_deserializable'$1_fungible_asset_BurnRef'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::ConcurrentFungibleBalance>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_ConcurrentFungibleBalance'(b1), $1_from_bcs_deserializable'$1_fungible_asset_ConcurrentFungibleBalance'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::ConcurrentSupply>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_ConcurrentSupply'(b1), $1_from_bcs_deserializable'$1_fungible_asset_ConcurrentSupply'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::Deposit>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_Deposit'(b1), $1_from_bcs_deserializable'$1_fungible_asset_Deposit'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::Frozen>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_Frozen'(b1), $1_from_bcs_deserializable'$1_fungible_asset_Frozen'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::FungibleAsset>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_FungibleAsset'(b1), $1_from_bcs_deserializable'$1_fungible_asset_FungibleAsset'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::FungibleStore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_FungibleStore'(b1), $1_from_bcs_deserializable'$1_fungible_asset_FungibleStore'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::Metadata>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_Metadata'(b1), $1_from_bcs_deserializable'$1_fungible_asset_Metadata'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::MintRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_MintRef'(b1), $1_from_bcs_deserializable'$1_fungible_asset_MintRef'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::Supply>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_Supply'(b1), $1_from_bcs_deserializable'$1_fungible_asset_Supply'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::fungible_asset::Withdraw>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_Withdraw'(b1), $1_from_bcs_deserializable'$1_fungible_asset_Withdraw'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::primary_fungible_store::DeriveRefPod>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_primary_fungible_store_DeriveRefPod'(b1), $1_from_bcs_deserializable'$1_primary_fungible_store_DeriveRefPod'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x1::reconfiguration::Configuration>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_reconfiguration_Configuration'(b1), $1_from_bcs_deserializable'$1_reconfiguration_Configuration'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'(b1), $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'(b1), $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::BurnCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability'(b1), $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::FreezeCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability'(b1), $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::MintCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability'(b1), $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::DepositCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability'(b1), $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'(b1), $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'(b1), $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::UnfreezeCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability'(b1), $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::WithdrawCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability'(b1), $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:18:9+124, instance <#0>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'#0'(b1), $1_from_bcs_deserializable'#0'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <bool>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserialize'bool'(b1), $1_from_bcs_deserialize'bool'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <u8>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u8'($1_from_bcs_deserialize'u8'(b1), $1_from_bcs_deserialize'u8'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <u64>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u64'($1_from_bcs_deserialize'u64'(b1), $1_from_bcs_deserialize'u64'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <u128>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u128'($1_from_bcs_deserialize'u128'(b1), $1_from_bcs_deserialize'u128'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <u256>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u256'($1_from_bcs_deserialize'u256'(b1), $1_from_bcs_deserialize'u256'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <address>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'address'($1_from_bcs_deserialize'address'(b1), $1_from_bcs_deserialize'address'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <signer>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'signer'($1_from_bcs_deserialize'signer'(b1), $1_from_bcs_deserialize'signer'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <vector<u8>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'u8''($1_from_bcs_deserialize'vec'u8''(b1), $1_from_bcs_deserialize'vec'u8''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <vector<u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'u64''($1_from_bcs_deserialize'vec'u64''(b1), $1_from_bcs_deserialize'vec'u64''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <vector<u128>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'u128''($1_from_bcs_deserialize'vec'u128''(b1), $1_from_bcs_deserialize'vec'u128''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <vector<address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'address''($1_from_bcs_deserialize'vec'address''(b1), $1_from_bcs_deserialize'vec'address''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <vector<#0>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'#0''($1_from_bcs_deserialize'vec'#0''(b1), $1_from_bcs_deserialize'vec'#0''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::option::Option<u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'u64''($1_from_bcs_deserialize'$1_option_Option'u64''(b1), $1_from_bcs_deserialize'$1_option_Option'u64''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::option::Option<u128>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'u128''($1_from_bcs_deserialize'$1_option_Option'u128''(b1), $1_from_bcs_deserialize'$1_option_Option'u128''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::string::String>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_string_String'($1_from_bcs_deserialize'$1_string_String'(b1), $1_from_bcs_deserialize'$1_string_String'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::features::Features>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_features_Features'($1_from_bcs_deserialize'$1_features_Features'(b1), $1_from_bcs_deserialize'$1_features_Features'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::chain_status::GenesisEndMarker>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_chain_status_GenesisEndMarker'($1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(b1), $1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::timestamp::CurrentTimeMicroseconds>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_timestamp_CurrentTimeMicroseconds'($1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(b1), $1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::permissioned_signer::GrantedPermissionHandles>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_permissioned_signer_GrantedPermissionHandles'($1_from_bcs_deserialize'$1_permissioned_signer_GrantedPermissionHandles'(b1), $1_from_bcs_deserialize'$1_permissioned_signer_GrantedPermissionHandles'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::guid::GUID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_guid_GUID'($1_from_bcs_deserialize'$1_guid_GUID'(b1), $1_from_bcs_deserialize'$1_guid_GUID'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::guid::ID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_guid_ID'($1_from_bcs_deserialize'$1_guid_ID'(b1), $1_from_bcs_deserialize'$1_guid_ID'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::event::EventHandle<0x1::object::TransferEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_object_TransferEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_object_TransferEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_object_TransferEvent''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::event::EventHandle<0x1::reconfiguration::NewEpochEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::object::ConstructorRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_ConstructorRef'($1_from_bcs_deserialize'$1_object_ConstructorRef'(b1), $1_from_bcs_deserialize'$1_object_ConstructorRef'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::object::DeriveRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_DeriveRef'($1_from_bcs_deserialize'$1_object_DeriveRef'(b1), $1_from_bcs_deserialize'$1_object_DeriveRef'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::object::Object<0x1::fungible_asset::FungibleStore>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_Object'$1_fungible_asset_FungibleStore''($1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_FungibleStore''(b1), $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_FungibleStore''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::object::Object<0x1::fungible_asset::Metadata>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''($1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_Metadata''(b1), $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_Metadata''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::object::ObjectCore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_ObjectCore'($1_from_bcs_deserialize'$1_object_ObjectCore'(b1), $1_from_bcs_deserialize'$1_object_ObjectCore'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::object::TransferRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_TransferRef'($1_from_bcs_deserialize'$1_object_TransferRef'(b1), $1_from_bcs_deserialize'$1_object_TransferRef'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::object::Untransferable>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_Untransferable'($1_from_bcs_deserialize'$1_object_Untransferable'(b1), $1_from_bcs_deserialize'$1_object_Untransferable'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::aggregator_v2::Aggregator<u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_aggregator_v2_Aggregator'u64''($1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u64''(b1), $1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u64''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::aggregator_v2::Aggregator<u128>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_aggregator_v2_Aggregator'u128''($1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u128''(b1), $1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u128''(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::TransferRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_TransferRef'($1_from_bcs_deserialize'$1_fungible_asset_TransferRef'(b1), $1_from_bcs_deserialize'$1_fungible_asset_TransferRef'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::Untransferable>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_Untransferable'($1_from_bcs_deserialize'$1_fungible_asset_Untransferable'(b1), $1_from_bcs_deserialize'$1_fungible_asset_Untransferable'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::BurnRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_BurnRef'($1_from_bcs_deserialize'$1_fungible_asset_BurnRef'(b1), $1_from_bcs_deserialize'$1_fungible_asset_BurnRef'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::ConcurrentFungibleBalance>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_ConcurrentFungibleBalance'($1_from_bcs_deserialize'$1_fungible_asset_ConcurrentFungibleBalance'(b1), $1_from_bcs_deserialize'$1_fungible_asset_ConcurrentFungibleBalance'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::ConcurrentSupply>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_ConcurrentSupply'($1_from_bcs_deserialize'$1_fungible_asset_ConcurrentSupply'(b1), $1_from_bcs_deserialize'$1_fungible_asset_ConcurrentSupply'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::Deposit>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_Deposit'($1_from_bcs_deserialize'$1_fungible_asset_Deposit'(b1), $1_from_bcs_deserialize'$1_fungible_asset_Deposit'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::Frozen>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_Frozen'($1_from_bcs_deserialize'$1_fungible_asset_Frozen'(b1), $1_from_bcs_deserialize'$1_fungible_asset_Frozen'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::FungibleAsset>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_FungibleAsset'($1_from_bcs_deserialize'$1_fungible_asset_FungibleAsset'(b1), $1_from_bcs_deserialize'$1_fungible_asset_FungibleAsset'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::FungibleStore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_FungibleStore'($1_from_bcs_deserialize'$1_fungible_asset_FungibleStore'(b1), $1_from_bcs_deserialize'$1_fungible_asset_FungibleStore'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::Metadata>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_Metadata'($1_from_bcs_deserialize'$1_fungible_asset_Metadata'(b1), $1_from_bcs_deserialize'$1_fungible_asset_Metadata'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::MintRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_MintRef'($1_from_bcs_deserialize'$1_fungible_asset_MintRef'(b1), $1_from_bcs_deserialize'$1_fungible_asset_MintRef'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::Supply>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_Supply'($1_from_bcs_deserialize'$1_fungible_asset_Supply'(b1), $1_from_bcs_deserialize'$1_fungible_asset_Supply'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::fungible_asset::Withdraw>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_Withdraw'($1_from_bcs_deserialize'$1_fungible_asset_Withdraw'(b1), $1_from_bcs_deserialize'$1_fungible_asset_Withdraw'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::primary_fungible_store::DeriveRefPod>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_primary_fungible_store_DeriveRefPod'($1_from_bcs_deserialize'$1_primary_fungible_store_DeriveRefPod'(b1), $1_from_bcs_deserialize'$1_primary_fungible_store_DeriveRefPod'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x1::reconfiguration::Configuration>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_reconfiguration_Configuration'($1_from_bcs_deserialize'$1_reconfiguration_Configuration'(b1), $1_from_bcs_deserialize'$1_reconfiguration_Configuration'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'($1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'(b1), $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'($1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'(b1), $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::BurnCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability'($1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability'(b1), $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::FreezeCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability'($1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability'(b1), $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::MintCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability'($1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability'(b1), $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::DepositCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability'($1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability'(b1), $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'($1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'(b1), $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'($1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'(b1), $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::UnfreezeCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability'($1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability'(b1), $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::WithdrawCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability'($1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability'(b1), $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:21:9+118, instance <#0>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'#0'($1_from_bcs_deserialize'#0'(b1), $1_from_bcs_deserialize'#0'(b2)))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\permissioned_signer.spec.move:5:9+288
axiom (forall a: $1_permissioned_signer_GrantedPermissionHandles :: $IsValid'$1_permissioned_signer_GrantedPermissionHandles'(a) ==> ((var $range_0 := $Range(0, LenVec(a->$active_handles)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
((var $range_2 := $Range(0, LenVec(a->$active_handles)); (forall $i_3: int :: $InRange($range_2, $i_3) ==> (var j := $i_3;
((!$IsEqual'num'(i, j) ==> !$IsEqual'address'(ReadVec(a->$active_handles, i), ReadVec(a->$active_handles, j)))))))))))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\hash.spec.move:8:9+113
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_keccak256(b1), $1_aptos_hash_spec_keccak256(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\hash.spec.move:13:9+129
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_sha2_512_internal(b1), $1_aptos_hash_spec_sha2_512_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\hash.spec.move:18:9+129
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_sha3_512_internal(b1), $1_aptos_hash_spec_sha3_512_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\hash.spec.move:23:9+131
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_ripemd160_internal(b1), $1_aptos_hash_spec_ripemd160_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\hash.spec.move:28:9+135
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_blake2b_256_internal(b1), $1_aptos_hash_spec_blake2b_256_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\vector.move:199:5+93
function {:inline} $1_vector_$is_empty'u128'(self: Vec (int)): bool {
    $IsEqual'u64'($1_vector_$length'u128'(self), 0)
}

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:34:10+81
function {:inline} $1_option_spec_none'u64'(): $1_option_Option'u64' {
    $1_option_Option'u64'($EmptyVec'u64'())
}

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:34:10+81
function {:inline} $1_option_spec_none'u128'(): $1_option_Option'u128' {
    $1_option_Option'u128'($EmptyVec'u128'())
}

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:47:10+89
function {:inline} $1_option_spec_some'u64'(e: int): $1_option_Option'u64' {
    $1_option_Option'u64'(MakeVec1(e))
}

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:69:10+90
function {:inline} $1_option_spec_is_none'u128'(self: $1_option_Option'u128'): bool {
    $1_vector_$is_empty'u128'(self->$vec)
}

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:82:10+91
function {:inline} $1_option_spec_is_some'u128'(self: $1_option_Option'u128'): bool {
    !$1_vector_$is_empty'u128'(self->$vec)
}

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:111:10+84
function {:inline} $1_option_spec_borrow'u128'(self: $1_option_Option'u128'): int {
    ReadVec(self->$vec, 0)
}

// struct option::Option<u64> at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:7:5+81
datatype $1_option_Option'u64' {
    $1_option_Option'u64'($vec: Vec (int))
}
function {:inline} $Update'$1_option_Option'u64''_vec(s: $1_option_Option'u64', x: Vec (int)): $1_option_Option'u64' {
    $1_option_Option'u64'(x)
}
function $IsValid'$1_option_Option'u64''(s: $1_option_Option'u64'): bool {
    $IsValid'vec'u64''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'u64''(s1: $1_option_Option'u64', s2: $1_option_Option'u64'): bool {
    $IsEqual'vec'u64''(s1->$vec, s2->$vec)}

// struct option::Option<u128> at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:7:5+81
datatype $1_option_Option'u128' {
    $1_option_Option'u128'($vec: Vec (int))
}
function {:inline} $Update'$1_option_Option'u128''_vec(s: $1_option_Option'u128', x: Vec (int)): $1_option_Option'u128' {
    $1_option_Option'u128'(x)
}
function $IsValid'$1_option_Option'u128''(s: $1_option_Option'u128'): bool {
    $IsValid'vec'u128''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'u128''(s1: $1_option_Option'u128', s2: $1_option_Option'u128'): bool {
    $IsEqual'vec'u128''(s1->$vec, s2->$vec)}

// fun option::borrow_mut<u128> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:173:5+161
procedure {:inline 1} $1_option_borrow_mut'u128'(_$t0: $Mutation ($1_option_Option'u128')) returns ($ret0: $Mutation (int), $ret1: $Mutation ($1_option_Option'u128'))
{
    // declare local variables
    var $t1: $1_option_Option'u128';
    var $t2: bool;
    var $t3: $Mutation (Vec (int));
    var $t4: int;
    var $t5: $Mutation (int);
    var $t6: int;
    var $t7: int;
    var $t0: $Mutation ($1_option_Option'u128');
    var $temp_0'$1_option_Option'u128'': $1_option_Option'u128';
    var $temp_0'u128': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:173:5+1
    assume {:print "$at(15,5795,5796)"} true;
    $temp_0'$1_option_Option'u128'' := $Dereference($t0);
    assume {:print "$track_local(2,3,0):", $temp_0'$1_option_Option'u128''} $temp_0'$1_option_Option'u128'' == $temp_0'$1_option_Option'u128'';

    // $t1 := read_ref($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:174:17+4
    assume {:print "$at(15,5886,5890)"} true;
    $t1 := $Dereference($t0);

    // $t2 := opaque begin: option::is_some<#0>($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:174:17+14

    // assume WellFormed($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:174:17+14
    assume $IsValid'bool'($t2);

    // assume Eq<bool>($t2, option::spec_is_some<#0>($t1)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:174:17+14
    assume $IsEqual'bool'($t2, $1_option_spec_is_some'u128'($t1));

    // $t2 := opaque end: option::is_some<#0>($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:174:17+14

    // if ($t2) goto L1 else goto L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:174:9+6
    if ($t2) { goto L1; } else { goto L0; }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:175:9+22
    assume {:print "$at(15,5928,5950)"} true;
L1:

    // $t3 := borrow_field<0x1::option::Option<#0>>.vec($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:175:9+22
    assume {:print "$at(15,5928,5950)"} true;
    $t3 := $ChildMutation($t0, 0, $Dereference($t0)->$vec);

    // $t4 := 0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:175:29+1
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := vector::borrow_mut<#0>($t3, $t4) on_abort goto L3 with $t6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:175:9+22
    call $t5,$t3 := $1_vector_borrow_mut'u128'($t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(15,5928,5950)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(2,3):", $t6} $t6 == $t6;
        goto L3;
    }

    // trace_return[0]($t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:173:78+88
    assume {:print "$at(15,5868,5956)"} true;
    $temp_0'u128' := $Dereference($t5);
    assume {:print "$track_return(2,3,0):", $temp_0'u128'} $temp_0'u128' == $temp_0'u128';

    // trace_local[self]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:173:78+88
    $temp_0'$1_option_Option'u128'' := $Dereference($t0);
    assume {:print "$track_local(2,3,0):", $temp_0'$1_option_Option'u128''} $temp_0'$1_option_Option'u128'' == $temp_0'$1_option_Option'u128'';

    // trace_local[self]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:173:78+88
    $temp_0'$1_option_Option'u128'' := $Dereference($t0);
    assume {:print "$track_local(2,3,0):", $temp_0'$1_option_Option'u128''} $temp_0'$1_option_Option'u128'' == $temp_0'$1_option_Option'u128'';

    // goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:173:78+88
    goto L2;

    // label L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:174:9+6
    assume {:print "$at(15,5878,5884)"} true;
L0:

    // pack_ref_deep($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:174:9+6
    assume {:print "$at(15,5878,5884)"} true;

    // drop($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:174:9+6

    // $t7 := 262145 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:174:33+15
    $t7 := 262145;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:174:9+6
    assume {:print "$at(15,5878,5884)"} true;
    assume {:print "$track_abort(2,3):", $t7} $t7 == $t7;

    // $t6 := move($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:174:9+6
    $t6 := $t7;

    // goto L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:174:9+6
    goto L3;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:176:5+1
    assume {:print "$at(15,5955,5956)"} true;
L2:

    // return $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:176:5+1
    assume {:print "$at(15,5955,5956)"} true;
    $ret0 := $t5;
    $ret1 := $t0;
    return;

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:176:5+1
L3:

    // abort($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\option.move:176:5+1
    assume {:print "$at(15,5955,5956)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.spec.move:28:9+50
function  $1_string_spec_internal_check_utf8(v: Vec (int)): bool;
axiom (forall v: Vec (int) ::
(var $$res := $1_string_spec_internal_check_utf8(v);
$IsValid'bool'($$res)));

// struct string::String at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:12:5+70
datatype $1_string_String {
    $1_string_String($bytes: Vec (int))
}
function {:inline} $Update'$1_string_String'_bytes(s: $1_string_String, x: Vec (int)): $1_string_String {
    $1_string_String(x)
}
function $IsValid'$1_string_String'(s: $1_string_String): bool {
    $IsValid'vec'u8''(s->$bytes)
}
function {:inline} $IsEqual'$1_string_String'(s1: $1_string_String, s2: $1_string_String): bool {
    $IsEqual'vec'u8''(s1->$bytes, s2->$bytes)}

// fun string::length [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:42:5+73
procedure {:inline 1} $1_string_length(_$t0: $1_string_String) returns ($ret0: int)
{
    // declare local variables
    var $t1: Vec (int);
    var $t2: int;
    var $t3: int;
    var $t0: $1_string_String;
    var $temp_0'$1_string_String': $1_string_String;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:42:5+1
    assume {:print "$at(17,1278,1279)"} true;
    assume {:print "$track_local(3,4,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::string::String>.bytes($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:43:9+19
    assume {:print "$at(17,1326,1345)"} true;
    $t1 := $t0->$bytes;

    // $t2 := vector::length<u8>($t1) on_abort goto L2 with $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:43:9+19
    call $t2 := $1_vector_length'u8'($t1);
    if ($abort_flag) {
        assume {:print "$at(17,1326,1345)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(3,4):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:43:9+19
    assume {:print "$track_return(3,4,0):", $t2} $t2 == $t2;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:44:5+1
    assume {:print "$at(17,1350,1351)"} true;
L1:

    // return $t2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:44:5+1
    assume {:print "$at(17,1350,1351)"} true;
    $ret0 := $t2;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:44:5+1
L2:

    // abort($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:44:5+1
    assume {:print "$at(17,1350,1351)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun string::utf8 [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:17:5+133
procedure {:inline 1} $1_string_utf8(_$t0: Vec (int)) returns ($ret0: $1_string_String)
{
    // declare local variables
    var $t1: bool;
    var $t2: $1_string_String;
    var $t3: int;
    var $t0: Vec (int);
    var $temp_0'$1_string_String': $1_string_String;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[bytes]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:17:5+1
    assume {:print "$at(17,552,553)"} true;
    assume {:print "$track_local(3,13,0):", $t0} $t0 == $t0;

    // $t1 := opaque begin: string::internal_check_utf8($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:18:17+27
    assume {:print "$at(17,613,640)"} true;

    // assume WellFormed($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:18:17+27
    assume $IsValid'bool'($t1);

    // assume Eq<bool>($t1, string::spec_internal_check_utf8($t0)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:18:17+27
    assume $IsEqual'bool'($t1, $1_string_spec_internal_check_utf8($t0));

    // $t1 := opaque end: string::internal_check_utf8($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:18:17+27

    // if ($t1) goto L1 else goto L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:18:9+6
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:19:9+13
    assume {:print "$at(17,666,679)"} true;
L1:

    // $t2 := pack 0x1::string::String($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:19:9+13
    assume {:print "$at(17,666,679)"} true;
    $t2 := $1_string_String($t0);

    // trace_return[0]($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:17:48+90
    assume {:print "$at(17,595,685)"} true;
    assume {:print "$track_return(3,13,0):", $t2} $t2 == $t2;

    // goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:17:48+90
    goto L2;

    // label L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:18:46+13
    assume {:print "$at(17,642,655)"} true;
L0:

    // $t3 := 1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:18:46+13
    assume {:print "$at(17,642,655)"} true;
    $t3 := 1;
    assume $IsValid'u64'($t3);

    // trace_abort($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:18:9+6
    assume {:print "$at(17,605,611)"} true;
    assume {:print "$track_abort(3,13):", $t3} $t3 == $t3;

    // goto L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:18:9+6
    goto L3;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:20:5+1
    assume {:print "$at(17,684,685)"} true;
L2:

    // return $t2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:20:5+1
    assume {:print "$at(17,684,685)"} true;
    $ret0 := $t2;
    return;

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:20:5+1
L3:

    // abort($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\string.move:20:5+1
    assume {:print "$at(17,684,685)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\signer.move:26:5+77
function {:inline} $1_signer_$address_of(s: $signer): int {
    $1_signer_$borrow_address(s)
}

// fun signer::address_of [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\signer.move:26:5+77
procedure {:inline 1} $1_signer_address_of(_$t0: $signer) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t0: $signer;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[s]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\signer.move:26:5+1
    assume {:print "$at(16,794,795)"} true;
    assume {:print "$track_local(4,0,0):", $t0} $t0 == $t0;

    // $t1 := signer::borrow_address($t0) on_abort goto L2 with $t2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\signer.move:27:10+17
    assume {:print "$at(16,848,865)"} true;
    call $t1 := $1_signer_borrow_address($t0);
    if ($abort_flag) {
        assume {:print "$at(16,848,865)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(4,0):", $t2} $t2 == $t2;
        goto L2;
    }

    // trace_return[0]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\signer.move:27:9+18
    assume {:print "$track_return(4,0,0):", $t1} $t1 == $t1;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\signer.move:28:5+1
    assume {:print "$at(16,870,871)"} true;
L1:

    // return $t1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\signer.move:28:5+1
    assume {:print "$at(16,870,871)"} true;
    $ret0 := $t1;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\signer.move:28:5+1
L2:

    // abort($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\signer.move:28:5+1
    assume {:print "$at(16,870,871)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun error::already_exists [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:83:3+71
procedure {:inline 1} $1_error_already_exists(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:83:3+1
    assume {:print "$at(11,3585,3586)"} true;
    assume {:print "$track_local(5,1,0):", $t0} $t0 == $t0;

    // $t1 := 8 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:83:54+14
    $t1 := 8;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:69:5+29
    assume {:print "$at(11,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:83:44+28
    assume {:print "$at(11,3626,3654)"} true;

    // assume WellFormed($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:83:44+28
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:83:44+28
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:83:44+28

    // trace_return[0]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:83:44+28
    assume {:print "$track_return(5,1,0):", $t3} $t3 == $t3;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:83:73+1
L1:

    // return $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:83:73+1
    assume {:print "$at(11,3655,3656)"} true;
    $ret0 := $t3;
    return;

}

// fun error::invalid_argument [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:76:3+76
procedure {:inline 1} $1_error_invalid_argument(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:76:3+1
    assume {:print "$at(11,3082,3083)"} true;
    assume {:print "$track_local(5,4,0):", $t0} $t0 == $t0;

    // $t1 := 1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:76:57+16
    $t1 := 1;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:69:5+29
    assume {:print "$at(11,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:76:47+30
    assume {:print "$at(11,3126,3156)"} true;

    // assume WellFormed($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:76:47+30
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:76:47+30
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:76:47+30

    // trace_return[0]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:76:47+30
    assume {:print "$track_return(5,4,0):", $t3} $t3 == $t3;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:76:78+1
L1:

    // return $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:76:78+1
    assume {:print "$at(11,3157,3158)"} true;
    $ret0 := $t3;
    return;

}

// fun error::invalid_state [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:78:3+70
procedure {:inline 1} $1_error_invalid_state(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:78:3+1
    assume {:print "$at(11,3232,3233)"} true;
    assume {:print "$track_local(5,5,0):", $t0} $t0 == $t0;

    // $t1 := 3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:78:54+13
    $t1 := 3;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:69:5+29
    assume {:print "$at(11,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:78:44+27
    assume {:print "$at(11,3273,3300)"} true;

    // assume WellFormed($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:78:44+27
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:78:44+27
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:78:44+27

    // trace_return[0]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:78:44+27
    assume {:print "$track_return(5,5,0):", $t3} $t3 == $t3;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:78:72+1
L1:

    // return $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:78:72+1
    assume {:print "$at(11,3301,3302)"} true;
    $ret0 := $t3;
    return;

}

// fun error::not_found [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:81:3+61
procedure {:inline 1} $1_error_not_found(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:81:3+1
    assume {:print "$at(11,3461,3462)"} true;
    assume {:print "$track_local(5,6,0):", $t0} $t0 == $t0;

    // $t1 := 6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:81:49+9
    $t1 := 6;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:69:5+29
    assume {:print "$at(11,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:81:39+23
    assume {:print "$at(11,3497,3520)"} true;

    // assume WellFormed($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:81:39+23
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:81:39+23
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:81:39+23

    // trace_return[0]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:81:39+23
    assume {:print "$track_return(5,6,0):", $t3} $t3 == $t3;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:81:63+1
L1:

    // return $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:81:63+1
    assume {:print "$at(11,3521,3522)"} true;
    $ret0 := $t3;
    return;

}

// fun error::out_of_range [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:77:3+68
procedure {:inline 1} $1_error_out_of_range(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:77:3+1
    assume {:print "$at(11,3161,3162)"} true;
    assume {:print "$track_local(5,8,0):", $t0} $t0 == $t0;

    // $t1 := 2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:77:53+12
    $t1 := 2;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:69:5+29
    assume {:print "$at(11,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:77:43+26
    assume {:print "$at(11,3201,3227)"} true;

    // assume WellFormed($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:77:43+26
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:77:43+26
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:77:43+26

    // trace_return[0]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:77:43+26
    assume {:print "$track_return(5,8,0):", $t3} $t3 == $t3;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:77:70+1
L1:

    // return $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:77:70+1
    assume {:print "$at(11,3228,3229)"} true;
    $ret0 := $t3;
    return;

}

// fun error::permission_denied [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:80:3+77
procedure {:inline 1} $1_error_permission_denied(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:80:3+1
    assume {:print "$at(11,3381,3382)"} true;
    assume {:print "$track_local(5,9,0):", $t0} $t0 == $t0;

    // $t1 := 5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:80:57+17
    $t1 := 5;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:69:5+29
    assume {:print "$at(11,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:80:47+31
    assume {:print "$at(11,3425,3456)"} true;

    // assume WellFormed($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:80:47+31
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:80:47+31
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:80:47+31

    // trace_return[0]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:80:47+31
    assume {:print "$track_return(5,9,0):", $t3} $t3 == $t3;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:80:79+1
L1:

    // return $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\error.move:80:79+1
    assume {:print "$at(11,3457,3458)"} true;
    $ret0 := $t3;
    return;

}

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\configs\features.spec.move:61:10+40
function  $1_features_spec_is_enabled(feature: int): bool;
axiom (forall feature: int ::
(var $$res := $1_features_spec_is_enabled(feature);
$IsValid'bool'($$res)));

// struct features::Features at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\configs\features.move:724:5+61
datatype $1_features_Features {
    $1_features_Features($features: Vec (bv8))
}
function {:inline} $Update'$1_features_Features'_features(s: $1_features_Features, x: Vec (bv8)): $1_features_Features {
    $1_features_Features(x)
}
function $IsValid'$1_features_Features'(s: $1_features_Features): bool {
    $IsValid'vec'bv8''(s->$features)
}
function {:inline} $IsEqual'$1_features_Features'(s1: $1_features_Features, s2: $1_features_Features): bool {
    $IsEqual'vec'bv8''(s1->$features, s2->$features)}
var $1_features_Features_$memory: $Memory $1_features_Features;

// fun features::concurrent_fungible_assets_enabled [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\configs\features.move:413:5+126
procedure {:inline 1} $1_features_concurrent_fungible_assets_enabled() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 50 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\configs\features.move:414:20+26
    assume {:print "$at(9,14923,14949)"} true;
    $t0 := 50;
    assume $IsValid'u64'($t0);

    // $t1 := opaque begin: features::is_enabled($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\configs\features.move:414:9+38

    // assume WellFormed($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\configs\features.move:414:9+38
    assume $IsValid'bool'($t1);

    // assume Eq<bool>($t1, features::spec_is_enabled($t0)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\configs\features.move:414:9+38
    assume $IsEqual'bool'($t1, $1_features_spec_is_enabled($t0));

    // $t1 := opaque end: features::is_enabled($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\configs\features.move:414:9+38

    // trace_return[0]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\configs\features.move:414:9+38
    assume {:print "$track_return(6,23,0):", $t1} $t1 == $t1;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\configs\features.move:415:5+1
    assume {:print "$at(9,14955,14956)"} true;
L1:

    // return $t1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\configs\features.move:415:5+1
    assume {:print "$at(9,14955,14956)"} true;
    $ret0 := $t1;
    return;

}

// fun features::default_to_concurrent_fungible_balance_enabled [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\configs\features.move:573:5+150
procedure {:inline 1} $1_features_default_to_concurrent_fungible_balance_enabled() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 68 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\configs\features.move:574:20+38
    assume {:print "$at(9,20852,20890)"} true;
    $t0 := 68;
    assume $IsValid'u64'($t0);

    // $t1 := opaque begin: features::is_enabled($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\configs\features.move:574:9+50

    // assume WellFormed($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\configs\features.move:574:9+50
    assume $IsValid'bool'($t1);

    // assume Eq<bool>($t1, features::spec_is_enabled($t0)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\configs\features.move:574:9+50
    assume $IsEqual'bool'($t1, $1_features_spec_is_enabled($t0));

    // $t1 := opaque end: features::is_enabled($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\configs\features.move:574:9+50

    // trace_return[0]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\configs\features.move:574:9+50
    assume {:print "$track_return(6,27,0):", $t1} $t1 == $t1;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\configs\features.move:575:5+1
    assume {:print "$at(9,20896,20897)"} true;
L1:

    // return $t1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\../move-stdlib\sources\configs\features.move:575:5+1
    assume {:print "$at(9,20896,20897)"} true;
    $ret0 := $t1;
    return;

}

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'bool'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'bool'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u8'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u8'(bytes);
$IsValid'u8'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u64'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u64'(bytes);
$IsValid'u64'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u128'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u128'(bytes);
$IsValid'u128'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u256'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u256'(bytes);
$IsValid'u256'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'address'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'address'(bytes);
$IsValid'address'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'signer'(bytes: Vec (int)): $signer;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'signer'(bytes);
$IsValid'signer'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'u8''(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'u8''(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'u64''(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'u64''(bytes);
$IsValid'vec'u64''($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'u128''(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'u128''(bytes);
$IsValid'vec'u128''($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'address''(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'address''(bytes);
$IsValid'vec'address''($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'#0''(bytes: Vec (int)): Vec (#0);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'#0''(bytes);
$IsValid'vec'#0''($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'u64''(bytes: Vec (int)): $1_option_Option'u64';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'u64''(bytes);
$IsValid'$1_option_Option'u64''($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'u128''(bytes: Vec (int)): $1_option_Option'u128';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'u128''(bytes);
$IsValid'$1_option_Option'u128''($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_string_String'(bytes: Vec (int)): $1_string_String;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_string_String'(bytes);
$IsValid'$1_string_String'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_features_Features'(bytes: Vec (int)): $1_features_Features;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_features_Features'(bytes);
$IsValid'$1_features_Features'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(bytes: Vec (int)): $1_chain_status_GenesisEndMarker;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(bytes);
$IsValid'$1_chain_status_GenesisEndMarker'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(bytes: Vec (int)): $1_timestamp_CurrentTimeMicroseconds;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(bytes);
$IsValid'$1_timestamp_CurrentTimeMicroseconds'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_permissioned_signer_GrantedPermissionHandles'(bytes: Vec (int)): $1_permissioned_signer_GrantedPermissionHandles;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_permissioned_signer_GrantedPermissionHandles'(bytes);
$IsValid'$1_permissioned_signer_GrantedPermissionHandles'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_guid_GUID'(bytes: Vec (int)): $1_guid_GUID;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_guid_GUID'(bytes);
$IsValid'$1_guid_GUID'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_guid_ID'(bytes: Vec (int)): $1_guid_ID;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_guid_ID'(bytes);
$IsValid'$1_guid_ID'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_object_TransferEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_object_TransferEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_object_TransferEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_object_TransferEvent''($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_ConstructorRef'(bytes: Vec (int)): $1_object_ConstructorRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_ConstructorRef'(bytes);
$IsValid'$1_object_ConstructorRef'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_DeriveRef'(bytes: Vec (int)): $1_object_DeriveRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_DeriveRef'(bytes);
$IsValid'$1_object_DeriveRef'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_FungibleStore''(bytes: Vec (int)): $1_object_Object'$1_fungible_asset_FungibleStore';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_FungibleStore''(bytes);
$IsValid'$1_object_Object'$1_fungible_asset_FungibleStore''($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_Metadata''(bytes: Vec (int)): $1_object_Object'$1_fungible_asset_Metadata';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_Metadata''(bytes);
$IsValid'$1_object_Object'$1_fungible_asset_Metadata''($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_ObjectCore'(bytes: Vec (int)): $1_object_ObjectCore;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_ObjectCore'(bytes);
$IsValid'$1_object_ObjectCore'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_TransferRef'(bytes: Vec (int)): $1_object_TransferRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_TransferRef'(bytes);
$IsValid'$1_object_TransferRef'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_Untransferable'(bytes: Vec (int)): $1_object_Untransferable;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_Untransferable'(bytes);
$IsValid'$1_object_Untransferable'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u64''(bytes: Vec (int)): $1_aggregator_v2_Aggregator'u64';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u64''(bytes);
$IsValid'$1_aggregator_v2_Aggregator'u64''($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u128''(bytes: Vec (int)): $1_aggregator_v2_Aggregator'u128';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u128''(bytes);
$IsValid'$1_aggregator_v2_Aggregator'u128''($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_TransferRef'(bytes: Vec (int)): $1_fungible_asset_TransferRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_TransferRef'(bytes);
$IsValid'$1_fungible_asset_TransferRef'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_Untransferable'(bytes: Vec (int)): $1_fungible_asset_Untransferable;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_Untransferable'(bytes);
$IsValid'$1_fungible_asset_Untransferable'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_BurnRef'(bytes: Vec (int)): $1_fungible_asset_BurnRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_BurnRef'(bytes);
$IsValid'$1_fungible_asset_BurnRef'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_ConcurrentFungibleBalance'(bytes: Vec (int)): $1_fungible_asset_ConcurrentFungibleBalance;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_ConcurrentFungibleBalance'(bytes);
$IsValid'$1_fungible_asset_ConcurrentFungibleBalance'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_ConcurrentSupply'(bytes: Vec (int)): $1_fungible_asset_ConcurrentSupply;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_ConcurrentSupply'(bytes);
$IsValid'$1_fungible_asset_ConcurrentSupply'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_Deposit'(bytes: Vec (int)): $1_fungible_asset_Deposit;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_Deposit'(bytes);
$IsValid'$1_fungible_asset_Deposit'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_Frozen'(bytes: Vec (int)): $1_fungible_asset_Frozen;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_Frozen'(bytes);
$IsValid'$1_fungible_asset_Frozen'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_FungibleAsset'(bytes: Vec (int)): $1_fungible_asset_FungibleAsset;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_FungibleAsset'(bytes);
$IsValid'$1_fungible_asset_FungibleAsset'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_FungibleStore'(bytes: Vec (int)): $1_fungible_asset_FungibleStore;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_FungibleStore'(bytes);
$IsValid'$1_fungible_asset_FungibleStore'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_Metadata'(bytes: Vec (int)): $1_fungible_asset_Metadata;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_Metadata'(bytes);
$IsValid'$1_fungible_asset_Metadata'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_MintRef'(bytes: Vec (int)): $1_fungible_asset_MintRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_MintRef'(bytes);
$IsValid'$1_fungible_asset_MintRef'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_Supply'(bytes: Vec (int)): $1_fungible_asset_Supply;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_Supply'(bytes);
$IsValid'$1_fungible_asset_Supply'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_Withdraw'(bytes: Vec (int)): $1_fungible_asset_Withdraw;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_Withdraw'(bytes);
$IsValid'$1_fungible_asset_Withdraw'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_primary_fungible_store_DeriveRefPod'(bytes: Vec (int)): $1_primary_fungible_store_DeriveRefPod;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_primary_fungible_store_DeriveRefPod'(bytes);
$IsValid'$1_primary_fungible_store_DeriveRefPod'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_reconfiguration_Configuration'(bytes: Vec (int)): $1_reconfiguration_Configuration;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_reconfiguration_Configuration'(bytes);
$IsValid'$1_reconfiguration_Configuration'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'(bytes: Vec (int)): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'(bytes);
$IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'(bytes: Vec (int)): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'(bytes);
$IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability'(bytes: Vec (int)): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability'(bytes);
$IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability'(bytes: Vec (int)): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability'(bytes);
$IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability'(bytes: Vec (int)): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability'(bytes);
$IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability'(bytes: Vec (int)): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability'(bytes);
$IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'(bytes: Vec (int)): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'(bytes);
$IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'(bytes: Vec (int)): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'(bytes);
$IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability'(bytes: Vec (int)): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability'(bytes);
$IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability'(bytes: Vec (int)): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability'(bytes);
$IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'#0'(bytes: Vec (int)): #0;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'#0'(bytes);
$IsValid'#0'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'bool'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'bool'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u8'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u8'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u64'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u64'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u128'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u128'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u256'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u256'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'address'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'address'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'signer'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'signer'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'u8''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'u8''(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'u64''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'u64''(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'u128''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'u128''(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'address''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'address''(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'#0''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'#0''(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'u64''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'u64''(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'u128''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'u128''(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_string_String'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_string_String'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_features_Features'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_features_Features'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_permissioned_signer_GrantedPermissionHandles'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_permissioned_signer_GrantedPermissionHandles'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_guid_GUID'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_guid_GUID'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_guid_ID'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_guid_ID'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_object_TransferEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_object_TransferEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_ConstructorRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_ConstructorRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_DeriveRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_DeriveRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_FungibleStore''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_FungibleStore''(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_Metadata''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_Metadata''(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_ObjectCore'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_ObjectCore'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_TransferRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_TransferRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_Untransferable'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_Untransferable'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u64''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u64''(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u128''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u128''(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_TransferRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_TransferRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_Untransferable'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_Untransferable'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_BurnRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_BurnRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_ConcurrentFungibleBalance'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_ConcurrentFungibleBalance'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_ConcurrentSupply'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_ConcurrentSupply'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_Deposit'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_Deposit'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_Frozen'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_Frozen'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_FungibleAsset'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_FungibleAsset'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_FungibleStore'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_FungibleStore'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_Metadata'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_Metadata'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_MintRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_MintRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_Supply'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_Supply'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_Withdraw'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_Withdraw'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_primary_fungible_store_DeriveRefPod'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_primary_fungible_store_DeriveRefPod'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_reconfiguration_Configuration'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_reconfiguration_Configuration'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'#0'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'#0'(bytes);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\chain_status.move:35:5+90
function {:inline} $1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory: $Memory $1_chain_status_GenesisEndMarker): bool {
    $ResourceExists($1_chain_status_GenesisEndMarker_$memory, 1)
}

// struct chain_status::GenesisEndMarker at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\chain_status.move:12:5+34
datatype $1_chain_status_GenesisEndMarker {
    $1_chain_status_GenesisEndMarker($dummy_field: bool)
}
function {:inline} $Update'$1_chain_status_GenesisEndMarker'_dummy_field(s: $1_chain_status_GenesisEndMarker, x: bool): $1_chain_status_GenesisEndMarker {
    $1_chain_status_GenesisEndMarker(x)
}
function $IsValid'$1_chain_status_GenesisEndMarker'(s: $1_chain_status_GenesisEndMarker): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_chain_status_GenesisEndMarker'(s1: $1_chain_status_GenesisEndMarker, s2: $1_chain_status_GenesisEndMarker): bool {
    s1 == s2
}
var $1_chain_status_GenesisEndMarker_$memory: $Memory $1_chain_status_GenesisEndMarker;

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.spec.move:57:10+111
function {:inline} $1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory: $Memory $1_timestamp_CurrentTimeMicroseconds): int {
    $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, 1)->$microseconds
}

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:61:5+153
function {:inline} $1_timestamp_$now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory: $Memory $1_timestamp_CurrentTimeMicroseconds): int {
    $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, 1)->$microseconds
}

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:67:5+123
function {:inline} $1_timestamp_$now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory: $Memory $1_timestamp_CurrentTimeMicroseconds): int {
    ($1_timestamp_$now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) div 1000000)
}

// struct timestamp::CurrentTimeMicroseconds at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:12:5+73
datatype $1_timestamp_CurrentTimeMicroseconds {
    $1_timestamp_CurrentTimeMicroseconds($microseconds: int)
}
function {:inline} $Update'$1_timestamp_CurrentTimeMicroseconds'_microseconds(s: $1_timestamp_CurrentTimeMicroseconds, x: int): $1_timestamp_CurrentTimeMicroseconds {
    $1_timestamp_CurrentTimeMicroseconds(x)
}
function $IsValid'$1_timestamp_CurrentTimeMicroseconds'(s: $1_timestamp_CurrentTimeMicroseconds): bool {
    $IsValid'u64'(s->$microseconds)
}
function {:inline} $IsEqual'$1_timestamp_CurrentTimeMicroseconds'(s1: $1_timestamp_CurrentTimeMicroseconds, s2: $1_timestamp_CurrentTimeMicroseconds): bool {
    s1 == s2
}
var $1_timestamp_CurrentTimeMicroseconds_$memory: $Memory $1_timestamp_CurrentTimeMicroseconds;

// fun timestamp::now_microseconds [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:61:5+153
procedure {:inline 1} $1_timestamp_now_microseconds() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: $1_timestamp_CurrentTimeMicroseconds;
    var $t2: int;
    var $t3: int;
    var $temp_0'u64': int;

    // bytecode translation starts here
    // $t0 := 0x1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:62:48+16
    assume {:print "$at(213,2511,2527)"} true;
    $t0 := 1;
    assume $IsValid'address'($t0);

    // $t1 := get_global<0x1::timestamp::CurrentTimeMicroseconds>($t0) on_abort goto L2 with $t2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:62:9+56
    if (!$ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t1 := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(213,2472,2528)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(22,0):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<0x1::timestamp::CurrentTimeMicroseconds>.microseconds($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:62:9+69
    $t3 := $t1->$microseconds;

    // trace_return[0]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:62:9+69
    assume {:print "$track_return(22,0,0):", $t3} $t3 == $t3;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:63:5+1
    assume {:print "$at(213,2546,2547)"} true;
L1:

    // return $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:63:5+1
    assume {:print "$at(213,2546,2547)"} true;
    $ret0 := $t3;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:63:5+1
L2:

    // abort($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:63:5+1
    assume {:print "$at(213,2546,2547)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun timestamp::now_seconds [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:67:5+123
procedure {:inline 1} $1_timestamp_now_seconds() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'u64': int;

    // bytecode translation starts here
    // $t0 := timestamp::now_microseconds() on_abort goto L2 with $t1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:68:9+18
    assume {:print "$at(213,2680,2698)"} true;
    call $t0 := $1_timestamp_now_microseconds();
    if ($abort_flag) {
        assume {:print "$at(213,2680,2698)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(22,1):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := 1000000 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:68:30+23
    $t2 := 1000000;
    assume $IsValid'u64'($t2);

    // $t3 := /($t0, $t2) on_abort goto L2 with $t1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:68:9+44
    call $t3 := $Div($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(213,2680,2724)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(22,1):", $t1} $t1 == $t1;
        goto L2;
    }

    // trace_return[0]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:68:9+44
    assume {:print "$track_return(22,1,0):", $t3} $t3 == $t3;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:69:5+1
    assume {:print "$at(213,2729,2730)"} true;
L1:

    // return $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:69:5+1
    assume {:print "$at(213,2729,2730)"} true;
    $ret0 := $t3;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:69:5+1
L2:

    // abort($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.move:69:5+1
    assume {:print "$at(213,2729,2730)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\create_signer.spec.move:47:10+46
function  $1_create_signer_spec_create_signer(addr: int): $signer;
axiom (forall addr: int ::
(var $$res := $1_create_signer_spec_create_signer(addr);
$IsValid'signer'($$res)));

// struct permissioned_signer::GrantedPermissionHandles at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\permissioned_signer.move:64:5+188
datatype $1_permissioned_signer_GrantedPermissionHandles {
    $1_permissioned_signer_GrantedPermissionHandles($active_handles: Vec (int))
}
function {:inline} $Update'$1_permissioned_signer_GrantedPermissionHandles'_active_handles(s: $1_permissioned_signer_GrantedPermissionHandles, x: Vec (int)): $1_permissioned_signer_GrantedPermissionHandles {
    $1_permissioned_signer_GrantedPermissionHandles(x)
}
function $IsValid'$1_permissioned_signer_GrantedPermissionHandles'(s: $1_permissioned_signer_GrantedPermissionHandles): bool {
    $IsValid'vec'address''(s->$active_handles)
}
function {:inline} $IsEqual'$1_permissioned_signer_GrantedPermissionHandles'(s1: $1_permissioned_signer_GrantedPermissionHandles, s2: $1_permissioned_signer_GrantedPermissionHandles): bool {
    $IsEqual'vec'address''(s1->$active_handles, s2->$active_handles)}
var $1_permissioned_signer_GrantedPermissionHandles_$memory: $Memory $1_permissioned_signer_GrantedPermissionHandles;

// struct guid::GUID at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\guid.move:7:5+50
datatype $1_guid_GUID {
    $1_guid_GUID($id: $1_guid_ID)
}
function {:inline} $Update'$1_guid_GUID'_id(s: $1_guid_GUID, x: $1_guid_ID): $1_guid_GUID {
    $1_guid_GUID(x)
}
function $IsValid'$1_guid_GUID'(s: $1_guid_GUID): bool {
    $IsValid'$1_guid_ID'(s->$id)
}
function {:inline} $IsEqual'$1_guid_GUID'(s1: $1_guid_GUID, s2: $1_guid_GUID): bool {
    s1 == s2
}

// struct guid::ID at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\guid.move:12:5+209
datatype $1_guid_ID {
    $1_guid_ID($creation_num: int, $addr: int)
}
function {:inline} $Update'$1_guid_ID'_creation_num(s: $1_guid_ID, x: int): $1_guid_ID {
    $1_guid_ID(x, s->$addr)
}
function {:inline} $Update'$1_guid_ID'_addr(s: $1_guid_ID, x: int): $1_guid_ID {
    $1_guid_ID(s->$creation_num, x)
}
function $IsValid'$1_guid_ID'(s: $1_guid_ID): bool {
    $IsValid'u64'(s->$creation_num)
      && $IsValid'address'(s->$addr)
}
function {:inline} $IsEqual'$1_guid_ID'(s1: $1_guid_ID, s2: $1_guid_ID): bool {
    s1 == s2
}

// fun guid::create [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\guid.move:23:5+286
procedure {:inline 1} $1_guid_create(_$t0: int, _$t1: $Mutation (int)) returns ($ret0: $1_guid_GUID, $ret1: $Mutation (int))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_guid_ID;
    var $t8: $1_guid_GUID;
    var $t0: int;
    var $t1: $Mutation (int);
    var $temp_0'$1_guid_GUID': $1_guid_GUID;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[addr]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\guid.move:23:5+1
    assume {:print "$at(173,836,837)"} true;
    assume {:print "$track_local(36,0,0):", $t0} $t0 == $t0;

    // trace_local[creation_num_ref]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\guid.move:23:5+1
    $temp_0'u64' := $Dereference($t1);
    assume {:print "$track_local(36,0,1):", $temp_0'u64'} $temp_0'u64' == $temp_0'u64';

    // $t3 := read_ref($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\guid.move:24:28+17
    assume {:print "$at(173,940,957)"} true;
    $t3 := $Dereference($t1);

    // trace_local[creation_num]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\guid.move:24:28+17
    assume {:print "$track_local(36,0,2):", $t3} $t3 == $t3;

    // $t4 := 1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\guid.move:25:44+1
    assume {:print "$at(173,1002,1003)"} true;
    $t4 := 1;
    assume $IsValid'u64'($t4);

    // $t5 := +($t3, $t4) on_abort goto L2 with $t6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\guid.move:25:29+16
    call $t5 := $AddU64($t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(173,987,1003)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(36,0):", $t6} $t6 == $t6;
        goto L2;
    }

    // write_ref($t1, $t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\guid.move:25:9+36
    $t1 := $UpdateMutation($t1, $t5);

    // $t7 := pack 0x1::guid::ID($t3, $t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\guid.move:27:17+70
    assume {:print "$at(173,1036,1106)"} true;
    $t7 := $1_guid_ID($t3, $t0);

    // $t8 := pack 0x1::guid::GUID($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\guid.move:26:9+103
    assume {:print "$at(173,1013,1116)"} true;
    $t8 := $1_guid_GUID($t7);

    // trace_return[0]($t8) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\guid.move:23:80+211
    assume {:print "$at(173,911,1122)"} true;
    assume {:print "$track_return(36,0,0):", $t8} $t8 == $t8;

    // trace_local[creation_num_ref]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\guid.move:23:80+211
    $temp_0'u64' := $Dereference($t1);
    assume {:print "$track_local(36,0,1):", $temp_0'u64'} $temp_0'u64' == $temp_0'u64';

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\guid.move:32:5+1
    assume {:print "$at(173,1121,1122)"} true;
L1:

    // return $t8 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\guid.move:32:5+1
    assume {:print "$at(173,1121,1122)"} true;
    $ret0 := $t8;
    $ret1 := $t1;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\guid.move:32:5+1
L2:

    // abort($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\guid.move:32:5+1
    assume {:print "$at(173,1121,1122)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// struct event::EventHandle<0x1::object::TransferEvent> at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\event.move:37:5+224
datatype $1_event_EventHandle'$1_object_TransferEvent' {
    $1_event_EventHandle'$1_object_TransferEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_object_TransferEvent''_counter(s: $1_event_EventHandle'$1_object_TransferEvent', x: int): $1_event_EventHandle'$1_object_TransferEvent' {
    $1_event_EventHandle'$1_object_TransferEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_object_TransferEvent''_guid(s: $1_event_EventHandle'$1_object_TransferEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_object_TransferEvent' {
    $1_event_EventHandle'$1_object_TransferEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_object_TransferEvent''(s: $1_event_EventHandle'$1_object_TransferEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_object_TransferEvent''(s1: $1_event_EventHandle'$1_object_TransferEvent', s2: $1_event_EventHandle'$1_object_TransferEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<0x1::reconfiguration::NewEpochEvent> at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\event.move:37:5+224
datatype $1_event_EventHandle'$1_reconfiguration_NewEpochEvent' {
    $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''_counter(s: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent', x: int): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent' {
    $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''_guid(s: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent' {
    $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(s: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(s1: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent', s2: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'): bool {
    s1 == s2
}

// fun event::new_event_handle<0x1::object::TransferEvent> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\event.move:46:5+165
procedure {:inline 1} $1_event_new_event_handle'$1_object_TransferEvent'(_$t0: $1_guid_GUID) returns ($ret0: $1_event_EventHandle'$1_object_TransferEvent')
{
    // declare local variables
    var $t1: int;
    var $t2: $1_event_EventHandle'$1_object_TransferEvent';
    var $t0: $1_guid_GUID;
    var $temp_0'$1_event_EventHandle'$1_object_TransferEvent'': $1_event_EventHandle'$1_object_TransferEvent';
    var $temp_0'$1_guid_GUID': $1_guid_GUID;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[guid]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\event.move:46:5+1
    assume {:print "$at(163,1731,1732)"} true;
    assume {:print "$track_local(37,5,0):", $t0} $t0 == $t0;

    // $t1 := 0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\event.move:48:22+1
    assume {:print "$at(163,1860,1861)"} true;
    $t1 := 0;
    assume $IsValid'u64'($t1);

    // $t2 := pack 0x1::event::EventHandle<#0>($t1, $t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\event.move:47:9+68
    assume {:print "$at(163,1822,1890)"} true;
    $t2 := $1_event_EventHandle'$1_object_TransferEvent'($t1, $t0);

    // trace_return[0]($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\event.move:47:9+68
    assume {:print "$track_return(37,5,0):", $t2} $t2 == $t2;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\event.move:51:5+1
    assume {:print "$at(163,1895,1896)"} true;
L1:

    // return $t2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\event.move:51:5+1
    assume {:print "$at(163,1895,1896)"} true;
    $ret0 := $t2;
    return;

}

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.spec.move:60:10+50
function  $1_object_spec_exists_at'$1_fungible_asset_FungibleStore'(object: int): bool;
axiom (forall object: int ::
(var $$res := $1_object_spec_exists_at'$1_fungible_asset_FungibleStore'(object);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.spec.move:60:10+50
function  $1_object_spec_exists_at'$1_fungible_asset_Metadata'(object: int): bool;
axiom (forall object: int ::
(var $$res := $1_object_spec_exists_at'$1_fungible_asset_Metadata'(object);
$IsValid'bool'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.spec.move:567:10+75
function  $1_object_spec_create_object_address(source: int, seed: Vec (int)): int;
axiom (forall source: int, seed: Vec (int) ::
(var $$res := $1_object_spec_create_object_address(source, seed);
$IsValid'address'($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.spec.move:569:10+92
function  $1_object_spec_create_user_derived_object_address(source: int, derive_from: int): int;
axiom (forall source: int, derive_from: int ::
(var $$res := $1_object_spec_create_user_derived_object_address(source, derive_from);
$IsValid'address'($$res)));

// struct object::ConstructorRef at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:136:5+167
datatype $1_object_ConstructorRef {
    $1_object_ConstructorRef($self: int, $can_delete: bool)
}
function {:inline} $Update'$1_object_ConstructorRef'_self(s: $1_object_ConstructorRef, x: int): $1_object_ConstructorRef {
    $1_object_ConstructorRef(x, s->$can_delete)
}
function {:inline} $Update'$1_object_ConstructorRef'_can_delete(s: $1_object_ConstructorRef, x: bool): $1_object_ConstructorRef {
    $1_object_ConstructorRef(s->$self, x)
}
function $IsValid'$1_object_ConstructorRef'(s: $1_object_ConstructorRef): bool {
    $IsValid'address'(s->$self)
      && $IsValid'bool'(s->$can_delete)
}
function {:inline} $IsEqual'$1_object_ConstructorRef'(s1: $1_object_ConstructorRef, s2: $1_object_ConstructorRef): bool {
    s1 == s2
}

// struct object::DeriveRef at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:165:5+63
datatype $1_object_DeriveRef {
    $1_object_DeriveRef($self: int)
}
function {:inline} $Update'$1_object_DeriveRef'_self(s: $1_object_DeriveRef, x: int): $1_object_DeriveRef {
    $1_object_DeriveRef(x)
}
function $IsValid'$1_object_DeriveRef'(s: $1_object_DeriveRef): bool {
    $IsValid'address'(s->$self)
}
function {:inline} $IsEqual'$1_object_DeriveRef'(s1: $1_object_DeriveRef, s2: $1_object_DeriveRef): bool {
    s1 == s2
}

// struct object::Object<0x1::fungible_asset::FungibleStore> at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:131:5+78
datatype $1_object_Object'$1_fungible_asset_FungibleStore' {
    $1_object_Object'$1_fungible_asset_FungibleStore'($inner: int)
}
function {:inline} $Update'$1_object_Object'$1_fungible_asset_FungibleStore''_inner(s: $1_object_Object'$1_fungible_asset_FungibleStore', x: int): $1_object_Object'$1_fungible_asset_FungibleStore' {
    $1_object_Object'$1_fungible_asset_FungibleStore'(x)
}
function $IsValid'$1_object_Object'$1_fungible_asset_FungibleStore''(s: $1_object_Object'$1_fungible_asset_FungibleStore'): bool {
    $IsValid'address'(s->$inner)
}
function {:inline} $IsEqual'$1_object_Object'$1_fungible_asset_FungibleStore''(s1: $1_object_Object'$1_fungible_asset_FungibleStore', s2: $1_object_Object'$1_fungible_asset_FungibleStore'): bool {
    s1 == s2
}

// struct object::Object<0x1::fungible_asset::Metadata> at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:131:5+78
datatype $1_object_Object'$1_fungible_asset_Metadata' {
    $1_object_Object'$1_fungible_asset_Metadata'($inner: int)
}
function {:inline} $Update'$1_object_Object'$1_fungible_asset_Metadata''_inner(s: $1_object_Object'$1_fungible_asset_Metadata', x: int): $1_object_Object'$1_fungible_asset_Metadata' {
    $1_object_Object'$1_fungible_asset_Metadata'(x)
}
function $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s: $1_object_Object'$1_fungible_asset_Metadata'): bool {
    $IsValid'address'(s->$inner)
}
function {:inline} $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''(s1: $1_object_Object'$1_fungible_asset_Metadata', s2: $1_object_Object'$1_fungible_asset_Metadata'): bool {
    s1 == s2
}

// struct object::ObjectCore at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:100:5+551
datatype $1_object_ObjectCore {
    $1_object_ObjectCore($guid_creation_num: int, $owner: int, $allow_ungated_transfer: bool, $transfer_events: $1_event_EventHandle'$1_object_TransferEvent')
}
function {:inline} $Update'$1_object_ObjectCore'_guid_creation_num(s: $1_object_ObjectCore, x: int): $1_object_ObjectCore {
    $1_object_ObjectCore(x, s->$owner, s->$allow_ungated_transfer, s->$transfer_events)
}
function {:inline} $Update'$1_object_ObjectCore'_owner(s: $1_object_ObjectCore, x: int): $1_object_ObjectCore {
    $1_object_ObjectCore(s->$guid_creation_num, x, s->$allow_ungated_transfer, s->$transfer_events)
}
function {:inline} $Update'$1_object_ObjectCore'_allow_ungated_transfer(s: $1_object_ObjectCore, x: bool): $1_object_ObjectCore {
    $1_object_ObjectCore(s->$guid_creation_num, s->$owner, x, s->$transfer_events)
}
function {:inline} $Update'$1_object_ObjectCore'_transfer_events(s: $1_object_ObjectCore, x: $1_event_EventHandle'$1_object_TransferEvent'): $1_object_ObjectCore {
    $1_object_ObjectCore(s->$guid_creation_num, s->$owner, s->$allow_ungated_transfer, x)
}
function $IsValid'$1_object_ObjectCore'(s: $1_object_ObjectCore): bool {
    $IsValid'u64'(s->$guid_creation_num)
      && $IsValid'address'(s->$owner)
      && $IsValid'bool'(s->$allow_ungated_transfer)
      && $IsValid'$1_event_EventHandle'$1_object_TransferEvent''(s->$transfer_events)
}
function {:inline} $IsEqual'$1_object_ObjectCore'(s1: $1_object_ObjectCore, s2: $1_object_ObjectCore): bool {
    s1 == s2
}
var $1_object_ObjectCore_$memory: $Memory $1_object_ObjectCore;

// struct object::TransferEvent at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:175:5+113
datatype $1_object_TransferEvent {
    $1_object_TransferEvent($object: int, $from: int, $to: int)
}
function {:inline} $Update'$1_object_TransferEvent'_object(s: $1_object_TransferEvent, x: int): $1_object_TransferEvent {
    $1_object_TransferEvent(x, s->$from, s->$to)
}
function {:inline} $Update'$1_object_TransferEvent'_from(s: $1_object_TransferEvent, x: int): $1_object_TransferEvent {
    $1_object_TransferEvent(s->$object, x, s->$to)
}
function {:inline} $Update'$1_object_TransferEvent'_to(s: $1_object_TransferEvent, x: int): $1_object_TransferEvent {
    $1_object_TransferEvent(s->$object, s->$from, x)
}
function $IsValid'$1_object_TransferEvent'(s: $1_object_TransferEvent): bool {
    $IsValid'address'(s->$object)
      && $IsValid'address'(s->$from)
      && $IsValid'address'(s->$to)
}
function {:inline} $IsEqual'$1_object_TransferEvent'(s1: $1_object_TransferEvent, s2: $1_object_TransferEvent): bool {
    s1 == s2
}

// struct object::TransferRef at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:153:5+65
datatype $1_object_TransferRef {
    $1_object_TransferRef($self: int)
}
function {:inline} $Update'$1_object_TransferRef'_self(s: $1_object_TransferRef, x: int): $1_object_TransferRef {
    $1_object_TransferRef(x)
}
function $IsValid'$1_object_TransferRef'(s: $1_object_TransferRef): bool {
    $IsValid'address'(s->$self)
}
function {:inline} $IsEqual'$1_object_TransferRef'(s1: $1_object_TransferRef, s2: $1_object_TransferRef): bool {
    s1 == s2
}

// struct object::Untransferable at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:121:5+32
datatype $1_object_Untransferable {
    $1_object_Untransferable($dummy_field: bool)
}
function {:inline} $Update'$1_object_Untransferable'_dummy_field(s: $1_object_Untransferable, x: bool): $1_object_Untransferable {
    $1_object_Untransferable(x)
}
function $IsValid'$1_object_Untransferable'(s: $1_object_Untransferable): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_object_Untransferable'(s1: $1_object_Untransferable, s2: $1_object_Untransferable): bool {
    s1 == s2
}
var $1_object_Untransferable_$memory: $Memory $1_object_Untransferable;

// fun object::address_to_object<0x1::fungible_asset::FungibleStore> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:200:5+278
procedure {:inline 1} $1_object_address_to_object'$1_fungible_asset_FungibleStore'(_$t0: int) returns ($ret0: $1_object_Object'$1_fungible_asset_FungibleStore')
{
    // declare local variables
    var $t1: bool;
    var $t2: bool;
    var $t3: bool;
    var $t4: int;
    var $t5: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t0: int;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[object]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:200:5+1
    assume {:print "$at(184,8470,8471)"} true;
    assume {:print "$track_local(40,6,0):", $t0} $t0 == $t0;

    // $t1 := exists<0x1::object::ObjectCore>($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:201:17+26
    assume {:print "$at(184,8553,8579)"} true;
    $t1 := $ResourceExists($1_object_ObjectCore_$memory, $t0);

    // if ($t1) goto L1 else goto L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:201:9+6
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20
    assume {:print "$at(184,8640,8660)"} true;
L1:

    // $t2 := opaque begin: object::exists_at<#0>($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20
    assume {:print "$at(184,8640,8660)"} true;

    // $t3 := havoc[val]() at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20
    havoc $t3;

    // if ($t3) goto L7 else goto L6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20
    if ($t3) { goto L7; } else { goto L6; }

    // label L7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20
L7:

    // trace_abort($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20
    assume {:print "$at(184,8640,8660)"} true;
    assume {:print "$track_abort(40,6):", $t4} $t4 == $t4;

    // goto L5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20
    goto L5;

    // label L6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20
L6:

    // assume WellFormed($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20
    assume {:print "$at(184,8640,8660)"} true;
    assume $IsValid'bool'($t2);

    // assume Eq<bool>($t2, object::spec_exists_at<#0>($t0)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20
    assume $IsEqual'bool'($t2, $1_object_spec_exists_at'$1_fungible_asset_FungibleStore'($t0));

    // $t2 := opaque end: object::exists_at<#0>($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20

    // if ($t2) goto L3 else goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:9+6
    if ($t2) { goto L3; } else { goto L2; }

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:203:9+27
    assume {:print "$at(184,8715,8742)"} true;
L3:

    // $t5 := pack 0x1::object::Object<#0>($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:203:9+27
    assume {:print "$at(184,8715,8742)"} true;
    $t5 := $1_object_Object'$1_fungible_asset_FungibleStore'($t0);

    // trace_return[0]($t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:200:70+213
    assume {:print "$at(184,8535,8748)"} true;
    assume {:print "$track_return(40,6,0):", $t5} $t5 == $t5;

    // goto L4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:200:70+213
    goto L4;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:56+24
    assume {:print "$at(184,8679,8703)"} true;
L2:

    // $t6 := 7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:56+24
    assume {:print "$at(184,8679,8703)"} true;
    $t6 := 7;
    assume $IsValid'u64'($t6);

    // $t7 := error::not_found($t6) on_abort goto L5 with $t4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:39+42
    call $t7 := $1_error_not_found($t6);
    if ($abort_flag) {
        assume {:print "$at(184,8662,8704)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(40,6):", $t4} $t4 == $t4;
        goto L5;
    }

    // trace_abort($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:9+6
    assume {:print "$at(184,8632,8638)"} true;
    assume {:print "$track_abort(40,6):", $t7} $t7 == $t7;

    // $t4 := move($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:9+6
    $t4 := $t7;

    // goto L5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:9+6
    goto L5;

    // label L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:201:62+22
    assume {:print "$at(184,8598,8620)"} true;
L0:

    // $t8 := 2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:201:62+22
    assume {:print "$at(184,8598,8620)"} true;
    $t8 := 2;
    assume $IsValid'u64'($t8);

    // $t9 := error::not_found($t8) on_abort goto L5 with $t4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:201:45+40
    call $t9 := $1_error_not_found($t8);
    if ($abort_flag) {
        assume {:print "$at(184,8581,8621)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(40,6):", $t4} $t4 == $t4;
        goto L5;
    }

    // trace_abort($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:201:9+6
    assume {:print "$at(184,8545,8551)"} true;
    assume {:print "$track_abort(40,6):", $t9} $t9 == $t9;

    // $t4 := move($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:201:9+6
    $t4 := $t9;

    // goto L5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:201:9+6
    goto L5;

    // label L4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:204:5+1
    assume {:print "$at(184,8747,8748)"} true;
L4:

    // return $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:204:5+1
    assume {:print "$at(184,8747,8748)"} true;
    $ret0 := $t5;
    return;

    // label L5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:204:5+1
L5:

    // abort($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:204:5+1
    assume {:print "$at(184,8747,8748)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun object::address_to_object<0x1::fungible_asset::Metadata> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:200:5+278
procedure {:inline 1} $1_object_address_to_object'$1_fungible_asset_Metadata'(_$t0: int) returns ($ret0: $1_object_Object'$1_fungible_asset_Metadata')
{
    // declare local variables
    var $t1: bool;
    var $t2: bool;
    var $t3: bool;
    var $t4: int;
    var $t5: $1_object_Object'$1_fungible_asset_Metadata';
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t0: int;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[object]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:200:5+1
    assume {:print "$at(184,8470,8471)"} true;
    assume {:print "$track_local(40,6,0):", $t0} $t0 == $t0;

    // $t1 := exists<0x1::object::ObjectCore>($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:201:17+26
    assume {:print "$at(184,8553,8579)"} true;
    $t1 := $ResourceExists($1_object_ObjectCore_$memory, $t0);

    // if ($t1) goto L1 else goto L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:201:9+6
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20
    assume {:print "$at(184,8640,8660)"} true;
L1:

    // $t2 := opaque begin: object::exists_at<#0>($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20
    assume {:print "$at(184,8640,8660)"} true;

    // $t3 := havoc[val]() at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20
    havoc $t3;

    // if ($t3) goto L7 else goto L6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20
    if ($t3) { goto L7; } else { goto L6; }

    // label L7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20
L7:

    // trace_abort($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20
    assume {:print "$at(184,8640,8660)"} true;
    assume {:print "$track_abort(40,6):", $t4} $t4 == $t4;

    // goto L5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20
    goto L5;

    // label L6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20
L6:

    // assume WellFormed($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20
    assume {:print "$at(184,8640,8660)"} true;
    assume $IsValid'bool'($t2);

    // assume Eq<bool>($t2, object::spec_exists_at<#0>($t0)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20
    assume $IsEqual'bool'($t2, $1_object_spec_exists_at'$1_fungible_asset_Metadata'($t0));

    // $t2 := opaque end: object::exists_at<#0>($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:17+20

    // if ($t2) goto L3 else goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:9+6
    if ($t2) { goto L3; } else { goto L2; }

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:203:9+27
    assume {:print "$at(184,8715,8742)"} true;
L3:

    // $t5 := pack 0x1::object::Object<#0>($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:203:9+27
    assume {:print "$at(184,8715,8742)"} true;
    $t5 := $1_object_Object'$1_fungible_asset_Metadata'($t0);

    // trace_return[0]($t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:200:70+213
    assume {:print "$at(184,8535,8748)"} true;
    assume {:print "$track_return(40,6,0):", $t5} $t5 == $t5;

    // goto L4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:200:70+213
    goto L4;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:56+24
    assume {:print "$at(184,8679,8703)"} true;
L2:

    // $t6 := 7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:56+24
    assume {:print "$at(184,8679,8703)"} true;
    $t6 := 7;
    assume $IsValid'u64'($t6);

    // $t7 := error::not_found($t6) on_abort goto L5 with $t4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:39+42
    call $t7 := $1_error_not_found($t6);
    if ($abort_flag) {
        assume {:print "$at(184,8662,8704)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(40,6):", $t4} $t4 == $t4;
        goto L5;
    }

    // trace_abort($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:9+6
    assume {:print "$at(184,8632,8638)"} true;
    assume {:print "$track_abort(40,6):", $t7} $t7 == $t7;

    // $t4 := move($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:9+6
    $t4 := $t7;

    // goto L5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:202:9+6
    goto L5;

    // label L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:201:62+22
    assume {:print "$at(184,8598,8620)"} true;
L0:

    // $t8 := 2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:201:62+22
    assume {:print "$at(184,8598,8620)"} true;
    $t8 := 2;
    assume $IsValid'u64'($t8);

    // $t9 := error::not_found($t8) on_abort goto L5 with $t4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:201:45+40
    call $t9 := $1_error_not_found($t8);
    if ($abort_flag) {
        assume {:print "$at(184,8581,8621)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(40,6):", $t4} $t4 == $t4;
        goto L5;
    }

    // trace_abort($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:201:9+6
    assume {:print "$at(184,8545,8551)"} true;
    assume {:print "$track_abort(40,6):", $t9} $t9 == $t9;

    // $t4 := move($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:201:9+6
    $t4 := $t9;

    // goto L5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:201:9+6
    goto L5;

    // label L4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:204:5+1
    assume {:print "$at(184,8747,8748)"} true;
L4:

    // return $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:204:5+1
    assume {:print "$at(184,8747,8748)"} true;
    $ret0 := $t5;
    return;

    // label L5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:204:5+1
L5:

    // abort($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:204:5+1
    assume {:print "$at(184,8747,8748)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun object::owner<0x1::fungible_asset::Metadata> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:680:5+262
procedure {:inline 1} $1_object_owner'$1_fungible_asset_Metadata'(_$t0: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: $1_object_ObjectCore;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[object]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:680:5+1
    assume {:print "$at(184,28596,28597)"} true;
    assume {:print "$track_local(40,8,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::object::Object<#0>>.inner($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:682:32+12
    assume {:print "$at(184,28719,28731)"} true;
    $t1 := $t0->$inner;

    // $t2 := exists<0x1::object::ObjectCore>($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:682:13+32
    $t2 := $ResourceExists($1_object_ObjectCore_$memory, $t1);

    // if ($t2) goto L1 else goto L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:681:9+6
    assume {:print "$at(184,28679,28685)"} true;
    if ($t2) { goto L1; } else { goto L0; }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:685:35+6
    assume {:print "$at(184,28833,28839)"} true;
L1:

    // $t3 := get_field<0x1::object::Object<#0>>.inner($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:685:35+12
    assume {:print "$at(184,28833,28845)"} true;
    $t3 := $t0->$inner;

    // $t4 := get_global<0x1::object::ObjectCore>($t3) on_abort goto L3 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:685:9+39
    if (!$ResourceExists($1_object_ObjectCore_$memory, $t3)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $ResourceValue($1_object_ObjectCore_$memory, $t3);
    }
    if ($abort_flag) {
        assume {:print "$at(184,28807,28846)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(40,8):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t6 := get_field<0x1::object::ObjectCore>.owner($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:685:9+45
    $t6 := $t4->$owner;

    // trace_return[0]($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:680:78+189
    assume {:print "$at(184,28669,28858)"} true;
    assume {:print "$track_return(40,8,0):", $t6} $t6 == $t6;

    // goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:680:78+189
    goto L2;

    // label L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:683:30+22
    assume {:print "$at(184,28763,28785)"} true;
L0:

    // $t7 := 2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:683:30+22
    assume {:print "$at(184,28763,28785)"} true;
    $t7 := 2;
    assume $IsValid'u64'($t7);

    // $t8 := error::not_found($t7) on_abort goto L3 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:683:13+40
    call $t8 := $1_error_not_found($t7);
    if ($abort_flag) {
        assume {:print "$at(184,28746,28786)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(40,8):", $t5} $t5 == $t5;
        goto L3;
    }

    // trace_abort($t8) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:681:9+6
    assume {:print "$at(184,28679,28685)"} true;
    assume {:print "$track_abort(40,8):", $t8} $t8 == $t8;

    // $t5 := move($t8) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:681:9+6
    $t5 := $t8;

    // goto L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:681:9+6
    goto L3;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:686:5+1
    assume {:print "$at(184,28857,28858)"} true;
L2:

    // return $t6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:686:5+1
    assume {:print "$at(184,28857,28858)"} true;
    $ret0 := $t6;
    return;

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:686:5+1
L3:

    // abort($t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:686:5+1
    assume {:print "$at(184,28857,28858)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun object::can_generate_delete_ref [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:390:5+93
procedure {:inline 1} $1_object_can_generate_delete_ref(_$t0: $1_object_ConstructorRef) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:390:5+1
    assume {:print "$at(184,17126,17127)"} true;
    assume {:print "$track_local(40,9,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::object::ConstructorRef>.can_delete($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:391:9+14
    assume {:print "$at(184,17199,17213)"} true;
    $t1 := $t0->$can_delete;

    // trace_return[0]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:391:9+14
    assume {:print "$track_return(40,9,0):", $t1} $t1 == $t1;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:392:5+1
    assume {:print "$at(184,17218,17219)"} true;
L1:

    // return $t1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:392:5+1
    assume {:print "$at(184,17218,17219)"} true;
    $ret0 := $t1;
    return;

}

// fun object::convert<0x1::fungible_asset::Metadata, 0x1::fungible_asset::Metadata> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:254:5+115
procedure {:inline 1} $1_object_convert'$1_fungible_asset_Metadata_$1_fungible_asset_Metadata'(_$t0: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: $1_object_Object'$1_fungible_asset_Metadata')
{
    // declare local variables
    var $t1: int;
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: int;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[object]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:254:5+1
    assume {:print "$at(184,10859,10860)"} true;
    assume {:print "$track_local(40,10,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::object::Object<#0>>.inner($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:255:30+12
    assume {:print "$at(184,10955,10967)"} true;
    $t1 := $t0->$inner;

    // $t2 := object::address_to_object<#1>($t1) on_abort goto L2 with $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:255:9+34
    call $t2 := $1_object_address_to_object'$1_fungible_asset_Metadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(184,10934,10968)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(40,10):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:255:9+34
    assume {:print "$track_return(40,10,0):", $t2} $t2 == $t2;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:256:5+1
    assume {:print "$at(184,10973,10974)"} true;
L1:

    // return $t2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:256:5+1
    assume {:print "$at(184,10973,10974)"} true;
    $ret0 := $t2;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:256:5+1
L2:

    // abort($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:256:5+1
    assume {:print "$at(184,10973,10974)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun object::create_named_object [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:260:5+284
procedure {:inline 1} $1_object_create_named_object(_$t0: $signer, _$t1: Vec (int)) returns ($ret0: $1_object_ConstructorRef)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: bool;
    var $t11: $1_object_ConstructorRef;
    var $t0: $signer;
    var $t1: Vec (int);
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t4, signer::$address_of($t0)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.spec.move:162:9+50
    assume {:print "$at(185,6936,6986)"} true;
    assume ($t4 == $1_signer_$address_of($t0));

    // assume Identical($t5, object::spec_create_object_address($t4, $t1)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.spec.move:163:9+65
    assume {:print "$at(185,6995,7060)"} true;
    assume ($t5 == $1_object_spec_create_object_address($t4, $t1));

    // trace_local[creator]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:260:5+1
    assume {:print "$at(184,11180,11181)"} true;
    assume {:print "$track_local(40,12,0):", $t0} $t0 == $t0;

    // trace_local[seed]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:260:5+1
    assume {:print "$track_local(40,12,1):", $t1} $t1 == $t1;

    // $t6 := signer::address_of($t0) on_abort goto L2 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:261:31+27
    assume {:print "$at(184,11295,11322)"} true;
    call $t6 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(184,11295,11322)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(40,12):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[creator_address]($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:261:31+27
    assume {:print "$track_local(40,12,2):", $t6} $t6 == $t6;

    // $t8 := opaque begin: object::create_object_address($t6, $t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:262:24+45
    assume {:print "$at(184,11347,11392)"} true;

    // $t9 := havoc[val]() at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:262:24+45
    havoc $t9;

    // if ($t9) goto L4 else goto L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:262:24+45
    if ($t9) { goto L4; } else { goto L3; }

    // label L4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:262:24+45
L4:

    // trace_abort($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:262:24+45
    assume {:print "$at(184,11347,11392)"} true;
    assume {:print "$track_abort(40,12):", $t7} $t7 == $t7;

    // goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:262:24+45
    goto L2;

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:262:24+45
L3:

    // assume WellFormed($t8) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:262:24+45
    assume {:print "$at(184,11347,11392)"} true;
    assume $IsValid'address'($t8);

    // assume Eq<address>($t8, object::spec_create_object_address($t6, $t1)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:262:24+45
    assume $IsEqual'address'($t8, $1_object_spec_create_object_address($t6, $t1));

    // $t8 := opaque end: object::create_object_address($t6, $t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:262:24+45

    // trace_local[obj_addr]($t8) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:262:24+45
    assume {:print "$track_local(40,12,3):", $t8} $t8 == $t8;

    // $t10 := false at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:263:59+5
    assume {:print "$at(184,11452,11457)"} true;
    $t10 := false;
    assume $IsValid'bool'($t10);

    // $t11 := object::create_object_internal($t6, $t8, $t10) on_abort goto L2 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:263:9+56
    call $t11 := $1_object_create_object_internal($t6, $t8, $t10);
    if ($abort_flag) {
        assume {:print "$at(184,11402,11458)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(40,12):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_return[0]($t11) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:263:9+56
    assume {:print "$track_return(40,12,0):", $t11} $t11 == $t11;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:264:5+1
    assume {:print "$at(184,11463,11464)"} true;
L1:

    // return $t11 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:264:5+1
    assume {:print "$at(184,11463,11464)"} true;
    $ret0 := $t11;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:264:5+1
L2:

    // abort($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:264:5+1
    assume {:print "$at(184,11463,11464)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun object::create_object_internal [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:327:5+766
procedure {:inline 1} $1_object_create_object_internal(_$t0: int, _$t1: int, _$t2: bool) returns ($ret0: $1_object_ConstructorRef)
{
    // declare local variables
    var $t3: $signer;
    var $t4: int;
    var $t5: $1_guid_GUID;
    var $t6: bool;
    var $t7: $signer;
    var $t8: int;
    var $t9: $Mutation (int);
    var $t10: $1_guid_GUID;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: $1_event_EventHandle'$1_object_TransferEvent';
    var $t15: $1_object_ObjectCore;
    var $t16: $1_object_ConstructorRef;
    var $t17: int;
    var $t18: int;
    var $t0: int;
    var $t1: int;
    var $t2: bool;
    var $temp_0'$1_guid_GUID': $1_guid_GUID;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[creator_address]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:327:5+1
    assume {:print "$at(184,14718,14719)"} true;
    assume {:print "$track_local(40,18,0):", $t0} $t0 == $t0;

    // trace_local[object]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:327:5+1
    assume {:print "$track_local(40,18,1):", $t1} $t1 == $t1;

    // trace_local[can_delete]($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:327:5+1
    assume {:print "$track_local(40,18,2):", $t2} $t2 == $t2;

    // $t6 := exists<0x1::object::ObjectCore>($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:332:18+26
    assume {:print "$at(184,14872,14898)"} true;
    $t6 := $ResourceExists($1_object_ObjectCore_$memory, $t1);

    // if ($t6) goto L0 else goto L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:332:17+27
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:334:29+21
    assume {:print "$at(184,14969,14990)"} true;
L1:

    // $t7 := opaque begin: create_signer::create_signer($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:334:29+21
    assume {:print "$at(184,14969,14990)"} true;

    // assume WellFormed($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:334:29+21
    assume $IsValid'signer'($t7) && $1_signer_is_txn_signer($t7) && $1_signer_is_txn_signer_addr($t7->$addr);

    // assume Eq<address>(signer::$address_of($t7), $t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:334:29+21
    assume $IsEqual'address'($1_signer_$address_of($t7), $t1);

    // assume Eq<signer>($t7, create_signer::spec_create_signer($t1)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:334:29+21
    assume $IsEqual'signer'($t7, $1_create_signer_spec_create_signer($t1));

    // $t7 := opaque end: create_signer::create_signer($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:334:29+21

    // trace_local[object_signer]($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:334:29+21
    assume {:print "$track_local(40,18,3):", $t7} $t7 == $t7;

    // $t8 := 1125899906842624 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:335:33+22
    assume {:print "$at(184,15024,15046)"} true;
    $t8 := 1125899906842624;
    assume $IsValid'u64'($t8);

    // $t4 := $t8 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:335:33+22
    $t4 := $t8;

    // trace_local[guid_creation_num]($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:335:33+22
    assume {:print "$track_local(40,18,4):", $t4} $t4 == $t4;

    // $t9 := borrow_local($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:336:57+22
    assume {:print "$at(184,15104,15126)"} true;
    $t9 := $Mutation($Local(4), EmptyVec(), $t4);

    // $t10 := guid::create($t1, $t9) on_abort goto L3 with $t11 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:336:36+44
    call $t10,$t9 := $1_guid_create($t1, $t9);
    if ($abort_flag) {
        assume {:print "$at(184,15083,15127)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(40,18):", $t11} $t11 == $t11;
        goto L3;
    }

    // write_back[LocalRoot($t4)@]($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:336:36+44
    $t4 := $Dereference($t9);

    // trace_local[guid_creation_num]($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:336:36+44
    assume {:print "$track_local(40,18,4):", $t4} $t4 == $t4;

    // trace_local[transfer_events_guid]($t10) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:336:36+44
    assume {:print "$track_local(40,18,5):", $t10} $t10 == $t10;

    // $t12 := move($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:341:17+17
    assume {:print "$at(184,15216,15233)"} true;
    $t12 := $t4;

    // $t13 := true at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:343:41+4
    assume {:print "$at(184,15315,15319)"} true;
    $t13 := true;
    assume $IsValid'bool'($t13);

    // $t14 := event::new_event_handle<0x1::object::TransferEvent>($t10) on_abort goto L3 with $t11 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:344:34+45
    assume {:print "$at(184,15354,15399)"} true;
    call $t14 := $1_event_new_event_handle'$1_object_TransferEvent'($t10);
    if ($abort_flag) {
        assume {:print "$at(184,15354,15399)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(40,18):", $t11} $t11 == $t11;
        goto L3;
    }

    // $t15 := pack 0x1::object::ObjectCore($t12, $t0, $t13, $t14) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:340:13+227
    assume {:print "$at(184,15187,15414)"} true;
    $t15 := $1_object_ObjectCore($t12, $t0, $t13, $t14);

    // move_to<0x1::object::ObjectCore>($t15, $t7) on_abort goto L3 with $t11 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:338:9+287
    assume {:print "$at(184,15138,15425)"} true;
    if ($ResourceExists($1_object_ObjectCore_$memory, $t7->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_object_ObjectCore_$memory := $ResourceUpdate($1_object_ObjectCore_$memory, $t7->$addr, $t15);
    }
    if ($abort_flag) {
        assume {:print "$at(184,15138,15425)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(40,18):", $t11} $t11 == $t11;
        goto L3;
    }

    // $t16 := pack 0x1::object::ConstructorRef($t1, $t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:347:9+43
    assume {:print "$at(184,15435,15478)"} true;
    $t16 := $1_object_ConstructorRef($t1, $t2);

    // trace_return[0]($t16) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:331:23+631
    assume {:print "$at(184,14853,15484)"} true;
    assume {:print "$track_return(40,18,0):", $t16} $t16 == $t16;

    // goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:331:23+631
    goto L2;

    // label L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:332:68+14
    assume {:print "$at(184,14922,14936)"} true;
L0:

    // $t17 := 1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:332:68+14
    assume {:print "$at(184,14922,14936)"} true;
    $t17 := 1;
    assume $IsValid'u64'($t17);

    // $t18 := error::already_exists($t17) on_abort goto L3 with $t11 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:332:46+37
    call $t18 := $1_error_already_exists($t17);
    if ($abort_flag) {
        assume {:print "$at(184,14900,14937)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(40,18):", $t11} $t11 == $t11;
        goto L3;
    }

    // trace_abort($t18) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:332:9+6
    assume {:print "$at(184,14863,14869)"} true;
    assume {:print "$track_abort(40,18):", $t18} $t18 == $t18;

    // $t11 := move($t18) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:332:9+6
    $t11 := $t18;

    // goto L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:332:9+6
    goto L3;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:348:5+1
    assume {:print "$at(184,15483,15484)"} true;
L2:

    // return $t16 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:348:5+1
    assume {:print "$at(184,15483,15484)"} true;
    $ret0 := $t16;
    return;

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:348:5+1
L3:

    // abort($t11) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:348:5+1
    assume {:print "$at(184,15483,15484)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun object::object_address<0x1::fungible_asset::FungibleStore> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:249:5+91
procedure {:inline 1} $1_object_object_address'$1_fungible_asset_FungibleStore'(_$t0: $1_object_Object'$1_fungible_asset_FungibleStore') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[object]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:249:5+1
    assume {:print "$at(184,10722,10723)"} true;
    assume {:print "$track_local(40,21,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::object::Object<#0>>.inner($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:250:9+12
    assume {:print "$at(184,10795,10807)"} true;
    $t1 := $t0->$inner;

    // trace_return[0]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:250:9+12
    assume {:print "$track_return(40,21,0):", $t1} $t1 == $t1;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:251:5+1
    assume {:print "$at(184,10812,10813)"} true;
L1:

    // return $t1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:251:5+1
    assume {:print "$at(184,10812,10813)"} true;
    $ret0 := $t1;
    return;

}

// fun object::object_address<0x1::fungible_asset::Metadata> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:249:5+91
procedure {:inline 1} $1_object_object_address'$1_fungible_asset_Metadata'(_$t0: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[object]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:249:5+1
    assume {:print "$at(184,10722,10723)"} true;
    assume {:print "$track_local(40,21,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::object::Object<#0>>.inner($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:250:9+12
    assume {:print "$at(184,10795,10807)"} true;
    $t1 := $t0->$inner;

    // trace_return[0]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:250:9+12
    assume {:print "$track_return(40,21,0):", $t1} $t1 == $t1;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:251:5+1
    assume {:print "$at(184,10812,10813)"} true;
L1:

    // return $t1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:251:5+1
    assume {:print "$at(184,10812,10813)"} true;
    $ret0 := $t1;
    return;

}

// fun object::create_user_derived_object [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:268:5+277
procedure {:inline 1} $1_object_create_user_derived_object(_$t0: int, _$t1: $1_object_DeriveRef) returns ($ret0: $1_object_ConstructorRef)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: $1_object_ConstructorRef;
    var $t0: int;
    var $t1: $1_object_DeriveRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_DeriveRef': $1_object_DeriveRef;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t3, object::spec_create_user_derived_object_address($t0, select object::DeriveRef.self<0x1::object::DeriveRef>($t1))) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.spec.move:185:9+89
    assume {:print "$at(185,7868,7957)"} true;
    assume ($t3 == $1_object_spec_create_user_derived_object_address($t0, $t1->$self));

    // trace_local[creator_address]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:268:5+1
    assume {:print "$at(184,11650,11651)"} true;
    assume {:print "$track_local(40,22,0):", $t0} $t0 == $t0;

    // trace_local[derive_ref]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:268:5+1
    assume {:print "$track_local(40,22,1):", $t1} $t1 == $t1;

    // $t4 := get_field<0x1::object::DeriveRef>.self($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:269:76+15
    assume {:print "$at(184,11839,11854)"} true;
    $t4 := $t1->$self;

    // $t5 := opaque begin: object::create_user_derived_object_address($t0, $t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:269:24+68

    // $t6 := havoc[val]() at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:269:24+68
    havoc $t6;

    // if ($t6) goto L4 else goto L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:269:24+68
    if ($t6) { goto L4; } else { goto L3; }

    // label L4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:269:24+68
L4:

    // trace_abort($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:269:24+68
    assume {:print "$at(184,11787,11855)"} true;
    assume {:print "$track_abort(40,22):", $t7} $t7 == $t7;

    // goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:269:24+68
    goto L2;

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:269:24+68
L3:

    // assume WellFormed($t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:269:24+68
    assume {:print "$at(184,11787,11855)"} true;
    assume $IsValid'address'($t5);

    // assume Eq<address>($t5, object::spec_create_user_derived_object_address($t0, $t4)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:269:24+68
    assume $IsEqual'address'($t5, $1_object_spec_create_user_derived_object_address($t0, $t4));

    // $t5 := opaque end: object::create_user_derived_object_address($t0, $t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:269:24+68

    // trace_local[$t4]($t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:269:24+68
    assume {:print "$track_local(40,22,2):", $t5} $t5 == $t5;

    // $t8 := false at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:270:59+5
    assume {:print "$at(184,11915,11920)"} true;
    $t8 := false;
    assume $IsValid'bool'($t8);

    // $t9 := object::create_object_internal($t0, $t5, $t8) on_abort goto L2 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:270:9+56
    call $t9 := $1_object_create_object_internal($t0, $t5, $t8);
    if ($abort_flag) {
        assume {:print "$at(184,11865,11921)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(40,22):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_return[0]($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:270:9+56
    assume {:print "$track_return(40,22,0):", $t9} $t9 == $t9;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:271:5+1
    assume {:print "$at(184,11926,11927)"} true;
L1:

    // return $t9 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:271:5+1
    assume {:print "$at(184,11926,11927)"} true;
    $ret0 := $t9;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:271:5+1
L2:

    // abort($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:271:5+1
    assume {:print "$at(184,11926,11927)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun object::disable_ungated_transfer [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:454:5+191
procedure {:inline 1} $1_object_disable_ungated_transfer(_$t0: $1_object_TransferRef) returns ()
{
    // declare local variables
    var $t1: $Mutation ($1_object_ObjectCore);
    var $t2: int;
    var $t3: $Mutation ($1_object_ObjectCore);
    var $t4: int;
    var $t5: bool;
    var $t6: $Mutation (bool);
    var $t0: $1_object_TransferRef;
    var $temp_0'$1_object_ObjectCore': $1_object_ObjectCore;
    var $temp_0'$1_object_TransferRef': $1_object_TransferRef;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:454:5+1
    assume {:print "$at(184,19153,19154)"} true;
    assume {:print "$track_local(40,26,0):", $t0} $t0 == $t0;

    // $t2 := get_field<0x1::object::TransferRef>.self($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:455:52+8
    assume {:print "$at(184,19281,19289)"} true;
    $t2 := $t0->$self;

    // $t3 := borrow_global<0x1::object::ObjectCore>($t2) on_abort goto L2 with $t4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:455:22+39
    if (!$ResourceExists($1_object_ObjectCore_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $Mutation($Global($t2), EmptyVec(), $ResourceValue($1_object_ObjectCore_$memory, $t2));
    }
    if ($abort_flag) {
        assume {:print "$at(184,19251,19290)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(40,26):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_local[object]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:455:22+39
    $temp_0'$1_object_ObjectCore' := $Dereference($t3);
    assume {:print "$track_local(40,26,1):", $temp_0'$1_object_ObjectCore'} $temp_0'$1_object_ObjectCore' == $temp_0'$1_object_ObjectCore';

    // $t5 := false at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:456:41+5
    assume {:print "$at(184,19332,19337)"} true;
    $t5 := false;
    assume $IsValid'bool'($t5);

    // $t6 := borrow_field<0x1::object::ObjectCore>.allow_ungated_transfer($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:456:9+29
    $t6 := $ChildMutation($t3, 2, $Dereference($t3)->$allow_ungated_transfer);

    // write_ref($t6, $t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:456:9+37
    $t6 := $UpdateMutation($t6, $t5);

    // write_back[Reference($t3).allow_ungated_transfer (bool)]($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:456:9+37
    $t3 := $UpdateMutation($t3, $Update'$1_object_ObjectCore'_allow_ungated_transfer($Dereference($t3), $Dereference($t6)));

    // write_back[0x1::object::ObjectCore@]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:456:9+37
    $1_object_ObjectCore_$memory := $ResourceUpdate($1_object_ObjectCore_$memory, $GlobalLocationAddress($t3),
        $Dereference($t3));

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:457:5+1
    assume {:print "$at(184,19343,19344)"} true;
L1:

    // return () at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:457:5+1
    assume {:print "$at(184,19343,19344)"} true;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:457:5+1
L2:

    // abort($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:457:5+1
    assume {:print "$at(184,19343,19344)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun object::generate_derive_ref [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:370:5+108
procedure {:inline 1} $1_object_generate_derive_ref(_$t0: $1_object_ConstructorRef) returns ($ret0: $1_object_DeriveRef)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_object_DeriveRef;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_DeriveRef': $1_object_DeriveRef;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:370:5+1
    assume {:print "$at(184,16430,16431)"} true;
    assume {:print "$track_local(40,29,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::object::ConstructorRef>.self($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:371:27+8
    assume {:print "$at(184,16522,16530)"} true;
    $t1 := $t0->$self;

    // $t2 := pack 0x1::object::DeriveRef($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:371:9+28
    $t2 := $1_object_DeriveRef($t1);

    // trace_return[0]($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:371:9+28
    assume {:print "$track_return(40,29,0):", $t2} $t2 == $t2;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:372:5+1
    assume {:print "$at(184,16537,16538)"} true;
L1:

    // return $t2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:372:5+1
    assume {:print "$at(184,16537,16538)"} true;
    $ret0 := $t2;
    return;

}

// fun object::generate_signer [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:375:5+96
procedure {:inline 1} $1_object_generate_signer(_$t0: $1_object_ConstructorRef) returns ($ret0: $signer)
{
    // declare local variables
    var $t1: int;
    var $t2: $signer;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:375:5+1
    assume {:print "$at(184,16591,16592)"} true;
    assume {:print "$track_local(40,32,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::object::ConstructorRef>.self($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:376:23+8
    assume {:print "$at(184,16672,16680)"} true;
    $t1 := $t0->$self;

    // $t2 := opaque begin: create_signer::create_signer($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:376:9+23

    // assume WellFormed($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:376:9+23
    assume $IsValid'signer'($t2) && $1_signer_is_txn_signer($t2) && $1_signer_is_txn_signer_addr($t2->$addr);

    // assume Eq<address>(signer::$address_of($t2), $t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:376:9+23
    assume $IsEqual'address'($1_signer_$address_of($t2), $t1);

    // assume Eq<signer>($t2, create_signer::spec_create_signer($t1)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:376:9+23
    assume $IsEqual'signer'($t2, $1_create_signer_spec_create_signer($t1));

    // $t2 := opaque end: create_signer::create_signer($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:376:9+23

    // trace_return[0]($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:376:9+23
    assume {:print "$track_return(40,32,0):", $t2} $t2 == $t2;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:377:5+1
    assume {:print "$at(184,16686,16687)"} true;
L1:

    // return $t2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:377:5+1
    assume {:print "$at(184,16686,16687)"} true;
    $ret0 := $t2;
    return;

}

// fun object::generate_transfer_ref [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:364:5+219
procedure {:inline 1} $1_object_generate_transfer_ref(_$t0: $1_object_ConstructorRef) returns ($ret0: $1_object_TransferRef)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: $1_object_TransferRef;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_TransferRef': $1_object_TransferRef;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:364:5+1
    assume {:print "$at(184,16090,16091)"} true;
    assume {:print "$track_local(40,34,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::object::ConstructorRef>.self($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:365:41+8
    assume {:print "$at(184,16200,16208)"} true;
    $t1 := $t0->$self;

    // $t2 := exists<0x1::object::Untransferable>($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:365:18+32
    $t2 := $ResourceExists($1_object_Untransferable_$memory, $t1);

    // if ($t2) goto L0 else goto L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:365:17+33
    if ($t2) { goto L0; } else { goto L1; }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:366:29+8
    assume {:print "$at(184,16293,16301)"} true;
L1:

    // $t3 := get_field<0x1::object::ConstructorRef>.self($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:366:29+8
    assume {:print "$at(184,16293,16301)"} true;
    $t3 := $t0->$self;

    // $t4 := pack 0x1::object::TransferRef($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:366:9+30
    $t4 := $1_object_TransferRef($t3);

    // trace_return[0]($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:364:73+151
    assume {:print "$at(184,16158,16309)"} true;
    assume {:print "$track_return(40,34,0):", $t4} $t4 == $t4;

    // goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:364:73+151
    goto L2;

    // label L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:365:9+6
    assume {:print "$at(184,16168,16174)"} true;
L0:

    // $t5 := 9 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:365:77+25
    assume {:print "$at(184,16236,16261)"} true;
    $t5 := 9;
    assume $IsValid'u64'($t5);

    // $t6 := error::permission_denied($t5) on_abort goto L3 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:365:52+51
    call $t6 := $1_error_permission_denied($t5);
    if ($abort_flag) {
        assume {:print "$at(184,16211,16262)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(40,34):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_abort($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:365:9+6
    assume {:print "$at(184,16168,16174)"} true;
    assume {:print "$track_abort(40,34):", $t6} $t6 == $t6;

    // $t7 := move($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:365:9+6
    $t7 := $t6;

    // goto L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:365:9+6
    goto L3;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:367:5+1
    assume {:print "$at(184,16308,16309)"} true;
L2:

    // return $t4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:367:5+1
    assume {:print "$at(184,16308,16309)"} true;
    $ret0 := $t4;
    return;

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:367:5+1
L3:

    // abort($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:367:5+1
    assume {:print "$at(184,16308,16309)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun object::is_owner<0x1::fungible_asset::Metadata> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:690:5+127
procedure {:inline 1} $1_object_is_owner'$1_fungible_asset_Metadata'(_$t0: $1_object_Object'$1_fungible_asset_Metadata', _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $t1: int;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[object]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:690:5+1
    assume {:print "$at(184,28942,28943)"} true;
    assume {:print "$track_local(40,39,0):", $t0} $t0 == $t0;

    // trace_local[owner]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:690:5+1
    assume {:print "$track_local(40,39,1):", $t1} $t1 == $t1;

    // $t2 := object::owner<#0>($t0) on_abort goto L2 with $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:691:9+13
    assume {:print "$at(184,29041,29054)"} true;
    call $t2 := $1_object_owner'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(184,29041,29054)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(40,39):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := ==($t2, $t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:691:9+22
    $t4 := $IsEqual'address'($t2, $t1);

    // trace_return[0]($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:691:9+22
    assume {:print "$track_return(40,39,0):", $t4} $t4 == $t4;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:692:5+1
    assume {:print "$at(184,29068,29069)"} true;
L1:

    // return $t4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:692:5+1
    assume {:print "$at(184,29068,29069)"} true;
    $ret0 := $t4;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:692:5+1
L2:

    // abort($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:692:5+1
    assume {:print "$at(184,29068,29069)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun object::object_from_constructor_ref<0x1::fungible_asset::FungibleStore> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:385:5+126
procedure {:inline 1} $1_object_object_from_constructor_ref'$1_fungible_asset_FungibleStore'(_$t0: $1_object_ConstructorRef) returns ($ret0: $1_object_Object'$1_fungible_asset_FungibleStore')
{
    // declare local variables
    var $t1: int;
    var $t2: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t3: int;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:385:5+1
    assume {:print "$at(184,16912,16913)"} true;
    assume {:print "$track_local(40,42,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::object::ConstructorRef>.self($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:386:30+8
    assume {:print "$at(184,17023,17031)"} true;
    $t1 := $t0->$self;

    // $t2 := object::address_to_object<#0>($t1) on_abort goto L2 with $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:386:9+30
    call $t2 := $1_object_address_to_object'$1_fungible_asset_FungibleStore'($t1);
    if ($abort_flag) {
        assume {:print "$at(184,17002,17032)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(40,42):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:386:9+30
    assume {:print "$track_return(40,42,0):", $t2} $t2 == $t2;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:387:5+1
    assume {:print "$at(184,17037,17038)"} true;
L1:

    // return $t2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:387:5+1
    assume {:print "$at(184,17037,17038)"} true;
    $ret0 := $t2;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:387:5+1
L2:

    // abort($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:387:5+1
    assume {:print "$at(184,17037,17038)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun object::object_from_constructor_ref<0x1::fungible_asset::Metadata> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:385:5+126
procedure {:inline 1} $1_object_object_from_constructor_ref'$1_fungible_asset_Metadata'(_$t0: $1_object_ConstructorRef) returns ($ret0: $1_object_Object'$1_fungible_asset_Metadata')
{
    // declare local variables
    var $t1: int;
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: int;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:385:5+1
    assume {:print "$at(184,16912,16913)"} true;
    assume {:print "$track_local(40,42,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::object::ConstructorRef>.self($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:386:30+8
    assume {:print "$at(184,17023,17031)"} true;
    $t1 := $t0->$self;

    // $t2 := object::address_to_object<#0>($t1) on_abort goto L2 with $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:386:9+30
    call $t2 := $1_object_address_to_object'$1_fungible_asset_Metadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(184,17002,17032)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(40,42):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:386:9+30
    assume {:print "$track_return(40,42,0):", $t2} $t2 == $t2;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:387:5+1
    assume {:print "$at(184,17037,17038)"} true;
L1:

    // return $t2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:387:5+1
    assume {:print "$at(184,17037,17038)"} true;
    $ret0 := $t2;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:387:5+1
L2:

    // abort($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:387:5+1
    assume {:print "$at(184,17037,17038)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun object::set_untransferable [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:460:5+290
procedure {:inline 1} $1_object_set_untransferable(_$t0: $1_object_ConstructorRef) returns ()
{
    // declare local variables
    var $t1: $Mutation ($1_object_ObjectCore);
    var $t2: $signer;
    var $t3: int;
    var $t4: $Mutation ($1_object_ObjectCore);
    var $t5: int;
    var $t6: bool;
    var $t7: $Mutation (bool);
    var $t8: $signer;
    var $t9: bool;
    var $t10: $1_object_Untransferable;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_ObjectCore': $1_object_ObjectCore;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:460:5+1
    assume {:print "$at(184,19387,19388)"} true;
    assume {:print "$track_local(40,46,0):", $t0} $t0 == $t0;

    // $t3 := get_field<0x1::object::ConstructorRef>.self($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:461:52+8
    assume {:print "$at(184,19512,19520)"} true;
    $t3 := $t0->$self;

    // $t4 := borrow_global<0x1::object::ObjectCore>($t3) on_abort goto L2 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:461:22+39
    if (!$ResourceExists($1_object_ObjectCore_$memory, $t3)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $Mutation($Global($t3), EmptyVec(), $ResourceValue($1_object_ObjectCore_$memory, $t3));
    }
    if ($abort_flag) {
        assume {:print "$at(184,19482,19521)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(40,46):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[object]($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:461:22+39
    $temp_0'$1_object_ObjectCore' := $Dereference($t4);
    assume {:print "$track_local(40,46,1):", $temp_0'$1_object_ObjectCore'} $temp_0'$1_object_ObjectCore' == $temp_0'$1_object_ObjectCore';

    // $t6 := false at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:462:41+5
    assume {:print "$at(184,19563,19568)"} true;
    $t6 := false;
    assume $IsValid'bool'($t6);

    // $t7 := borrow_field<0x1::object::ObjectCore>.allow_ungated_transfer($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:462:9+29
    $t7 := $ChildMutation($t4, 2, $Dereference($t4)->$allow_ungated_transfer);

    // write_ref($t7, $t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:462:9+37
    $t7 := $UpdateMutation($t7, $t6);

    // write_back[Reference($t4).allow_ungated_transfer (bool)]($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:462:9+37
    $t4 := $UpdateMutation($t4, $Update'$1_object_ObjectCore'_allow_ungated_transfer($Dereference($t4), $Dereference($t7)));

    // write_back[0x1::object::ObjectCore@]($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:462:9+37
    $1_object_ObjectCore_$memory := $ResourceUpdate($1_object_ObjectCore_$memory, $GlobalLocationAddress($t4),
        $Dereference($t4));

    // $t8 := object::generate_signer($t0) on_abort goto L2 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:463:29+20
    assume {:print "$at(184,19598,19618)"} true;
    call $t8 := $1_object_generate_signer($t0);
    if ($abort_flag) {
        assume {:print "$at(184,19598,19618)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(40,46):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[object_signer]($t8) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:463:29+20
    assume {:print "$track_local(40,46,2):", $t8} $t8 == $t8;

    // $t9 := false at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:464:33+17
    assume {:print "$at(184,19652,19669)"} true;
    $t9 := false;
    assume $IsValid'bool'($t9);

    // $t10 := pack 0x1::object::Untransferable($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:464:33+17
    $t10 := $1_object_Untransferable($t9);

    // move_to<0x1::object::Untransferable>($t10, $t8) on_abort goto L2 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:464:9+42
    if ($ResourceExists($1_object_Untransferable_$memory, $t8->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_object_Untransferable_$memory := $ResourceUpdate($1_object_Untransferable_$memory, $t8->$addr, $t10);
    }
    if ($abort_flag) {
        assume {:print "$at(184,19628,19670)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(40,46):", $t5} $t5 == $t5;
        goto L2;
    }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:465:5+1
    assume {:print "$at(184,19676,19677)"} true;
L1:

    // return () at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:465:5+1
    assume {:print "$at(184,19676,19677)"} true;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:465:5+1
L2:

    // abort($t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.move:465:5+1
    assume {:print "$at(184,19676,19677)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// struct fungible_asset::TransferRef at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:190:5+77
datatype $1_fungible_asset_TransferRef {
    $1_fungible_asset_TransferRef($metadata: $1_object_Object'$1_fungible_asset_Metadata')
}
function {:inline} $Update'$1_fungible_asset_TransferRef'_metadata(s: $1_fungible_asset_TransferRef, x: $1_object_Object'$1_fungible_asset_Metadata'): $1_fungible_asset_TransferRef {
    $1_fungible_asset_TransferRef(x)
}
function $IsValid'$1_fungible_asset_TransferRef'(s: $1_fungible_asset_TransferRef): bool {
    $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$metadata)
}
function {:inline} $IsEqual'$1_fungible_asset_TransferRef'(s1: $1_fungible_asset_TransferRef, s2: $1_fungible_asset_TransferRef): bool {
    s1 == s2
}

// struct fungible_asset::Untransferable at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:144:5+32
datatype $1_fungible_asset_Untransferable {
    $1_fungible_asset_Untransferable($dummy_field: bool)
}
function {:inline} $Update'$1_fungible_asset_Untransferable'_dummy_field(s: $1_fungible_asset_Untransferable, x: bool): $1_fungible_asset_Untransferable {
    $1_fungible_asset_Untransferable(x)
}
function $IsValid'$1_fungible_asset_Untransferable'(s: $1_fungible_asset_Untransferable): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_fungible_asset_Untransferable'(s1: $1_fungible_asset_Untransferable, s2: $1_fungible_asset_Untransferable): bool {
    s1 == s2
}
var $1_fungible_asset_Untransferable_$memory: $Memory $1_fungible_asset_Untransferable;

// struct fungible_asset::BurnRef at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:205:5+73
datatype $1_fungible_asset_BurnRef {
    $1_fungible_asset_BurnRef($metadata: $1_object_Object'$1_fungible_asset_Metadata')
}
function {:inline} $Update'$1_fungible_asset_BurnRef'_metadata(s: $1_fungible_asset_BurnRef, x: $1_object_Object'$1_fungible_asset_Metadata'): $1_fungible_asset_BurnRef {
    $1_fungible_asset_BurnRef(x)
}
function $IsValid'$1_fungible_asset_BurnRef'(s: $1_fungible_asset_BurnRef): bool {
    $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$metadata)
}
function {:inline} $IsEqual'$1_fungible_asset_BurnRef'(s1: $1_fungible_asset_BurnRef, s2: $1_fungible_asset_BurnRef): bool {
    s1 == s2
}

// struct fungible_asset::ConcurrentFungibleBalance at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:171:5+132
datatype $1_fungible_asset_ConcurrentFungibleBalance {
    $1_fungible_asset_ConcurrentFungibleBalance($balance: $1_aggregator_v2_Aggregator'u64')
}
function {:inline} $Update'$1_fungible_asset_ConcurrentFungibleBalance'_balance(s: $1_fungible_asset_ConcurrentFungibleBalance, x: $1_aggregator_v2_Aggregator'u64'): $1_fungible_asset_ConcurrentFungibleBalance {
    $1_fungible_asset_ConcurrentFungibleBalance(x)
}
function $IsValid'$1_fungible_asset_ConcurrentFungibleBalance'(s: $1_fungible_asset_ConcurrentFungibleBalance): bool {
    $IsValid'$1_aggregator_v2_Aggregator'u64''(s->$balance)
}
function {:inline} $IsEqual'$1_fungible_asset_ConcurrentFungibleBalance'(s1: $1_fungible_asset_ConcurrentFungibleBalance, s2: $1_fungible_asset_ConcurrentFungibleBalance): bool {
    s1 == s2
}
var $1_fungible_asset_ConcurrentFungibleBalance_$memory: $Memory $1_fungible_asset_ConcurrentFungibleBalance;

// struct fungible_asset::ConcurrentSupply at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:118:5+74
datatype $1_fungible_asset_ConcurrentSupply {
    $1_fungible_asset_ConcurrentSupply($current: $1_aggregator_v2_Aggregator'u128')
}
function {:inline} $Update'$1_fungible_asset_ConcurrentSupply'_current(s: $1_fungible_asset_ConcurrentSupply, x: $1_aggregator_v2_Aggregator'u128'): $1_fungible_asset_ConcurrentSupply {
    $1_fungible_asset_ConcurrentSupply(x)
}
function $IsValid'$1_fungible_asset_ConcurrentSupply'(s: $1_fungible_asset_ConcurrentSupply): bool {
    $IsValid'$1_aggregator_v2_Aggregator'u128''(s->$current)
}
function {:inline} $IsEqual'$1_fungible_asset_ConcurrentSupply'(s1: $1_fungible_asset_ConcurrentSupply, s2: $1_fungible_asset_ConcurrentSupply): bool {
    s1 == s2
}
var $1_fungible_asset_ConcurrentSupply_$memory: $Memory $1_fungible_asset_ConcurrentSupply;

// struct fungible_asset::Deposit at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:220:5+83
datatype $1_fungible_asset_Deposit {
    $1_fungible_asset_Deposit($store: int, $amount: int)
}
function {:inline} $Update'$1_fungible_asset_Deposit'_store(s: $1_fungible_asset_Deposit, x: int): $1_fungible_asset_Deposit {
    $1_fungible_asset_Deposit(x, s->$amount)
}
function {:inline} $Update'$1_fungible_asset_Deposit'_amount(s: $1_fungible_asset_Deposit, x: int): $1_fungible_asset_Deposit {
    $1_fungible_asset_Deposit(s->$store, x)
}
function $IsValid'$1_fungible_asset_Deposit'(s: $1_fungible_asset_Deposit): bool {
    $IsValid'address'(s->$store)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_fungible_asset_Deposit'(s1: $1_fungible_asset_Deposit, s2: $1_fungible_asset_Deposit): bool {
    s1 == s2
}

// struct fungible_asset::Frozen at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:234:5+83
datatype $1_fungible_asset_Frozen {
    $1_fungible_asset_Frozen($store: int, $frozen: bool)
}
function {:inline} $Update'$1_fungible_asset_Frozen'_store(s: $1_fungible_asset_Frozen, x: int): $1_fungible_asset_Frozen {
    $1_fungible_asset_Frozen(x, s->$frozen)
}
function {:inline} $Update'$1_fungible_asset_Frozen'_frozen(s: $1_fungible_asset_Frozen, x: bool): $1_fungible_asset_Frozen {
    $1_fungible_asset_Frozen(s->$store, x)
}
function $IsValid'$1_fungible_asset_Frozen'(s: $1_fungible_asset_Frozen): bool {
    $IsValid'address'(s->$store)
      && $IsValid'bool'(s->$frozen)
}
function {:inline} $IsEqual'$1_fungible_asset_Frozen'(s1: $1_fungible_asset_Frozen, s2: $1_fungible_asset_Frozen): bool {
    s1 == s2
}

// struct fungible_asset::FungibleAsset at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:178:5+85
datatype $1_fungible_asset_FungibleAsset {
    $1_fungible_asset_FungibleAsset($metadata: $1_object_Object'$1_fungible_asset_Metadata', $amount: int)
}
function {:inline} $Update'$1_fungible_asset_FungibleAsset'_metadata(s: $1_fungible_asset_FungibleAsset, x: $1_object_Object'$1_fungible_asset_Metadata'): $1_fungible_asset_FungibleAsset {
    $1_fungible_asset_FungibleAsset(x, s->$amount)
}
function {:inline} $Update'$1_fungible_asset_FungibleAsset'_amount(s: $1_fungible_asset_FungibleAsset, x: int): $1_fungible_asset_FungibleAsset {
    $1_fungible_asset_FungibleAsset(s->$metadata, x)
}
function $IsValid'$1_fungible_asset_FungibleAsset'(s: $1_fungible_asset_FungibleAsset): bool {
    $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$metadata)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_fungible_asset_FungibleAsset'(s1: $1_fungible_asset_FungibleAsset, s2: $1_fungible_asset_FungibleAsset): bool {
    s1 == s2
}

// struct fungible_asset::FungibleStore at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:148:5+324
datatype $1_fungible_asset_FungibleStore {
    $1_fungible_asset_FungibleStore($metadata: $1_object_Object'$1_fungible_asset_Metadata', $balance: int, $frozen: bool)
}
function {:inline} $Update'$1_fungible_asset_FungibleStore'_metadata(s: $1_fungible_asset_FungibleStore, x: $1_object_Object'$1_fungible_asset_Metadata'): $1_fungible_asset_FungibleStore {
    $1_fungible_asset_FungibleStore(x, s->$balance, s->$frozen)
}
function {:inline} $Update'$1_fungible_asset_FungibleStore'_balance(s: $1_fungible_asset_FungibleStore, x: int): $1_fungible_asset_FungibleStore {
    $1_fungible_asset_FungibleStore(s->$metadata, x, s->$frozen)
}
function {:inline} $Update'$1_fungible_asset_FungibleStore'_frozen(s: $1_fungible_asset_FungibleStore, x: bool): $1_fungible_asset_FungibleStore {
    $1_fungible_asset_FungibleStore(s->$metadata, s->$balance, x)
}
function $IsValid'$1_fungible_asset_FungibleStore'(s: $1_fungible_asset_FungibleStore): bool {
    $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$metadata)
      && $IsValid'u64'(s->$balance)
      && $IsValid'bool'(s->$frozen)
}
function {:inline} $IsEqual'$1_fungible_asset_FungibleStore'(s1: $1_fungible_asset_FungibleStore, s2: $1_fungible_asset_FungibleStore): bool {
    s1 == s2
}
var $1_fungible_asset_FungibleStore_$memory: $Memory $1_fungible_asset_FungibleStore;

// struct fungible_asset::Metadata at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:124:5+797
datatype $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata($name: $1_string_String, $symbol: $1_string_String, $decimals: int, $icon_uri: $1_string_String, $project_uri: $1_string_String)
}
function {:inline} $Update'$1_fungible_asset_Metadata'_name(s: $1_fungible_asset_Metadata, x: $1_string_String): $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata(x, s->$symbol, s->$decimals, s->$icon_uri, s->$project_uri)
}
function {:inline} $Update'$1_fungible_asset_Metadata'_symbol(s: $1_fungible_asset_Metadata, x: $1_string_String): $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata(s->$name, x, s->$decimals, s->$icon_uri, s->$project_uri)
}
function {:inline} $Update'$1_fungible_asset_Metadata'_decimals(s: $1_fungible_asset_Metadata, x: int): $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata(s->$name, s->$symbol, x, s->$icon_uri, s->$project_uri)
}
function {:inline} $Update'$1_fungible_asset_Metadata'_icon_uri(s: $1_fungible_asset_Metadata, x: $1_string_String): $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata(s->$name, s->$symbol, s->$decimals, x, s->$project_uri)
}
function {:inline} $Update'$1_fungible_asset_Metadata'_project_uri(s: $1_fungible_asset_Metadata, x: $1_string_String): $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata(s->$name, s->$symbol, s->$decimals, s->$icon_uri, x)
}
function $IsValid'$1_fungible_asset_Metadata'(s: $1_fungible_asset_Metadata): bool {
    $IsValid'$1_string_String'(s->$name)
      && $IsValid'$1_string_String'(s->$symbol)
      && $IsValid'u8'(s->$decimals)
      && $IsValid'$1_string_String'(s->$icon_uri)
      && $IsValid'$1_string_String'(s->$project_uri)
}
function {:inline} $IsEqual'$1_fungible_asset_Metadata'(s1: $1_fungible_asset_Metadata, s2: $1_fungible_asset_Metadata): bool {
    $IsEqual'$1_string_String'(s1->$name, s2->$name)
    && $IsEqual'$1_string_String'(s1->$symbol, s2->$symbol)
    && $IsEqual'u8'(s1->$decimals, s2->$decimals)
    && $IsEqual'$1_string_String'(s1->$icon_uri, s2->$icon_uri)
    && $IsEqual'$1_string_String'(s1->$project_uri, s2->$project_uri)}
var $1_fungible_asset_Metadata_$memory: $Memory $1_fungible_asset_Metadata;

// struct fungible_asset::MintRef at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:184:5+73
datatype $1_fungible_asset_MintRef {
    $1_fungible_asset_MintRef($metadata: $1_object_Object'$1_fungible_asset_Metadata')
}
function {:inline} $Update'$1_fungible_asset_MintRef'_metadata(s: $1_fungible_asset_MintRef, x: $1_object_Object'$1_fungible_asset_Metadata'): $1_fungible_asset_MintRef {
    $1_fungible_asset_MintRef(x)
}
function $IsValid'$1_fungible_asset_MintRef'(s: $1_fungible_asset_MintRef): bool {
    $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$metadata)
}
function {:inline} $IsEqual'$1_fungible_asset_MintRef'(s1: $1_fungible_asset_MintRef, s2: $1_fungible_asset_MintRef): bool {
    s1 == s2
}

// struct fungible_asset::Supply at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:111:5+133
datatype $1_fungible_asset_Supply {
    $1_fungible_asset_Supply($current: int, $maximum: $1_option_Option'u128')
}
function {:inline} $Update'$1_fungible_asset_Supply'_current(s: $1_fungible_asset_Supply, x: int): $1_fungible_asset_Supply {
    $1_fungible_asset_Supply(x, s->$maximum)
}
function {:inline} $Update'$1_fungible_asset_Supply'_maximum(s: $1_fungible_asset_Supply, x: $1_option_Option'u128'): $1_fungible_asset_Supply {
    $1_fungible_asset_Supply(s->$current, x)
}
function $IsValid'$1_fungible_asset_Supply'(s: $1_fungible_asset_Supply): bool {
    $IsValid'u128'(s->$current)
      && $IsValid'$1_option_Option'u128''(s->$maximum)
}
function {:inline} $IsEqual'$1_fungible_asset_Supply'(s1: $1_fungible_asset_Supply, s2: $1_fungible_asset_Supply): bool {
    $IsEqual'u128'(s1->$current, s2->$current)
    && $IsEqual'$1_option_Option'u128''(s1->$maximum, s2->$maximum)}
var $1_fungible_asset_Supply_$memory: $Memory $1_fungible_asset_Supply;

// struct fungible_asset::Withdraw at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:227:5+84
datatype $1_fungible_asset_Withdraw {
    $1_fungible_asset_Withdraw($store: int, $amount: int)
}
function {:inline} $Update'$1_fungible_asset_Withdraw'_store(s: $1_fungible_asset_Withdraw, x: int): $1_fungible_asset_Withdraw {
    $1_fungible_asset_Withdraw(x, s->$amount)
}
function {:inline} $Update'$1_fungible_asset_Withdraw'_amount(s: $1_fungible_asset_Withdraw, x: int): $1_fungible_asset_Withdraw {
    $1_fungible_asset_Withdraw(s->$store, x)
}
function $IsValid'$1_fungible_asset_Withdraw'(s: $1_fungible_asset_Withdraw): bool {
    $IsValid'address'(s->$store)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_fungible_asset_Withdraw'(s1: $1_fungible_asset_Withdraw, s2: $1_fungible_asset_Withdraw): bool {
    s1 == s2
}

// fun fungible_asset::burn [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1010:5+275
procedure {:inline 1} $1_fungible_asset_burn(_$t0: $1_fungible_asset_BurnRef, _$t1: $1_fungible_asset_FungibleAsset) returns ()
{
    // declare local variables
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: $1_object_Object'$1_fungible_asset_Metadata';
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t0: $1_fungible_asset_BurnRef;
    var $t1: $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_BurnRef': $1_fungible_asset_BurnRef;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1010:5+1
    assume {:print "$at(167,42230,42231)"} true;
    assume {:print "$track_local(48,3,0):", $t0} $t0 == $t0;

    // trace_local[fa]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1010:5+1
    assume {:print "$track_local(48,3,1):", $t1} $t1 == $t1;

    // $t2 := get_field<0x1::fungible_asset::BurnRef>.metadata($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1012:13+12
    assume {:print "$at(167,42345,42357)"} true;
    $t2 := $t0->$metadata;

    // $t3 := fungible_asset::metadata_from_asset($t1) on_abort goto L3 with $t4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1012:29+24
    call $t3 := $1_fungible_asset_metadata_from_asset($t1);
    if ($abort_flag) {
        assume {:print "$at(167,42361,42385)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(48,3):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := ==($t2, $t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1012:13+40
    $t5 := $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''($t2, $t3);

    // if ($t5) goto L1 else goto L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1011:9+6
    assume {:print "$at(167,42324,42330)"} true;
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1015:9+17
    assume {:print "$at(167,42481,42498)"} true;
L1:

    // $t6 := fungible_asset::burn_internal($t1) on_abort goto L3 with $t4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1015:9+17
    assume {:print "$at(167,42481,42498)"} true;
    call $t6 := $1_fungible_asset_burn_internal($t1);
    if ($abort_flag) {
        assume {:print "$at(167,42481,42498)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(48,3):", $t4} $t4 == $t4;
        goto L3;
    }

    // drop($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1015:9+17

    // goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1010:89+191
    assume {:print "$at(167,42314,42505)"} true;
    goto L2;

    // label L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1013:37+37
    assume {:print "$at(167,42423,42460)"} true;
L0:

    // $t7 := 13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1013:37+37
    assume {:print "$at(167,42423,42460)"} true;
    $t7 := 13;
    assume $IsValid'u64'($t7);

    // $t8 := error::invalid_argument($t7) on_abort goto L3 with $t4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1013:13+62
    call $t8 := $1_error_invalid_argument($t7);
    if ($abort_flag) {
        assume {:print "$at(167,42399,42461)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(48,3):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_abort($t8) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1011:9+6
    assume {:print "$at(167,42324,42330)"} true;
    assume {:print "$track_abort(48,3):", $t8} $t8 == $t8;

    // $t4 := move($t8) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1011:9+6
    $t4 := $t8;

    // goto L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1011:9+6
    goto L3;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1016:5+1
    assume {:print "$at(167,42504,42505)"} true;
L2:

    // return () at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1016:5+1
    assume {:print "$at(167,42504,42505)"} true;
    return;

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1016:5+1
L3:

    // abort($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1016:5+1
    assume {:print "$at(167,42504,42505)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun fungible_asset::generate_transfer_ref [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:489:5+207
procedure {:inline 1} $1_fungible_asset_generate_transfer_ref(_$t0: $1_object_ConstructorRef) returns ($ret0: $1_fungible_asset_TransferRef)
{
    // declare local variables
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $t2: int;
    var $t3: $1_fungible_asset_TransferRef;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_fungible_asset_TransferRef': $1_fungible_asset_TransferRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[constructor_ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:489:5+1
    assume {:print "$at(167,20437,20438)"} true;
    assume {:print "$track_local(48,4,0):", $t0} $t0 == $t0;

    // $t1 := object::object_from_constructor_ref<0x1::fungible_asset::Metadata>($t0) on_abort goto L2 with $t2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:490:24+62
    assume {:print "$at(167,20542,20604)"} true;
    call $t1 := $1_object_object_from_constructor_ref'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(167,20542,20604)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(48,4):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := pack 0x1::fungible_asset::TransferRef($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:491:9+24
    assume {:print "$at(167,20614,20638)"} true;
    $t3 := $1_fungible_asset_TransferRef($t1);

    // trace_return[0]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:491:9+24
    assume {:print "$track_return(48,4,0):", $t3} $t3 == $t3;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:492:5+1
    assume {:print "$at(167,20643,20644)"} true;
L1:

    // return $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:492:5+1
    assume {:print "$at(167,20643,20644)"} true;
    $ret0 := $t3;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:492:5+1
L2:

    // abort($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:492:5+1
    assume {:print "$at(167,20643,20644)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun fungible_asset::is_untransferable<0x1::fungible_asset::Metadata> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:322:5+137
procedure {:inline 1} $1_fungible_asset_is_untransferable'$1_fungible_asset_Metadata'(_$t0: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: bool)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[metadata]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:322:5+1
    assume {:print "$at(167,13444,13445)"} true;
    assume {:print "$track_local(48,5,0):", $t0} $t0 == $t0;

    // $t1 := object::object_address<#0>($t0) on_abort goto L2 with $t2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:323:32+33
    assume {:print "$at(167,13541,13574)"} true;
    call $t1 := $1_object_object_address'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(167,13541,13574)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(48,5):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := exists<0x1::fungible_asset::Untransferable>($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:323:9+57
    $t3 := $ResourceExists($1_fungible_asset_Untransferable_$memory, $t1);

    // trace_return[0]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:323:9+57
    assume {:print "$track_return(48,5,0):", $t3} $t3 == $t3;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:324:5+1
    assume {:print "$at(167,13580,13581)"} true;
L1:

    // return $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:324:5+1
    assume {:print "$at(167,13580,13581)"} true;
    $ret0 := $t3;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:324:5+1
L2:

    // abort($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:324:5+1
    assume {:print "$at(167,13580,13581)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun fungible_asset::transfer_with_ref<0x1::fungible_asset::FungibleStore> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1077:5+318
procedure {:inline 1} $1_fungible_asset_transfer_with_ref'$1_fungible_asset_FungibleStore'(_$t0: $1_fungible_asset_TransferRef, _$t1: $1_object_Object'$1_fungible_asset_FungibleStore', _$t2: $1_object_Object'$1_fungible_asset_FungibleStore', _$t3: int) returns ()
{
    // declare local variables
    var $t4: $1_fungible_asset_FungibleAsset;
    var $t5: $1_fungible_asset_FungibleAsset;
    var $t6: int;
    var $t0: $1_fungible_asset_TransferRef;
    var $t1: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t2: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t3: int;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_TransferRef': $1_fungible_asset_TransferRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[transfer_ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1077:5+1
    assume {:print "$at(167,44704,44705)"} true;
    assume {:print "$track_local(48,8,0):", $t0} $t0 == $t0;

    // trace_local[from]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1077:5+1
    assume {:print "$track_local(48,8,1):", $t1} $t1 == $t1;

    // trace_local[to]($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1077:5+1
    assume {:print "$track_local(48,8,2):", $t2} $t2 == $t2;

    // trace_local[amount]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1077:5+1
    assume {:print "$track_local(48,8,3):", $t3} $t3 == $t3;

    // $t5 := fungible_asset::withdraw_with_ref<#0>($t0, $t1, $t3) on_abort goto L2 with $t6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1083:18+45
    assume {:print "$at(167,44922,44967)"} true;
    call $t5 := $1_fungible_asset_withdraw_with_ref'$1_fungible_asset_FungibleStore'($t0, $t1, $t3);
    if ($abort_flag) {
        assume {:print "$at(167,44922,44967)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(48,8):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[fa]($t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1083:18+45
    assume {:print "$track_local(48,8,4):", $t5} $t5 == $t5;

    // fungible_asset::deposit_with_ref<#0>($t0, $t2, $t5) on_abort goto L2 with $t6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1084:9+38
    assume {:print "$at(167,44977,45015)"} true;
    call $1_fungible_asset_deposit_with_ref'$1_fungible_asset_FungibleStore'($t0, $t2, $t5);
    if ($abort_flag) {
        assume {:print "$at(167,44977,45015)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(48,8):", $t6} $t6 == $t6;
        goto L2;
    }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1085:5+1
    assume {:print "$at(167,45021,45022)"} true;
L1:

    // return () at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1085:5+1
    assume {:print "$at(167,45021,45022)"} true;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1085:5+1
L2:

    // abort($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1085:5+1
    assume {:print "$at(167,45021,45022)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun fungible_asset::add_fungibility [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:266:5+1830
procedure {:inline 1} $1_fungible_asset_add_fungibility(_$t0: $1_object_ConstructorRef, _$t1: $1_option_Option'u128', _$t2: $1_string_String, _$t3: $1_string_String, _$t4: int, _$t5: $1_string_String, _$t6: $1_string_String) returns ($ret0: $1_object_Object'$1_fungible_asset_Metadata')
{
    // declare local variables
    var $t7: $signer;
    var $t8: $signer;
    var $t9: $signer;
    var $t10: $1_aggregator_v2_Aggregator'u128';
    var $t11: $1_fungible_asset_ConcurrentSupply;
    var $t12: bool;
    var $t13: int;
    var $t14: $signer;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: bool;
    var $t29: $1_fungible_asset_Metadata;
    var $t30: bool;
    var $t31: $1_option_Option'u128';
    var $t32: bool;
    var $t33: $1_aggregator_v2_Aggregator'u128';
    var $t34: $1_fungible_asset_ConcurrentSupply;
    var $t35: $1_object_Object'$1_fungible_asset_Metadata';
    var $t36: $Mutation ($1_option_Option'u128');
    var $t37: int;
    var $t38: $1_option_Option'u128';
    var $t39: bool;
    var $t40: $1_aggregator_v2_Aggregator'u128';
    var $t41: int;
    var $t42: $1_option_Option'u128';
    var $t43: $1_fungible_asset_Supply;
    var $t44: int;
    var $t45: int;
    var $t46: int;
    var $t47: int;
    var $t48: int;
    var $t49: int;
    var $t50: int;
    var $t51: int;
    var $t52: int;
    var $t53: int;
    var $t54: int;
    var $t55: int;
    var $t0: $1_object_ConstructorRef;
    var $t1: $1_option_Option'u128';
    var $t2: $1_string_String;
    var $t3: $1_string_String;
    var $t4: int;
    var $t5: $1_string_String;
    var $t6: $1_string_String;
    var $temp_0'$1_aggregator_v2_Aggregator'u128'': $1_aggregator_v2_Aggregator'u128';
    var $temp_0'$1_fungible_asset_ConcurrentSupply': $1_fungible_asset_ConcurrentSupply;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_option_Option'u128'': $1_option_Option'u128';
    var $temp_0'$1_string_String': $1_string_String;
    var $temp_0'signer': $signer;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;

    // bytecode translation starts here
    // trace_local[constructor_ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:266:5+1
    assume {:print "$at(167,11077,11078)"} true;
    assume {:print "$track_local(48,9,0):", $t0} $t0 == $t0;

    // trace_local[maximum_supply]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:266:5+1
    assume {:print "$track_local(48,9,1):", $t1} $t1 == $t1;

    // trace_local[name]($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:266:5+1
    assume {:print "$track_local(48,9,2):", $t2} $t2 == $t2;

    // trace_local[symbol]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:266:5+1
    assume {:print "$track_local(48,9,3):", $t3} $t3 == $t3;

    // trace_local[decimals]($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:266:5+1
    assume {:print "$track_local(48,9,4):", $t4} $t4 == $t4;

    // trace_local[icon_uri]($t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:266:5+1
    assume {:print "$track_local(48,9,5):", $t5} $t5 == $t5;

    // trace_local[project_uri]($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:266:5+1
    assume {:print "$track_local(48,9,6):", $t6} $t6 == $t6;

    // $t12 := object::can_generate_delete_ref($t0) on_abort goto L19 with $t13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:275:18+48
    assume {:print "$at(167,11351,11399)"} true;
    call $t12 := $1_object_can_generate_delete_ref($t0);
    if ($abort_flag) {
        assume {:print "$at(167,11351,11399)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(48,9):", $t13} $t13 == $t13;
        goto L19;
    }

    // if ($t12) goto L0 else goto L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:275:17+49
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:276:39+40
    assume {:print "$at(167,11487,11527)"} true;
L1:

    // $t14 := object::generate_signer($t0) on_abort goto L19 with $t13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:276:39+40
    assume {:print "$at(167,11487,11527)"} true;
    call $t14 := $1_object_generate_signer($t0);
    if ($abort_flag) {
        assume {:print "$at(167,11487,11527)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(48,9):", $t13} $t13 == $t13;
        goto L19;
    }

    // trace_local[$t13]($t14) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:276:39+40
    assume {:print "$track_local(48,9,7):", $t14} $t14 == $t14;

    // trace_local[metadata_object_signer]($t14) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:276:38+41
    assume {:print "$track_local(48,9,8):", $t14} $t14 == $t14;

    // $t15 := string::length($t2) on_abort goto L19 with $t13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:277:17+21
    assume {:print "$at(167,11545,11566)"} true;
    call $t15 := $1_string_length($t2);
    if ($abort_flag) {
        assume {:print "$at(167,11545,11566)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(48,9):", $t13} $t13 == $t13;
        goto L19;
    }

    // $t16 := 32 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:277:42+15
    $t16 := 32;
    assume $IsValid'u64'($t16);

    // $t17 := <=($t15, $t16) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:277:17+40
    call $t17 := $Le($t15, $t16);

    // if ($t17) goto L3 else goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:277:9+6
    if ($t17) { goto L3; } else { goto L2; }

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:278:32+7
    assume {:print "$at(167,11656,11663)"} true;
L3:

    // $t18 := string::length($t3) on_abort goto L19 with $t13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:278:17+23
    assume {:print "$at(167,11641,11664)"} true;
    call $t18 := $1_string_length($t3);
    if ($abort_flag) {
        assume {:print "$at(167,11641,11664)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(48,9):", $t13} $t13 == $t13;
        goto L19;
    }

    // $t19 := 32 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:278:44+17
    $t19 := 32;
    assume $IsValid'u64'($t19);

    // $t20 := <=($t18, $t19) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:278:17+44
    call $t20 := $Le($t18, $t19);

    // if ($t20) goto L5 else goto L4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:278:9+6
    if ($t20) { goto L5; } else { goto L4; }

    // label L5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:279:17+8
    assume {:print "$at(167,11743,11751)"} true;
L5:

    // $t21 := 32 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:279:29+12
    assume {:print "$at(167,11755,11767)"} true;
    $t21 := 32;
    assume $IsValid'u8'($t21);

    // $t22 := <=($t4, $t21) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:279:17+24
    call $t22 := $Le($t4, $t21);

    // if ($t22) goto L7 else goto L6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:279:9+6
    if ($t22) { goto L7; } else { goto L6; }

    // label L7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:280:32+9
    assume {:print "$at(167,11843,11852)"} true;
L7:

    // $t23 := string::length($t5) on_abort goto L19 with $t13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:280:17+25
    assume {:print "$at(167,11828,11853)"} true;
    call $t23 := $1_string_length($t5);
    if ($abort_flag) {
        assume {:print "$at(167,11828,11853)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(48,9):", $t13} $t13 == $t13;
        goto L19;
    }

    // $t24 := 512 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:280:46+14
    $t24 := 512;
    assume $IsValid'u64'($t24);

    // $t25 := <=($t23, $t24) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:280:17+43
    call $t25 := $Le($t23, $t24);

    // if ($t25) goto L9 else goto L8 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:280:9+6
    if ($t25) { goto L9; } else { goto L8; }

    // label L9 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:281:32+12
    assume {:print "$at(167,11941,11953)"} true;
L9:

    // $t26 := string::length($t6) on_abort goto L19 with $t13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:281:17+28
    assume {:print "$at(167,11926,11954)"} true;
    call $t26 := $1_string_length($t6);
    if ($abort_flag) {
        assume {:print "$at(167,11926,11954)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(48,9):", $t13} $t13 == $t13;
        goto L19;
    }

    // $t27 := 512 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:281:49+14
    $t27 := 512;
    assume $IsValid'u64'($t27);

    // $t28 := <=($t26, $t27) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:281:17+46
    call $t28 := $Le($t26, $t27);

    // if ($t28) goto L11 else goto L10 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:281:9+6
    if ($t28) { goto L11; } else { goto L10; }

    // label L11 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:282:17+22
    assume {:print "$at(167,12027,12049)"} true;
L11:

    // $t29 := pack 0x1::fungible_asset::Metadata($t2, $t3, $t4, $t5, $t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:283:13+151
    assume {:print "$at(167,12063,12214)"} true;
    $t29 := $1_fungible_asset_Metadata($t2, $t3, $t4, $t5, $t6);

    // move_to<0x1::fungible_asset::Metadata>($t29, $t14) on_abort goto L19 with $t13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:282:9+205
    assume {:print "$at(167,12019,12224)"} true;
    if ($ResourceExists($1_fungible_asset_Metadata_$memory, $t14->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_fungible_asset_Metadata_$memory := $ResourceUpdate($1_fungible_asset_Metadata_$memory, $t14->$addr, $t29);
    }
    if ($abort_flag) {
        assume {:print "$at(167,12019,12224)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(48,9):", $t13} $t13 == $t13;
        goto L19;
    }

    // $t30 := features::concurrent_fungible_assets_enabled() on_abort goto L19 with $t13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:248:9+46
    assume {:print "$at(167,10226,10272)"} true;
    call $t30 := $1_features_concurrent_fungible_assets_enabled();
    if ($abort_flag) {
        assume {:print "$at(167,10226,10272)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(48,9):", $t13} $t13 == $t13;
        goto L19;
    }

    // if ($t30) goto L13 else goto L12 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:292:9+593
    assume {:print "$at(167,12235,12828)"} true;
    if ($t30) { goto L13; } else { goto L12; }

    // label L13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:293:45+15
    assume {:print "$at(167,12326,12341)"} true;
L13:

    // $t31 := copy($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:293:45+15
    assume {:print "$at(167,12326,12341)"} true;
    $t31 := $t1;

    // $t32 := opaque begin: option::is_none<u128>($t31) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:293:29+32

    // assume WellFormed($t32) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:293:29+32
    assume $IsValid'bool'($t32);

    // assume Eq<bool>($t32, option::spec_is_none<u128>($t31)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:293:29+32
    assume $IsEqual'bool'($t32, $1_option_spec_is_none'u128'($t31));

    // $t32 := opaque end: option::is_none<u128>($t31) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:293:29+32

    // trace_local[$t43]($t14) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:294:21+22
    assume {:print "$at(167,12364,12386)"} true;
    assume {:print "$track_local(48,9,9):", $t14} $t14 == $t14;

    // if ($t32) goto L15 else goto L14 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:295:26+215
    assume {:print "$at(167,12432,12647)"} true;
    if ($t32) { goto L15; } else { goto L14; }

    // label L15 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:296:21+44
    assume {:print "$at(167,12469,12513)"} true;
L15:

    // $t33 := aggregator_v2::create_unbounded_aggregator<u128>() on_abort goto L19 with $t13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:296:21+44
    assume {:print "$at(167,12469,12513)"} true;
    call $t33 := $1_aggregator_v2_create_unbounded_aggregator'u128'();
    if ($abort_flag) {
        assume {:print "$at(167,12469,12513)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(48,9):", $t13} $t13 == $t13;
        goto L19;
    }

    // $t10 := $t33 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:296:21+44
    $t10 := $t33;

    // trace_local[$t54]($t33) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:296:21+44
    assume {:print "$track_local(48,9,10):", $t33} $t33 == $t33;

    // label L16 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:294:45+274
    assume {:print "$at(167,12388,12662)"} true;
L16:

    // $t34 := pack 0x1::fungible_asset::ConcurrentSupply($t10) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:294:45+274
    assume {:print "$at(167,12388,12662)"} true;
    $t34 := $1_fungible_asset_ConcurrentSupply($t10);

    // trace_local[$t53]($t34) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:294:13+307
    assume {:print "$track_local(48,9,11):", $t34} $t34 == $t34;

    // move_to<0x1::fungible_asset::ConcurrentSupply>($t34, $t14) on_abort goto L19 with $t13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:294:13+307
    if ($ResourceExists($1_fungible_asset_ConcurrentSupply_$memory, $t14->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_fungible_asset_ConcurrentSupply_$memory := $ResourceUpdate($1_fungible_asset_ConcurrentSupply_$memory, $t14->$addr, $t34);
    }
    if ($abort_flag) {
        assume {:print "$at(167,12356,12663)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(48,9):", $t13} $t13 == $t13;
        goto L19;
    }

    // label L17 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:308:9+62
    assume {:print "$at(167,12839,12901)"} true;
L17:

    // $t35 := object::object_from_constructor_ref<0x1::fungible_asset::Metadata>($t0) on_abort goto L19 with $t13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:308:9+62
    assume {:print "$at(167,12839,12901)"} true;
    call $t35 := $1_object_object_from_constructor_ref'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(167,12839,12901)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(48,9):", $t13} $t13 == $t13;
        goto L19;
    }

    // trace_return[0]($t35) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:274:25+1575
    assume {:print "$at(167,11332,12907)"} true;
    assume {:print "$track_return(48,9,0):", $t35} $t35 == $t35;

    // goto L18 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:274:25+1575
    goto L18;

    // label L14 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:70+19
    assume {:print "$at(167,12608,12627)"} true;
L14:

    // $t36 := borrow_local($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:70+19
    assume {:print "$at(167,12608,12627)"} true;
    $t36 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t37 := opaque begin: option::extract<u128>($t36) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:54+36

    // $t38 := read_ref($t36) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:54+36
    $t38 := $Dereference($t36);

    // assume Identical($t39, option::spec_is_none<u128>($t36)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:54+36
    assume ($t39 == $1_option_spec_is_none'u128'($Dereference($t36)));

    // if ($t39) goto L21 else goto L22 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:54+36
    if ($t39) { goto L21; } else { goto L22; }

    // label L21 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:54+36
L21:

    // assume And(option::spec_is_none<u128>($t36), Eq(262145, $t13)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:54+36
    assume {:print "$at(167,12592,12628)"} true;
    assume ($1_option_spec_is_none'u128'($Dereference($t36)) && $IsEqual'num'(262145, $t13));

    // trace_abort($t13) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:54+36
    assume {:print "$at(167,12592,12628)"} true;
    assume {:print "$track_abort(48,9):", $t13} $t13 == $t13;

    // goto L19 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:54+36
    goto L19;

    // label L20 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:54+36
L20:

    // $t36 := havoc[mut]() at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:54+36
    assume {:print "$at(167,12592,12628)"} true;
    havoc $temp_0'$1_option_Option'u128'';
    $t36 := $UpdateMutation($t36, $temp_0'$1_option_Option'u128'');

    // assume And(WellFormed($t36), Le(Len<u128>(select option::Option.vec($t36)), 1)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:54+36
    assume ($IsValid'$1_option_Option'u128''($Dereference($t36)) && (LenVec($Dereference($t36)->$vec) <= 1));

    // assume WellFormed($t37) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:54+36
    assume $IsValid'u128'($t37);

    // assume Eq<u128>($t37, option::spec_borrow<u128>($t38)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:54+36
    assume $IsEqual'u128'($t37, $1_option_spec_borrow'u128'($t38));

    // assume option::spec_is_none<u128>($t36) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:54+36
    assume $1_option_spec_is_none'u128'($Dereference($t36));

    // $t37 := opaque end: option::extract<u128>($t36) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:54+36

    // pack_ref_deep($t36) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:54+36

    // write_back[LocalRoot($t1)@]($t36) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:54+36
    $t1 := $Dereference($t36);

    // trace_local[maximum_supply]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:54+36
    assume {:print "$track_local(48,9,1):", $t1} $t1 == $t1;

    // $t40 := aggregator_v2::create_aggregator<u128>($t37) on_abort goto L19 with $t13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:21+70
    call $t40 := $1_aggregator_v2_create_aggregator'u128'($t37);
    if ($abort_flag) {
        assume {:print "$at(167,12559,12629)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(48,9):", $t13} $t13 == $t13;
        goto L19;
    }

    // $t10 := $t40 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:21+70
    $t10 := $t40;

    // trace_local[$t54]($t40) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:21+70
    assume {:print "$track_local(48,9,10):", $t40} $t40 == $t40;

    // goto L16 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:298:21+70
    goto L16;

    // label L12 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:302:21+22
    assume {:print "$at(167,12702,12724)"} true;
L12:

    // $t41 := 0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:303:26+1
    assume {:print "$at(167,12760,12761)"} true;
    $t41 := 0;
    assume $IsValid'u128'($t41);

    // $t42 := move($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:302:45+90
    assume {:print "$at(167,12726,12816)"} true;
    $t42 := $t1;

    // $t43 := pack 0x1::fungible_asset::Supply($t41, $t42) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:302:45+90
    $t43 := $1_fungible_asset_Supply($t41, $t42);

    // move_to<0x1::fungible_asset::Supply>($t43, $t14) on_abort goto L19 with $t13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:302:13+123
    if ($ResourceExists($1_fungible_asset_Supply_$memory, $t14->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_fungible_asset_Supply_$memory := $ResourceUpdate($1_fungible_asset_Supply_$memory, $t14->$addr, $t43);
    }
    if ($abort_flag) {
        assume {:print "$at(167,12694,12817)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(48,9):", $t13} $t13 == $t13;
        goto L19;
    }

    // goto L17 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:302:13+123
    goto L17;

    // label L10 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:281:9+6
    assume {:print "$at(167,11918,11924)"} true;
L10:

    // $t44 := 19 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:281:85+13
    assume {:print "$at(167,11994,12007)"} true;
    $t44 := 19;
    assume $IsValid'u64'($t44);

    // $t45 := error::out_of_range($t44) on_abort goto L19 with $t13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:281:65+34
    call $t45 := $1_error_out_of_range($t44);
    if ($abort_flag) {
        assume {:print "$at(167,11974,12008)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(48,9):", $t13} $t13 == $t13;
        goto L19;
    }

    // trace_abort($t45) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:281:9+6
    assume {:print "$at(167,11918,11924)"} true;
    assume {:print "$track_abort(48,9):", $t45} $t45 == $t45;

    // $t13 := move($t45) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:281:9+6
    $t13 := $t45;

    // goto L19 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:281:9+6
    goto L19;

    // label L8 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:280:9+6
    assume {:print "$at(167,11820,11826)"} true;
L8:

    // $t46 := 19 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:280:82+13
    assume {:print "$at(167,11893,11906)"} true;
    $t46 := 19;
    assume $IsValid'u64'($t46);

    // $t47 := error::out_of_range($t46) on_abort goto L19 with $t13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:280:62+34
    call $t47 := $1_error_out_of_range($t46);
    if ($abort_flag) {
        assume {:print "$at(167,11873,11907)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(48,9):", $t13} $t13 == $t13;
        goto L19;
    }

    // trace_abort($t47) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:280:9+6
    assume {:print "$at(167,11820,11826)"} true;
    assume {:print "$track_abort(48,9):", $t47} $t47 == $t47;

    // $t13 := move($t47) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:280:9+6
    $t13 := $t47;

    // goto L19 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:280:9+6
    goto L19;

    // label L6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:279:9+6
    assume {:print "$at(167,11735,11741)"} true;
L6:

    // $t48 := 17 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:279:63+19
    assume {:print "$at(167,11789,11808)"} true;
    $t48 := 17;
    assume $IsValid'u64'($t48);

    // $t49 := error::out_of_range($t48) on_abort goto L19 with $t13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:279:43+40
    call $t49 := $1_error_out_of_range($t48);
    if ($abort_flag) {
        assume {:print "$at(167,11769,11809)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(48,9):", $t13} $t13 == $t13;
        goto L19;
    }

    // trace_abort($t49) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:279:9+6
    assume {:print "$at(167,11735,11741)"} true;
    assume {:print "$track_abort(48,9):", $t49} $t49 == $t49;

    // $t13 := move($t49) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:279:9+6
    $t13 := $t49;

    // goto L19 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:279:9+6
    goto L19;

    // label L4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:278:9+6
    assume {:print "$at(167,11633,11639)"} true;
L4:

    // $t50 := 16 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:278:83+16
    assume {:print "$at(167,11707,11723)"} true;
    $t50 := 16;
    assume $IsValid'u64'($t50);

    // $t51 := error::out_of_range($t50) on_abort goto L19 with $t13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:278:63+37
    call $t51 := $1_error_out_of_range($t50);
    if ($abort_flag) {
        assume {:print "$at(167,11687,11724)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(48,9):", $t13} $t13 == $t13;
        goto L19;
    }

    // trace_abort($t51) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:278:9+6
    assume {:print "$at(167,11633,11639)"} true;
    assume {:print "$track_abort(48,9):", $t51} $t51 == $t51;

    // $t13 := move($t51) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:278:9+6
    $t13 := $t51;

    // goto L19 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:278:9+6
    goto L19;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:277:9+6
    assume {:print "$at(167,11537,11543)"} true;
L2:

    // $t52 := 15 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:277:79+14
    assume {:print "$at(167,11607,11621)"} true;
    $t52 := 15;
    assume $IsValid'u64'($t52);

    // $t53 := error::out_of_range($t52) on_abort goto L19 with $t13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:277:59+35
    call $t53 := $1_error_out_of_range($t52);
    if ($abort_flag) {
        assume {:print "$at(167,11587,11622)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(48,9):", $t13} $t13 == $t13;
        goto L19;
    }

    // trace_abort($t53) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:277:9+6
    assume {:print "$at(167,11537,11543)"} true;
    assume {:print "$track_abort(48,9):", $t53} $t53 == $t53;

    // $t13 := move($t53) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:277:9+6
    $t13 := $t53;

    // goto L19 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:277:9+6
    goto L19;

    // label L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:275:9+6
    assume {:print "$at(167,11342,11348)"} true;
L0:

    // $t54 := 18 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:275:92+20
    assume {:print "$at(167,11425,11445)"} true;
    $t54 := 18;
    assume $IsValid'u64'($t54);

    // $t55 := error::invalid_argument($t54) on_abort goto L19 with $t13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:275:68+45
    call $t55 := $1_error_invalid_argument($t54);
    if ($abort_flag) {
        assume {:print "$at(167,11401,11446)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(48,9):", $t13} $t13 == $t13;
        goto L19;
    }

    // trace_abort($t55) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:275:9+6
    assume {:print "$at(167,11342,11348)"} true;
    assume {:print "$track_abort(48,9):", $t55} $t55 == $t55;

    // $t13 := move($t55) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:275:9+6
    $t13 := $t55;

    // goto L19 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:275:9+6
    goto L19;

    // label L18 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:309:5+1
    assume {:print "$at(167,12906,12907)"} true;
L18:

    // return $t35 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:309:5+1
    assume {:print "$at(167,12906,12907)"} true;
    $ret0 := $t35;
    return;

    // label L19 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:309:5+1
L19:

    // abort($t13) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:309:5+1
    assume {:print "$at(167,12906,12907)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

    // label L22 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L22:

    // drop($t36) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L20 at <internal>:1:1+10
    goto L20;

}

// fun fungible_asset::burn_from<0x1::fungible_asset::FungibleStore> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1031:5+323
procedure {:inline 1} $1_fungible_asset_burn_from'$1_fungible_asset_FungibleStore'(_$t0: $1_fungible_asset_BurnRef, _$t1: $1_object_Object'$1_fungible_asset_FungibleStore', _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: $1_fungible_asset_FungibleAsset;
    var $t0: $1_fungible_asset_BurnRef;
    var $t1: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t2: int;
    var $temp_0'$1_fungible_asset_BurnRef': $1_fungible_asset_BurnRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1031:5+1
    assume {:print "$at(167,42898,42899)"} true;
    assume {:print "$track_local(48,22,0):", $t0} $t0 == $t0;

    // trace_local[store]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1031:5+1
    assume {:print "$track_local(48,22,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1031:5+1
    assume {:print "$track_local(48,22,2):", $t2} $t2 == $t2;

    // $t3 := object::object_address<#0>($t1) on_abort goto L2 with $t4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1037:38+30
    assume {:print "$at(167,43174,43204)"} true;
    call $t3 := $1_object_object_address'$1_fungible_asset_FungibleStore'($t1);
    if ($abort_flag) {
        assume {:print "$at(167,43174,43204)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(48,22):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := fungible_asset::unchecked_withdraw($t3, $t2) on_abort goto L2 with $t4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1037:19+58
    call $t5 := $1_fungible_asset_unchecked_withdraw($t3, $t2);
    if ($abort_flag) {
        assume {:print "$at(167,43155,43213)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(48,22):", $t4} $t4 == $t4;
        goto L2;
    }

    // fungible_asset::burn($t0, $t5) on_abort goto L2 with $t4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1037:9+69
    call $1_fungible_asset_burn($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(167,43145,43214)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(48,22):", $t4} $t4 == $t4;
        goto L2;
    }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1038:5+1
    assume {:print "$at(167,43220,43221)"} true;
L1:

    // return () at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1038:5+1
    assume {:print "$at(167,43220,43221)"} true;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1038:5+1
L2:

    // abort($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1038:5+1
    assume {:print "$at(167,43220,43221)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun fungible_asset::burn_internal [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1019:5+256
procedure {:inline 1} $1_fungible_asset_burn_internal(_$t0: $1_fungible_asset_FungibleAsset) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: $1_object_Object'$1_fungible_asset_Metadata';
    var $t4: int;
    var $t5: int;
    var $t0: $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[fa]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1019:5+1
    assume {:print "$at(167,42566,42567)"} true;
    assume {:print "$track_local(48,23,0):", $t0} $t0 == $t0;

    // ($t3, $t4) := unpack 0x1::fungible_asset::FungibleAsset($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1022:13+66
    assume {:print "$at(167,42685,42751)"} true;
    $t3 := $t0->$metadata;
    $t4 := $t0->$amount;

    // trace_local[amount]($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1022:13+66
    assume {:print "$track_local(48,23,1):", $t4} $t4 == $t4;

    // trace_local[metadata]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1022:13+66
    assume {:print "$track_local(48,23,2):", $t3} $t3 == $t3;

    // fungible_asset::decrease_supply<0x1::fungible_asset::Metadata>($t3, $t4) on_abort goto L2 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1026:9+34
    assume {:print "$at(167,42766,42800)"} true;
    call $1_fungible_asset_decrease_supply'$1_fungible_asset_Metadata'($t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(167,42766,42800)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(48,23):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1021:46+151
    assume {:print "$at(167,42671,42822)"} true;
    assume {:print "$track_return(48,23,0):", $t4} $t4 == $t4;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1028:5+1
    assume {:print "$at(167,42821,42822)"} true;
L1:

    // return $t4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1028:5+1
    assume {:print "$at(167,42821,42822)"} true;
    $ret0 := $t4;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1028:5+1
L2:

    // abort($t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1028:5+1
    assume {:print "$at(167,42821,42822)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun fungible_asset::create_store<0x1::fungible_asset::Metadata> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:821:5+765
procedure {:inline 1} $1_fungible_asset_create_store'$1_fungible_asset_Metadata'(_$t0: $1_object_ConstructorRef, _$t1: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: $1_object_Object'$1_fungible_asset_FungibleStore')
{
    // declare local variables
    var $t2: $signer;
    var $t3: $signer;
    var $t4: $signer;
    var $t5: int;
    var $t6: $1_object_Object'$1_fungible_asset_Metadata';
    var $t7: int;
    var $t8: bool;
    var $t9: $1_fungible_asset_FungibleStore;
    var $t10: bool;
    var $t11: bool;
    var $t12: $1_aggregator_v2_Aggregator'u64';
    var $t13: $1_fungible_asset_ConcurrentFungibleBalance;
    var $t14: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t0: $1_object_ConstructorRef;
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[constructor_ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:821:5+1
    assume {:print "$at(167,34639,34640)"} true;
    assume {:print "$track_local(48,25,0):", $t0} $t0 == $t0;

    // trace_local[metadata]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:821:5+1
    assume {:print "$track_local(48,25,1):", $t1} $t1 == $t1;

    // $t4 := object::generate_signer($t0) on_abort goto L7 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:825:26+40
    assume {:print "$at(167,34799,34839)"} true;
    call $t4 := $1_object_generate_signer($t0);
    if ($abort_flag) {
        assume {:print "$at(167,34799,34839)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(48,25):", $t5} $t5 == $t5;
        goto L7;
    }

    // trace_local[$t4]($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:825:26+40
    assume {:print "$track_local(48,25,2):", $t4} $t4 == $t4;

    // trace_local[store_obj]($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:825:25+41
    assume {:print "$track_local(48,25,3):", $t4} $t4 == $t4;

    // $t6 := object::convert<#0, 0x1::fungible_asset::Metadata>($t1) on_abort goto L7 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:827:23+25
    assume {:print "$at(167,34906,34931)"} true;
    call $t6 := $1_object_convert'$1_fungible_asset_Metadata_$1_fungible_asset_Metadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(167,34906,34931)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(48,25):", $t5} $t5 == $t5;
        goto L7;
    }

    // $t7 := 0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:828:22+1
    assume {:print "$at(167,34954,34955)"} true;
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // $t8 := false at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:829:21+5
    assume {:print "$at(167,34977,34982)"} true;
    $t8 := false;
    assume $IsValid'bool'($t8);

    // $t9 := pack 0x1::fungible_asset::FungibleStore($t6, $t7, $t8) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:826:28+125
    assume {:print "$at(167,34868,34993)"} true;
    $t9 := $1_fungible_asset_FungibleStore($t6, $t7, $t8);

    // move_to<0x1::fungible_asset::FungibleStore>($t9, $t4) on_abort goto L7 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:826:9+145
    if ($ResourceExists($1_fungible_asset_FungibleStore_$memory, $t4->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_fungible_asset_FungibleStore_$memory := $ResourceUpdate($1_fungible_asset_FungibleStore_$memory, $t4->$addr, $t9);
    }
    if ($abort_flag) {
        assume {:print "$at(167,34849,34994)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(48,25):", $t5} $t5 == $t5;
        goto L7;
    }

    // $t10 := fungible_asset::is_untransferable<#0>($t1) on_abort goto L7 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:832:13+27
    assume {:print "$at(167,35009,35036)"} true;
    call $t10 := $1_fungible_asset_is_untransferable'$1_fungible_asset_Metadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(167,35009,35036)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(48,25):", $t5} $t5 == $t5;
        goto L7;
    }

    // if ($t10) goto L0 else goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:832:9+101
    if ($t10) { goto L0; } else { goto L2; }

    // label L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:833:13+43
    assume {:print "$at(167,35052,35095)"} true;
L0:

    // object::set_untransferable($t0) on_abort goto L7 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:833:13+43
    assume {:print "$at(167,35052,35095)"} true;
    call $1_object_set_untransferable($t0);
    if ($abort_flag) {
        assume {:print "$at(167,35052,35095)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(48,25):", $t5} $t5 == $t5;
        goto L7;
    }

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:256:9+58
    assume {:print "$at(167,10485,10543)"} true;
L2:

    // $t11 := features::default_to_concurrent_fungible_balance_enabled() on_abort goto L7 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:256:9+58
    assume {:print "$at(167,10485,10543)"} true;
    call $t11 := $1_features_default_to_concurrent_fungible_balance_enabled();
    if ($abort_flag) {
        assume {:print "$at(167,10485,10543)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(48,25):", $t5} $t5 == $t5;
        goto L7;
    }

    // if ($t11) goto L4 else goto L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:836:9+203
    assume {:print "$at(167,35117,35320)"} true;
    if ($t11) { goto L4; } else { goto L3; }

    // label L4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:837:21+9
    assume {:print "$at(167,35185,35194)"} true;
L4:

    // $t12 := aggregator_v2::create_unbounded_aggregator<u64>() on_abort goto L7 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:838:26+44
    assume {:print "$at(167,35249,35293)"} true;
    call $t12 := $1_aggregator_v2_create_unbounded_aggregator'u64'();
    if ($abort_flag) {
        assume {:print "$at(167,35249,35293)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(48,25):", $t5} $t5 == $t5;
        goto L7;
    }

    // $t13 := pack 0x1::fungible_asset::ConcurrentFungibleBalance($t12) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:837:32+112
    assume {:print "$at(167,35196,35308)"} true;
    $t13 := $1_fungible_asset_ConcurrentFungibleBalance($t12);

    // move_to<0x1::fungible_asset::ConcurrentFungibleBalance>($t13, $t4) on_abort goto L7 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:837:13+132
    if ($ResourceExists($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t4->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_fungible_asset_ConcurrentFungibleBalance_$memory := $ResourceUpdate($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t4->$addr, $t13);
    }
    if ($abort_flag) {
        assume {:print "$at(167,35177,35309)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(48,25):", $t5} $t5 == $t5;
        goto L7;
    }

    // label L5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:842:9+67
    assume {:print "$at(167,35331,35398)"} true;
L5:

    // $t14 := object::object_from_constructor_ref<0x1::fungible_asset::FungibleStore>($t0) on_abort goto L7 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:842:9+67
    assume {:print "$at(167,35331,35398)"} true;
    call $t14 := $1_object_object_from_constructor_ref'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(167,35331,35398)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(48,25):", $t5} $t5 == $t5;
        goto L7;
    }

    // trace_return[0]($t14) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:824:30+632
    assume {:print "$at(167,34772,35404)"} true;
    assume {:print "$track_return(48,25,0):", $t14} $t14 == $t14;

    // goto L6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:824:30+632
    goto L6;

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:836:9+203
    assume {:print "$at(167,35117,35320)"} true;
L3:

    // goto L5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:836:9+203
    assume {:print "$at(167,35117,35320)"} true;
    goto L5;

    // label L6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:843:5+1
    assume {:print "$at(167,35403,35404)"} true;
L6:

    // return $t14 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:843:5+1
    assume {:print "$at(167,35403,35404)"} true;
    $ret0 := $t14;
    return;

    // label L7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:843:5+1
L7:

    // abort($t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:843:5+1
    assume {:print "$at(167,35403,35404)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun fungible_asset::decrease_supply<0x1::fungible_asset::Metadata> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1285:5+1030
procedure {:inline 1} $1_fungible_asset_decrease_supply'$1_fungible_asset_Metadata'(_$t0: $1_object_Object'$1_fungible_asset_Metadata', _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $Mutation ($1_fungible_asset_Supply);
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: $Mutation ($1_fungible_asset_ConcurrentSupply);
    var $t10: $Mutation ($1_aggregator_v2_Aggregator'u128');
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: bool;
    var $t17: $Mutation ($1_fungible_asset_Supply);
    var $t18: int;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: $Mutation (int);
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $t1: int;
    var $temp_0'$1_fungible_asset_Supply': $1_fungible_asset_Supply;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[metadata]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1285:5+1
    assume {:print "$at(167,53487,53488)"} true;
    assume {:print "$track_local(48,26,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1285:5+1
    assume {:print "$track_local(48,26,1):", $t1} $t1 == $t1;

    // $t4 := 0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1286:23+1
    assume {:print "$at(167,53608,53609)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := ==($t1, $t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1286:13+11
    $t5 := $IsEqual'u64'($t1, $t4);

    // if ($t5) goto L1 else goto L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1286:9+47
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1287:13+6
    assume {:print "$at(167,53625,53631)"} true;
L1:

    // goto L14 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1287:13+6
    assume {:print "$at(167,53625,53631)"} true;
    goto L14;

    // label L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1289:32+32
    assume {:print "$at(167,53674,53706)"} true;
L0:

    // $t6 := object::object_address<#0>($t0) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1289:32+32
    assume {:print "$at(167,53674,53706)"} true;
    call $t6 := $1_object_object_address'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(167,53674,53706)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,26):", $t7} $t7 == $t7;
        goto L15;
    }

    // trace_local[metadata_address]($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1289:32+32
    assume {:print "$track_local(48,26,2):", $t6} $t6 == $t6;

    // $t8 := exists<0x1::fungible_asset::ConcurrentSupply>($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1291:13+42
    assume {:print "$at(167,53721,53763)"} true;
    $t8 := $ResourceExists($1_fungible_asset_ConcurrentSupply_$memory, $t6);

    // if ($t8) goto L3 else goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1291:9+794
    if ($t8) { goto L3; } else { goto L2; }

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1292:26+53
    assume {:print "$at(167,53792,53845)"} true;
L3:

    // $t9 := borrow_global<0x1::fungible_asset::ConcurrentSupply>($t6) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1292:26+53
    assume {:print "$at(167,53792,53845)"} true;
    if (!$ResourceExists($1_fungible_asset_ConcurrentSupply_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t6), EmptyVec(), $ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $t6));
    }
    if ($abort_flag) {
        assume {:print "$at(167,53792,53845)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,26):", $t7} $t7 == $t7;
        goto L15;
    }

    // $t10 := borrow_field<0x1::fungible_asset::ConcurrentSupply>.current($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1295:17+38
    assume {:print "$at(167,53885,53923)"} true;
    $t10 := $ChildMutation($t9, 0, $Dereference($t9)->$current);

    // $t11 := (u128)($t1) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1295:40+14
    call $t11 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(167,53908,53922)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,26):", $t7} $t7 == $t7;
        goto L15;
    }

    // $t12 := aggregator_v2::try_sub<u128>($t10, $t11) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1295:17+38
    call $t12,$t10 := $1_aggregator_v2_try_sub'u128'($t10, $t11);
    if ($abort_flag) {
        assume {:print "$at(167,53885,53923)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,26):", $t7} $t7 == $t7;
        goto L15;
    }

    // write_back[Reference($t9).current (0x1::aggregator_v2::Aggregator<u128>)]($t10) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1295:17+38
    $t9 := $UpdateMutation($t9, $Update'$1_fungible_asset_ConcurrentSupply'_current($Dereference($t9), $Dereference($t10)));

    // write_back[0x1::fungible_asset::ConcurrentSupply@]($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1295:17+38
    $1_fungible_asset_ConcurrentSupply_$memory := $ResourceUpdate($1_fungible_asset_ConcurrentSupply_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // if ($t12) goto L5 else goto L4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1294:13+6
    assume {:print "$at(167,53860,53866)"} true;
    if ($t12) { goto L5; } else { goto L4; }

    // label L5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1294:13+6
L5:

    // label L6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1285:102+933
    assume {:print "$at(167,53584,54517)"} true;
L6:

    // goto L14 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1285:102+933
    assume {:print "$at(167,53584,54517)"} true;
    goto L14;

    // label L4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1296:37+17
    assume {:print "$at(167,53961,53978)"} true;
L4:

    // $t13 := 20 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1296:37+17
    assume {:print "$at(167,53961,53978)"} true;
    $t13 := 20;
    assume $IsValid'u64'($t13);

    // $t14 := error::out_of_range($t13) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1296:17+38
    call $t14 := $1_error_out_of_range($t13);
    if ($abort_flag) {
        assume {:print "$at(167,53941,53979)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,26):", $t7} $t7 == $t7;
        goto L15;
    }

    // trace_abort($t14) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1294:13+6
    assume {:print "$at(167,53860,53866)"} true;
    assume {:print "$track_abort(48,26):", $t14} $t14 == $t14;

    // $t7 := move($t14) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1294:13+6
    $t7 := $t14;

    // goto L15 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1294:13+6
    goto L15;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1298:20+32
    assume {:print "$at(167,54014,54046)"} true;
L2:

    // $t15 := exists<0x1::fungible_asset::Supply>($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1298:20+32
    assume {:print "$at(167,54014,54046)"} true;
    $t15 := $ResourceExists($1_fungible_asset_Supply_$memory, $t6);

    // if ($t15) goto L8 else goto L7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1298:16+501
    if ($t15) { goto L8; } else { goto L7; }

    // label L8 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1299:21+32
    assume {:print "$at(167,54070,54102)"} true;
L8:

    // $t16 := exists<0x1::fungible_asset::Supply>($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1299:21+32
    assume {:print "$at(167,54070,54102)"} true;
    $t16 := $ResourceExists($1_fungible_asset_Supply_$memory, $t6);

    // if ($t16) goto L10 else goto L9 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1299:13+6
    if ($t16) { goto L10; } else { goto L9; }

    // label L10 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1300:26+43
    assume {:print "$at(167,54167,54210)"} true;
L10:

    // $t17 := borrow_global<0x1::fungible_asset::Supply>($t6) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1300:26+43
    assume {:print "$at(167,54167,54210)"} true;
    if (!$ResourceExists($1_fungible_asset_Supply_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t17 := $Mutation($Global($t6), EmptyVec(), $ResourceValue($1_fungible_asset_Supply_$memory, $t6));
    }
    if ($abort_flag) {
        assume {:print "$at(167,54167,54210)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,26):", $t7} $t7 == $t7;
        goto L15;
    }

    // trace_local[supply]($t17) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1300:26+43
    $temp_0'$1_fungible_asset_Supply' := $Dereference($t17);
    assume {:print "$track_local(48,26,3):", $temp_0'$1_fungible_asset_Supply'} $temp_0'$1_fungible_asset_Supply' == $temp_0'$1_fungible_asset_Supply';

    // $t18 := get_field<0x1::fungible_asset::Supply>.current($t17) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1302:17+14
    assume {:print "$at(167,54249,54263)"} true;
    $t18 := $Dereference($t17)->$current;

    // $t19 := (u128)($t1) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1302:35+16
    call $t19 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(167,54267,54283)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,26):", $t7} $t7 == $t7;
        goto L15;
    }

    // $t20 := >=($t18, $t19) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1302:17+34
    call $t20 := $Ge($t18, $t19);

    // if ($t20) goto L12 else goto L11 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1301:13+6
    assume {:print "$at(167,54224,54230)"} true;
    if ($t20) { goto L12; } else { goto L11; }

    // label L12 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1305:30+14
    assume {:print "$at(167,54385,54399)"} true;
L12:

    // $t21 := get_field<0x1::fungible_asset::Supply>.current($t17) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1305:30+14
    assume {:print "$at(167,54385,54399)"} true;
    $t21 := $Dereference($t17)->$current;

    // $t22 := (u128)($t1) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1305:47+16
    call $t22 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(167,54402,54418)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,26):", $t7} $t7 == $t7;
        goto L15;
    }

    // $t23 := -($t21, $t22) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1305:30+33
    call $t23 := $Sub($t21, $t22);
    if ($abort_flag) {
        assume {:print "$at(167,54385,54418)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,26):", $t7} $t7 == $t7;
        goto L15;
    }

    // $t24 := borrow_field<0x1::fungible_asset::Supply>.current($t17) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1305:13+14
    $t24 := $ChildMutation($t17, 0, $Dereference($t17)->$current);

    // write_ref($t24, $t23) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1305:13+50
    $t24 := $UpdateMutation($t24, $t23);

    // write_back[Reference($t17).current (u128)]($t24) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1305:13+50
    $t17 := $UpdateMutation($t17, $Update'$1_fungible_asset_Supply'_current($Dereference($t17), $Dereference($t24)));

    // pack_ref_deep($t17) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1305:13+50

    // write_back[0x1::fungible_asset::Supply@]($t17) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1305:13+50
    $1_fungible_asset_Supply_$memory := $ResourceUpdate($1_fungible_asset_Supply_$memory, $GlobalLocationAddress($t17),
        $Dereference($t17));

    // goto L6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1298:54+381
    assume {:print "$at(167,54048,54429)"} true;
    goto L6;

    // label L11 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1301:13+6
    assume {:print "$at(167,54224,54230)"} true;
L11:

    // pack_ref_deep($t17) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1301:13+6
    assume {:print "$at(167,54224,54230)"} true;

    // drop($t17) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1301:13+6

    // $t25 := 20 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1303:38+17
    assume {:print "$at(167,54322,54339)"} true;
    $t25 := 20;
    assume $IsValid'u64'($t25);

    // $t26 := error::invalid_state($t25) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1303:17+39
    call $t26 := $1_error_invalid_state($t25);
    if ($abort_flag) {
        assume {:print "$at(167,54301,54340)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,26):", $t7} $t7 == $t7;
        goto L15;
    }

    // trace_abort($t26) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1301:13+6
    assume {:print "$at(167,54224,54230)"} true;
    assume {:print "$track_abort(48,26):", $t26} $t26 == $t26;

    // $t7 := move($t26) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1301:13+6
    $t7 := $t26;

    // goto L15 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1301:13+6
    goto L15;

    // label L9 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1299:72+17
    assume {:print "$at(167,54121,54138)"} true;
L9:

    // $t27 := 21 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1299:72+17
    assume {:print "$at(167,54121,54138)"} true;
    $t27 := 21;
    assume $IsValid'u64'($t27);

    // $t28 := error::not_found($t27) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1299:55+35
    call $t28 := $1_error_not_found($t27);
    if ($abort_flag) {
        assume {:print "$at(167,54104,54139)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,26):", $t7} $t7 == $t7;
        goto L15;
    }

    // trace_abort($t28) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1299:13+6
    assume {:print "$at(167,54062,54068)"} true;
    assume {:print "$track_abort(48,26):", $t28} $t28 == $t28;

    // $t7 := move($t28) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1299:13+6
    $t7 := $t28;

    // goto L15 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1299:13+6
    goto L15;

    // label L7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1307:21+5
    assume {:print "$at(167,54457,54462)"} true;
L7:

    // goto L13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1307:21+5
    assume {:print "$at(167,54457,54462)"} true;
    goto L13;

    // goto L6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1307:13+6
    goto L6;

    // label L13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1307:45+17
L13:

    // $t29 := 21 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1307:45+17
    assume {:print "$at(167,54481,54498)"} true;
    $t29 := 21;
    assume $IsValid'u64'($t29);

    // $t30 := error::not_found($t29) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1307:28+35
    call $t30 := $1_error_not_found($t29);
    if ($abort_flag) {
        assume {:print "$at(167,54464,54499)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,26):", $t7} $t7 == $t7;
        goto L15;
    }

    // trace_abort($t30) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1307:13+6
    assume {:print "$at(167,54449,54455)"} true;
    assume {:print "$track_abort(48,26):", $t30} $t30 == $t30;

    // $t7 := move($t30) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1307:13+6
    $t7 := $t30;

    // goto L15 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1307:13+6
    goto L15;

    // label L14 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1309:5+1
    assume {:print "$at(167,54516,54517)"} true;
L14:

    // return () at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1309:5+1
    assume {:print "$at(167,54516,54517)"} true;
    return;

    // label L15 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1309:5+1
L15:

    // abort($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1309:5+1
    assume {:print "$at(167,54516,54517)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun fungible_asset::deposit_with_ref<0x1::fungible_asset::FungibleStore> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1064:5+390
procedure {:inline 1} $1_fungible_asset_deposit_with_ref'$1_fungible_asset_FungibleStore'(_$t0: $1_fungible_asset_TransferRef, _$t1: $1_object_Object'$1_fungible_asset_FungibleStore', _$t2: $1_fungible_asset_FungibleAsset) returns ()
{
    // declare local variables
    var $t3: $1_object_Object'$1_fungible_asset_Metadata';
    var $t4: $1_object_Object'$1_fungible_asset_Metadata';
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t0: $1_fungible_asset_TransferRef;
    var $t1: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t2: $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_TransferRef': $1_fungible_asset_TransferRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1064:5+1
    assume {:print "$at(167,44222,44223)"} true;
    assume {:print "$track_local(48,30,0):", $t0} $t0 == $t0;

    // trace_local[store]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1064:5+1
    assume {:print "$track_local(48,30,1):", $t1} $t1 == $t1;

    // trace_local[fa]($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1064:5+1
    assume {:print "$track_local(48,30,2):", $t2} $t2 == $t2;

    // $t3 := get_field<0x1::fungible_asset::TransferRef>.metadata($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1070:13+12
    assume {:print "$at(167,44425,44437)"} true;
    $t3 := $t0->$metadata;

    // $t4 := get_field<0x1::fungible_asset::FungibleAsset>.metadata($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1070:29+11
    $t4 := $t2->$metadata;

    // $t5 := ==($t3, $t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1070:13+27
    $t5 := $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''($t3, $t4);

    // if ($t5) goto L1 else goto L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1069:9+6
    assume {:print "$at(167,44404,44410)"} true;
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1073:50+6
    assume {:print "$at(167,44593,44599)"} true;
L1:

    // $t6 := object::object_address<#0>($t1) on_abort goto L3 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1073:27+30
    assume {:print "$at(167,44570,44600)"} true;
    call $t6 := $1_object_object_address'$1_fungible_asset_FungibleStore'($t1);
    if ($abort_flag) {
        assume {:print "$at(167,44570,44600)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,30):", $t7} $t7 == $t7;
        goto L3;
    }

    // fungible_asset::unchecked_deposit($t6, $t2) on_abort goto L3 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1073:9+53
    call $1_fungible_asset_unchecked_deposit($t6, $t2);
    if ($abort_flag) {
        assume {:print "$at(167,44552,44605)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,30):", $t7} $t7 == $t7;
        goto L3;
    }

    // goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1068:57+218
    assume {:print "$at(167,44394,44612)"} true;
    goto L2;

    // label L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1071:37+41
    assume {:print "$at(167,44490,44531)"} true;
L0:

    // $t8 := 2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1071:37+41
    assume {:print "$at(167,44490,44531)"} true;
    $t8 := 2;
    assume $IsValid'u64'($t8);

    // $t9 := error::invalid_argument($t8) on_abort goto L3 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1071:13+66
    call $t9 := $1_error_invalid_argument($t8);
    if ($abort_flag) {
        assume {:print "$at(167,44466,44532)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,30):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_abort($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1069:9+6
    assume {:print "$at(167,44404,44410)"} true;
    assume {:print "$track_abort(48,30):", $t9} $t9 == $t9;

    // $t7 := move($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1069:9+6
    $t7 := $t9;

    // goto L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1069:9+6
    goto L3;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1074:5+1
    assume {:print "$at(167,44611,44612)"} true;
L2:

    // return () at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1074:5+1
    assume {:print "$at(167,44611,44612)"} true;
    return;

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1074:5+1
L3:

    // abort($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1074:5+1
    assume {:print "$at(167,44611,44612)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun fungible_asset::generate_burn_ref [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:481:5+195
procedure {:inline 1} $1_fungible_asset_generate_burn_ref(_$t0: $1_object_ConstructorRef) returns ($ret0: $1_fungible_asset_BurnRef)
{
    // declare local variables
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $t2: int;
    var $t3: $1_fungible_asset_BurnRef;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_fungible_asset_BurnRef': $1_fungible_asset_BurnRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[constructor_ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:481:5+1
    assume {:print "$at(167,19987,19988)"} true;
    assume {:print "$track_local(48,35,0):", $t0} $t0 == $t0;

    // $t1 := object::object_from_constructor_ref<0x1::fungible_asset::Metadata>($t0) on_abort goto L2 with $t2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:482:24+62
    assume {:print "$at(167,20084,20146)"} true;
    call $t1 := $1_object_object_from_constructor_ref'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(167,20084,20146)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(48,35):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := pack 0x1::fungible_asset::BurnRef($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:483:9+20
    assume {:print "$at(167,20156,20176)"} true;
    $t3 := $1_fungible_asset_BurnRef($t1);

    // trace_return[0]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:483:9+20
    assume {:print "$track_return(48,35,0):", $t3} $t3 == $t3;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:484:5+1
    assume {:print "$at(167,20181,20182)"} true;
L1:

    // return $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:484:5+1
    assume {:print "$at(167,20181,20182)"} true;
    $ret0 := $t3;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:484:5+1
L2:

    // abort($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:484:5+1
    assume {:print "$at(167,20181,20182)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun fungible_asset::generate_mint_ref [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:474:5+195
procedure {:inline 1} $1_fungible_asset_generate_mint_ref(_$t0: $1_object_ConstructorRef) returns ($ret0: $1_fungible_asset_MintRef)
{
    // declare local variables
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $t2: int;
    var $t3: $1_fungible_asset_MintRef;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_fungible_asset_MintRef': $1_fungible_asset_MintRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[constructor_ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:474:5+1
    assume {:print "$at(167,19569,19570)"} true;
    assume {:print "$track_local(48,36,0):", $t0} $t0 == $t0;

    // $t1 := object::object_from_constructor_ref<0x1::fungible_asset::Metadata>($t0) on_abort goto L2 with $t2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:475:24+62
    assume {:print "$at(167,19666,19728)"} true;
    call $t1 := $1_object_object_from_constructor_ref'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(167,19666,19728)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(48,36):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := pack 0x1::fungible_asset::MintRef($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:476:9+20
    assume {:print "$at(167,19738,19758)"} true;
    $t3 := $1_fungible_asset_MintRef($t1);

    // trace_return[0]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:476:9+20
    assume {:print "$track_return(48,36,0):", $t3} $t3 == $t3;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:477:5+1
    assume {:print "$at(167,19763,19764)"} true;
L1:

    // return $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:477:5+1
    assume {:print "$at(167,19763,19764)"} true;
    $ret0 := $t3;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:477:5+1
L2:

    // abort($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:477:5+1
    assume {:print "$at(167,19763,19764)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun fungible_asset::increase_supply<0x1::fungible_asset::Metadata> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1257:5+1087
procedure {:inline 1} $1_fungible_asset_increase_supply'$1_fungible_asset_Metadata'(_$t0: $1_object_Object'$1_fungible_asset_Metadata', _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $Mutation ($1_fungible_asset_Supply);
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: $Mutation ($1_fungible_asset_ConcurrentSupply);
    var $t10: $Mutation ($1_aggregator_v2_Aggregator'u128');
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: $Mutation ($1_fungible_asset_Supply);
    var $t17: $1_option_Option'u128';
    var $t18: bool;
    var $t19: $Mutation ($1_option_Option'u128');
    var $t20: $Mutation (int);
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: $Mutation (int);
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $t1: int;
    var $temp_0'$1_fungible_asset_Supply': $1_fungible_asset_Supply;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[metadata]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1257:5+1
    assume {:print "$at(167,52334,52335)"} true;
    assume {:print "$track_local(48,46,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1257:5+1
    assume {:print "$track_local(48,46,1):", $t1} $t1 == $t1;

    // $t4 := 0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1258:23+1
    assume {:print "$at(167,52455,52456)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := ==($t1, $t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1258:13+11
    $t5 := $IsEqual'u64'($t1, $t4);

    // if ($t5) goto L1 else goto L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1258:9+47
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1259:13+6
    assume {:print "$at(167,52472,52478)"} true;
L1:

    // goto L14 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1259:13+6
    assume {:print "$at(167,52472,52478)"} true;
    goto L14;

    // label L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1261:32+32
    assume {:print "$at(167,52521,52553)"} true;
L0:

    // $t6 := object::object_address<#0>($t0) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1261:32+32
    assume {:print "$at(167,52521,52553)"} true;
    call $t6 := $1_object_object_address'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(167,52521,52553)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // trace_local[metadata_address]($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1261:32+32
    assume {:print "$track_local(48,46,2):", $t6} $t6 == $t6;

    // $t8 := exists<0x1::fungible_asset::ConcurrentSupply>($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1263:13+42
    assume {:print "$at(167,52568,52610)"} true;
    $t8 := $ResourceExists($1_fungible_asset_ConcurrentSupply_$memory, $t6);

    // if ($t8) goto L3 else goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1263:9+851
    if ($t8) { goto L3; } else { goto L2; }

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1264:26+53
    assume {:print "$at(167,52639,52692)"} true;
L3:

    // $t9 := borrow_global<0x1::fungible_asset::ConcurrentSupply>($t6) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1264:26+53
    assume {:print "$at(167,52639,52692)"} true;
    if (!$ResourceExists($1_fungible_asset_ConcurrentSupply_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t6), EmptyVec(), $ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $t6));
    }
    if ($abort_flag) {
        assume {:print "$at(167,52639,52692)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // $t10 := borrow_field<0x1::fungible_asset::ConcurrentSupply>.current($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1266:17+38
    assume {:print "$at(167,52731,52769)"} true;
    $t10 := $ChildMutation($t9, 0, $Dereference($t9)->$current);

    // $t11 := (u128)($t1) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1266:40+14
    call $t11 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(167,52754,52768)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // $t12 := aggregator_v2::try_add<u128>($t10, $t11) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1266:17+38
    call $t12,$t10 := $1_aggregator_v2_try_add'u128'($t10, $t11);
    if ($abort_flag) {
        assume {:print "$at(167,52731,52769)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // write_back[Reference($t9).current (0x1::aggregator_v2::Aggregator<u128>)]($t10) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1266:17+38
    $t9 := $UpdateMutation($t9, $Update'$1_fungible_asset_ConcurrentSupply'_current($Dereference($t9), $Dereference($t10)));

    // write_back[0x1::fungible_asset::ConcurrentSupply@]($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1266:17+38
    $1_fungible_asset_ConcurrentSupply_$memory := $ResourceUpdate($1_fungible_asset_ConcurrentSupply_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // if ($t12) goto L5 else goto L4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1265:13+6
    assume {:print "$at(167,52706,52712)"} true;
    if ($t12) { goto L5; } else { goto L4; }

    // label L5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1265:13+6
L5:

    // label L6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1257:102+990
    assume {:print "$at(167,52431,53421)"} true;
L6:

    // goto L14 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1257:102+990
    assume {:print "$at(167,52431,53421)"} true;
    goto L14;

    // label L4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1267:37+20
    assume {:print "$at(167,52807,52827)"} true;
L4:

    // $t13 := 5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1267:37+20
    assume {:print "$at(167,52807,52827)"} true;
    $t13 := 5;
    assume $IsValid'u64'($t13);

    // $t14 := error::out_of_range($t13) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1267:17+41
    call $t14 := $1_error_out_of_range($t13);
    if ($abort_flag) {
        assume {:print "$at(167,52787,52828)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // trace_abort($t14) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1265:13+6
    assume {:print "$at(167,52706,52712)"} true;
    assume {:print "$track_abort(48,46):", $t14} $t14 == $t14;

    // $t7 := move($t14) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1265:13+6
    $t7 := $t14;

    // goto L15 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1265:13+6
    goto L15;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1269:20+32
    assume {:print "$at(167,52863,52895)"} true;
L2:

    // $t15 := exists<0x1::fungible_asset::Supply>($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1269:20+32
    assume {:print "$at(167,52863,52895)"} true;
    $t15 := $ResourceExists($1_fungible_asset_Supply_$memory, $t6);

    // if ($t15) goto L8 else goto L7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1269:16+556
    if ($t15) { goto L8; } else { goto L7; }

    // label L8 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1270:26+43
    assume {:print "$at(167,52924,52967)"} true;
L8:

    // $t16 := borrow_global<0x1::fungible_asset::Supply>($t6) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1270:26+43
    assume {:print "$at(167,52924,52967)"} true;
    if (!$ResourceExists($1_fungible_asset_Supply_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t16 := $Mutation($Global($t6), EmptyVec(), $ResourceValue($1_fungible_asset_Supply_$memory, $t6));
    }
    if ($abort_flag) {
        assume {:print "$at(167,52924,52967)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // trace_local[supply]($t16) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1270:26+43
    $temp_0'$1_fungible_asset_Supply' := $Dereference($t16);
    assume {:print "$track_local(48,46,3):", $temp_0'$1_fungible_asset_Supply'} $temp_0'$1_fungible_asset_Supply' == $temp_0'$1_fungible_asset_Supply';

    // $t17 := get_field<0x1::fungible_asset::Supply>.maximum($t16) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1271:33+15
    assume {:print "$at(167,53001,53016)"} true;
    $t17 := $Dereference($t16)->$maximum;

    // $t18 := opaque begin: option::is_some<u128>($t17) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1271:17+32

    // assume WellFormed($t18) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1271:17+32
    assume $IsValid'bool'($t18);

    // assume Eq<bool>($t18, option::spec_is_some<u128>($t17)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1271:17+32
    assume $IsEqual'bool'($t18, $1_option_spec_is_some'u128'($t17));

    // $t18 := opaque end: option::is_some<u128>($t17) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1271:17+32

    // if ($t18) goto L9 else goto L11 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1271:13+288
    if ($t18) { goto L9; } else { goto L11; }

    // label L9 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1272:47+19
    assume {:print "$at(167,53067,53086)"} true;
L9:

    // $t19 := borrow_field<0x1::fungible_asset::Supply>.maximum($t16) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1272:47+19
    assume {:print "$at(167,53067,53086)"} true;
    $t19 := $ChildMutation($t16, 1, $Dereference($t16)->$maximum);

    // $t20 := option::borrow_mut<u128>($t19) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1272:28+39
    call $t20,$t19 := $1_option_borrow_mut'u128'($t19);
    if ($abort_flag) {
        assume {:print "$at(167,53048,53087)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // $t21 := read_ref($t20) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1272:27+40
    $t21 := $Dereference($t20);

    // write_back[Reference($t16).maximum (0x1::option::Option<u128>)]($t19) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1272:27+40
    $t16 := $UpdateMutation($t16, $Update'$1_fungible_asset_Supply'_maximum($Dereference($t16), $Dereference($t19)));

    // $t22 := get_field<0x1::fungible_asset::Supply>.current($t16) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1274:27+14
    assume {:print "$at(167,53140,53154)"} true;
    $t22 := $Dereference($t16)->$current;

    // $t23 := -($t21, $t22) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1274:21+20
    call $t23 := $Sub($t21, $t22);
    if ($abort_flag) {
        assume {:print "$at(167,53134,53154)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // $t24 := (u128)($t1) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1274:45+16
    call $t24 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(167,53158,53174)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // $t25 := >=($t23, $t24) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1274:21+40
    call $t25 := $Ge($t23, $t24);

    // if ($t25) goto L13 else goto L12 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1273:17+6
    assume {:print "$at(167,53105,53111)"} true;
    if ($t25) { goto L13; } else { goto L12; }

    // label L13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1273:17+6
L13:

    // label L11 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1278:30+14
    assume {:print "$at(167,53300,53314)"} true;
L11:

    // $t26 := get_field<0x1::fungible_asset::Supply>.current($t16) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1278:30+14
    assume {:print "$at(167,53300,53314)"} true;
    $t26 := $Dereference($t16)->$current;

    // $t27 := (u128)($t1) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1278:47+16
    call $t27 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(167,53317,53333)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // $t28 := +($t26, $t27) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1278:30+33
    call $t28 := $AddU128($t26, $t27);
    if ($abort_flag) {
        assume {:print "$at(167,53300,53333)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // $t29 := borrow_field<0x1::fungible_asset::Supply>.current($t16) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1278:13+14
    $t29 := $ChildMutation($t16, 0, $Dereference($t16)->$current);

    // write_ref($t29, $t28) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1278:13+50
    $t29 := $UpdateMutation($t29, $t28);

    // write_back[Reference($t16).current (u128)]($t29) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1278:13+50
    $t16 := $UpdateMutation($t16, $Update'$1_fungible_asset_Supply'_current($Dereference($t16), $Dereference($t29)));

    // pack_ref_deep($t16) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1278:13+50

    // write_back[0x1::fungible_asset::Supply@]($t16) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1278:13+50
    $1_fungible_asset_Supply_$memory := $ResourceUpdate($1_fungible_asset_Supply_$memory, $GlobalLocationAddress($t16),
        $Dereference($t16));

    // goto L6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1278:13+50
    goto L6;

    // label L12 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1273:17+6
    assume {:print "$at(167,53105,53111)"} true;
L12:

    // pack_ref_deep($t16) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1273:17+6
    assume {:print "$at(167,53105,53111)"} true;

    // write_back[0x1::fungible_asset::Supply@]($t16) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1273:17+6
    $1_fungible_asset_Supply_$memory := $ResourceUpdate($1_fungible_asset_Supply_$memory, $GlobalLocationAddress($t16),
        $Dereference($t16));

    // drop($t16) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1273:17+6

    // $t30 := 5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1275:41+20
    assume {:print "$at(167,53216,53236)"} true;
    $t30 := 5;
    assume $IsValid'u64'($t30);

    // $t31 := error::out_of_range($t30) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1275:21+41
    call $t31 := $1_error_out_of_range($t30);
    if ($abort_flag) {
        assume {:print "$at(167,53196,53237)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // trace_abort($t31) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1273:17+6
    assume {:print "$at(167,53105,53111)"} true;
    assume {:print "$track_abort(48,46):", $t31} $t31 == $t31;

    // $t7 := move($t31) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1273:17+6
    $t7 := $t31;

    // goto L15 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1273:17+6
    goto L15;

    // label L7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1280:36+17
    assume {:print "$at(167,53387,53404)"} true;
L7:

    // $t32 := 21 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1280:36+17
    assume {:print "$at(167,53387,53404)"} true;
    $t32 := 21;
    assume $IsValid'u64'($t32);

    // $t33 := error::not_found($t32) on_abort goto L15 with $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1280:19+35
    call $t33 := $1_error_not_found($t32);
    if ($abort_flag) {
        assume {:print "$at(167,53370,53405)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(48,46):", $t7} $t7 == $t7;
        goto L15;
    }

    // trace_abort($t33) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1280:13+41
    assume {:print "$at(167,53364,53405)"} true;
    assume {:print "$track_abort(48,46):", $t33} $t33 == $t33;

    // $t7 := move($t33) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1280:13+41
    $t7 := $t33;

    // goto L15 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1280:13+41
    goto L15;

    // label L14 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1282:5+1
    assume {:print "$at(167,53420,53421)"} true;
L14:

    // return () at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1282:5+1
    assume {:print "$at(167,53420,53421)"} true;
    return;

    // label L15 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1282:5+1
L15:

    // abort($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1282:5+1
    assume {:print "$at(167,53420,53421)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun fungible_asset::metadata_from_asset [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:619:5+96
procedure {:inline 1} $1_fungible_asset_metadata_from_asset(_$t0: $1_fungible_asset_FungibleAsset) returns ($ret0: $1_object_Object'$1_fungible_asset_Metadata')
{
    // declare local variables
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $t0: $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[fa]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:619:5+1
    assume {:print "$at(167,26013,26014)"} true;
    assume {:print "$track_local(48,52,0):", $t0} $t0 == $t0;

    // $t1 := get_field<0x1::fungible_asset::FungibleAsset>.metadata($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:620:9+11
    assume {:print "$at(167,26092,26103)"} true;
    $t1 := $t0->$metadata;

    // trace_return[0]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:620:9+11
    assume {:print "$track_return(48,52,0):", $t1} $t1 == $t1;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:621:5+1
    assume {:print "$at(167,26108,26109)"} true;
L1:

    // return $t1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:621:5+1
    assume {:print "$at(167,26108,26109)"} true;
    $ret0 := $t1;
    return;

}

// fun fungible_asset::mint [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:962:5+177
procedure {:inline 1} $1_fungible_asset_mint(_$t0: $1_fungible_asset_MintRef, _$t1: int) returns ($ret0: $1_fungible_asset_FungibleAsset)
{
    // declare local variables
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: $1_fungible_asset_FungibleAsset;
    var $t4: int;
    var $t0: $1_fungible_asset_MintRef;
    var $t1: int;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_MintRef': $1_fungible_asset_MintRef;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:962:5+1
    assume {:print "$at(167,40524,40525)"} true;
    assume {:print "$track_local(48,53,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:962:5+1
    assume {:print "$track_local(48,53,1):", $t1} $t1 == $t1;

    // $t2 := get_field<0x1::fungible_asset::MintRef>.metadata($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:963:24+12
    assume {:print "$at(167,40642,40654)"} true;
    $t2 := $t0->$metadata;

    // $t3 := fungible_asset::mint_internal($t2, $t1) on_abort goto L2 with $t4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:964:9+31
    assume {:print "$at(167,40664,40695)"} true;
    call $t3 := $1_fungible_asset_mint_internal($t2, $t1);
    if ($abort_flag) {
        assume {:print "$at(167,40664,40695)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(48,53):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:964:9+31
    assume {:print "$track_return(48,53,0):", $t3} $t3 == $t3;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:965:5+1
    assume {:print "$at(167,40700,40701)"} true;
L1:

    // return $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:965:5+1
    assume {:print "$at(167,40700,40701)"} true;
    $ret0 := $t3;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:965:5+1
L2:

    // abort($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:965:5+1
    assume {:print "$at(167,40700,40701)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun fungible_asset::mint_internal [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:968:5+271
procedure {:inline 1} $1_fungible_asset_mint_internal(_$t0: $1_object_Object'$1_fungible_asset_Metadata', _$t1: int) returns ($ret0: $1_fungible_asset_FungibleAsset)
{
    // declare local variables
    var $t2: int;
    var $t3: $1_fungible_asset_FungibleAsset;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $t1: int;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[metadata]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:968:5+1
    assume {:print "$at(167,40762,40763)"} true;
    assume {:print "$track_local(48,54,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:968:5+1
    assume {:print "$track_local(48,54,1):", $t1} $t1 == $t1;

    // fungible_asset::increase_supply<0x1::fungible_asset::Metadata>($t0, $t1) on_abort goto L2 with $t2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:972:9+34
    assume {:print "$at(167,40917,40951)"} true;
    call $1_fungible_asset_increase_supply'$1_fungible_asset_Metadata'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(167,40917,40951)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(48,54):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := pack 0x1::fungible_asset::FungibleAsset($t0, $t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:973:9+66
    assume {:print "$at(167,40961,41027)"} true;
    $t3 := $1_fungible_asset_FungibleAsset($t0, $t1);

    // trace_return[0]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:971:56+126
    assume {:print "$at(167,40907,41033)"} true;
    assume {:print "$track_return(48,54,0):", $t3} $t3 == $t3;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:977:5+1
    assume {:print "$at(167,41032,41033)"} true;
L1:

    // return $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:977:5+1
    assume {:print "$at(167,41032,41033)"} true;
    $ret0 := $t3;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:977:5+1
L2:

    // abort($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:977:5+1
    assume {:print "$at(167,41032,41033)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun fungible_asset::set_frozen_flag<0x1::fungible_asset::FungibleStore> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:987:5+345
procedure {:inline 1} $1_fungible_asset_set_frozen_flag'$1_fungible_asset_FungibleStore'(_$t0: $1_fungible_asset_TransferRef, _$t1: $1_object_Object'$1_fungible_asset_FungibleStore', _$t2: bool) returns ()
{
    // declare local variables
    var $t3: $1_object_Object'$1_fungible_asset_Metadata';
    var $t4: $1_object_Object'$1_fungible_asset_Metadata';
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t0: $1_fungible_asset_TransferRef;
    var $t1: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t2: bool;
    var $temp_0'$1_fungible_asset_TransferRef': $1_fungible_asset_TransferRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:987:5+1
    assume {:print "$at(167,41519,41520)"} true;
    assume {:print "$track_local(48,63,0):", $t0} $t0 == $t0;

    // trace_local[store]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:987:5+1
    assume {:print "$track_local(48,63,1):", $t1} $t1 == $t1;

    // trace_local[frozen]($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:987:5+1
    assume {:print "$track_local(48,63,2):", $t2} $t2 == $t2;

    // $t3 := get_field<0x1::fungible_asset::TransferRef>.metadata($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:993:13+12
    assume {:print "$at(167,41690,41702)"} true;
    $t3 := $t0->$metadata;

    // $t4 := fungible_asset::store_metadata<#0>($t1) on_abort goto L3 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:993:29+21
    call $t4 := $1_fungible_asset_store_metadata'$1_fungible_asset_FungibleStore'($t1);
    if ($abort_flag) {
        assume {:print "$at(167,41706,41727)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(48,63):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t6 := ==($t3, $t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:993:13+37
    $t6 := $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''($t3, $t4);

    // if ($t6) goto L1 else goto L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:992:9+6
    assume {:print "$at(167,41669,41675)"} true;
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:996:34+5
    assume {:print "$at(167,41844,41849)"} true;
L1:

    // fungible_asset::set_frozen_flag_internal<#0>($t1, $t2) on_abort goto L3 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:996:9+39
    assume {:print "$at(167,41819,41858)"} true;
    call $1_fungible_asset_set_frozen_flag_internal'$1_fungible_asset_FungibleStore'($t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(167,41819,41858)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(48,63):", $t5} $t5 == $t5;
        goto L3;
    }

    // goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:991:30+205
    assume {:print "$at(167,41659,41864)"} true;
    goto L2;

    // label L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:994:37+32
    assume {:print "$at(167,41765,41797)"} true;
L0:

    // $t7 := 9 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:994:37+32
    assume {:print "$at(167,41765,41797)"} true;
    $t7 := 9;
    assume $IsValid'u64'($t7);

    // $t8 := error::invalid_argument($t7) on_abort goto L3 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:994:13+57
    call $t8 := $1_error_invalid_argument($t7);
    if ($abort_flag) {
        assume {:print "$at(167,41741,41798)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(48,63):", $t5} $t5 == $t5;
        goto L3;
    }

    // trace_abort($t8) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:992:9+6
    assume {:print "$at(167,41669,41675)"} true;
    assume {:print "$track_abort(48,63):", $t8} $t8 == $t8;

    // $t5 := move($t8) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:992:9+6
    $t5 := $t8;

    // goto L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:992:9+6
    goto L3;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:997:5+1
    assume {:print "$at(167,41863,41864)"} true;
L2:

    // return () at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:997:5+1
    assume {:print "$at(167,41863,41864)"} true;
    return;

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:997:5+1
L3:

    // abort($t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:997:5+1
    assume {:print "$at(167,41863,41864)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun fungible_asset::set_frozen_flag_internal<0x1::fungible_asset::FungibleStore> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:999:5+323
procedure {:inline 1} $1_fungible_asset_set_frozen_flag_internal'$1_fungible_asset_FungibleStore'(_$t0: $1_object_Object'$1_fungible_asset_FungibleStore', _$t1: bool) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $Mutation (bool);
    var $t4: int;
    var $t5: int;
    var $t6: $Mutation ($1_fungible_asset_FungibleStore);
    var $t7: $Mutation (bool);
    var $t8: $1_fungible_asset_Frozen;
    var $t0: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t1: bool;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[store]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:999:5+1
    assume {:print "$at(167,41870,41871)"} true;
    assume {:print "$track_local(48,64,0):", $t0} $t0 == $t0;

    // trace_local[frozen]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:999:5+1
    assume {:print "$track_local(48,64,1):", $t1} $t1 == $t1;

    // $t4 := object::object_address<#0>($t0) on_abort goto L2 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1003:26+30
    assume {:print "$at(167,42026,42056)"} true;
    call $t4 := $1_object_object_address'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(167,42026,42056)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(48,64):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[store_addr]($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1003:26+30
    assume {:print "$track_local(48,64,2):", $t4} $t4 == $t4;

    // $t6 := borrow_global<0x1::fungible_asset::FungibleStore>($t4) on_abort goto L2 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1004:9+44
    assume {:print "$at(167,42066,42110)"} true;
    if (!$ResourceExists($1_fungible_asset_FungibleStore_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $Mutation($Global($t4), EmptyVec(), $ResourceValue($1_fungible_asset_FungibleStore_$memory, $t4));
    }
    if ($abort_flag) {
        assume {:print "$at(167,42066,42110)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(48,64):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t7 := borrow_field<0x1::fungible_asset::FungibleStore>.frozen($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1004:9+51
    $t7 := $ChildMutation($t6, 2, $Dereference($t6)->$frozen);

    // trace_local[$t4]($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1004:9+60
    $temp_0'bool' := $Dereference($t7);
    assume {:print "$track_local(48,64,3):", $temp_0'bool'} $temp_0'bool' == $temp_0'bool';

    // write_ref($t7, $t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1004:9+60
    $t7 := $UpdateMutation($t7, $t1);

    // write_back[Reference($t6).frozen (bool)]($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1004:9+60
    $t6 := $UpdateMutation($t6, $Update'$1_fungible_asset_FungibleStore'_frozen($Dereference($t6), $Dereference($t7)));

    // write_back[0x1::fungible_asset::FungibleStore@]($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1004:9+60
    $1_fungible_asset_FungibleStore_$memory := $ResourceUpdate($1_fungible_asset_FungibleStore_$memory, $GlobalLocationAddress($t6),
        $Dereference($t6));

    // $t8 := pack 0x1::fungible_asset::Frozen($t4, $t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1006:21+36
    assume {:print "$at(167,42149,42185)"} true;
    $t8 := $1_fungible_asset_Frozen($t4, $t1);

    // opaque begin: event::emit<0x1::fungible_asset::Frozen>($t8) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1006:9+49

    // opaque end: event::emit<0x1::fungible_asset::Frozen>($t8) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1006:9+49

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1007:5+1
    assume {:print "$at(167,42192,42193)"} true;
L1:

    // return () at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1007:5+1
    assume {:print "$at(167,42192,42193)"} true;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1007:5+1
L2:

    // abort($t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1007:5+1
    assume {:print "$at(167,42192,42193)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun fungible_asset::store_exists [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:603:5+88
procedure {:inline 1} $1_fungible_asset_store_exists(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[store]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:603:5+1
    assume {:print "$at(167,25434,25435)"} true;
    assume {:print "$track_local(48,65,0):", $t0} $t0 == $t0;

    // $t1 := exists<0x1::fungible_asset::FungibleStore>($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:609:9+28
    assume {:print "$at(167,25660,25688)"} true;
    $t1 := $ResourceExists($1_fungible_asset_FungibleStore_$memory, $t0);

    // trace_return[0]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:609:9+28
    assume {:print "$track_return(48,65,0):", $t1} $t1 == $t1;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:605:5+1
    assume {:print "$at(167,25521,25522)"} true;
L1:

    // return $t1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:605:5+1
    assume {:print "$at(167,25521,25522)"} true;
    $ret0 := $t1;
    return;

}

// fun fungible_asset::store_metadata<0x1::fungible_asset::FungibleStore> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:625:5+147
procedure {:inline 1} $1_fungible_asset_store_metadata'$1_fungible_asset_FungibleStore'(_$t0: $1_object_Object'$1_fungible_asset_FungibleStore') returns ($ret0: $1_object_Object'$1_fungible_asset_Metadata')
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: $1_fungible_asset_FungibleStore;
    var $t6: $1_object_Object'$1_fungible_asset_Metadata';
    var $t7: int;
    var $t8: int;
    var $t0: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[store]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:625:5+1
    assume {:print "$at(167,26174,26175)"} true;
    assume {:print "$track_local(48,66,0):", $t0} $t0 == $t0;

    // $t2 := object::object_address<#0>($t0) on_abort goto L3 with $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1326:26+29
    assume {:print "$at(167,55087,55116)"} true;
    call $t2 := $1_object_object_address'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(167,55087,55116)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(48,66):", $t3} $t3 == $t3;
        goto L3;
    }

    // trace_local[store_addr]($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1326:26+29
    assume {:print "$track_local(48,66,1):", $t2} $t2 == $t2;

    // $t4 := exists<0x1::fungible_asset::FungibleStore>($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1327:17+33
    assume {:print "$at(167,55134,55167)"} true;
    $t4 := $ResourceExists($1_fungible_asset_FungibleStore_$memory, $t2);

    // if ($t4) goto L1 else goto L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1327:9+6
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1328:9+40
    assume {:print "$at(167,55223,55263)"} true;
L1:

    // $t5 := get_global<0x1::fungible_asset::FungibleStore>($t2) on_abort goto L3 with $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1328:9+40
    assume {:print "$at(167,55223,55263)"} true;
    if (!$ResourceExists($1_fungible_asset_FungibleStore_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t5 := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(167,55223,55263)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(48,66):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t6 := get_field<0x1::fungible_asset::FungibleStore>.metadata($t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:626:9+38
    assume {:print "$at(167,26277,26315)"} true;
    $t6 := $t5->$metadata;

    // trace_return[0]($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:626:9+38
    assume {:print "$track_return(48,66,0):", $t6} $t6 == $t6;

    // goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:626:9+38
    goto L2;

    // label L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1327:69+25
    assume {:print "$at(167,55186,55211)"} true;
L0:

    // $t7 := 23 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1327:69+25
    assume {:print "$at(167,55186,55211)"} true;
    $t7 := 23;
    assume $IsValid'u64'($t7);

    // $t8 := error::not_found($t7) on_abort goto L3 with $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1327:52+43
    call $t8 := $1_error_not_found($t7);
    if ($abort_flag) {
        assume {:print "$at(167,55169,55212)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(48,66):", $t3} $t3 == $t3;
        goto L3;
    }

    // trace_abort($t8) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1327:9+6
    assume {:print "$at(167,55126,55132)"} true;
    assume {:print "$track_abort(48,66):", $t8} $t8 == $t8;

    // $t3 := move($t8) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1327:9+6
    $t3 := $t8;

    // goto L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1327:9+6
    goto L3;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:627:5+1
    assume {:print "$at(167,26320,26321)"} true;
L2:

    // return $t6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:627:5+1
    assume {:print "$at(167,26320,26321)"} true;
    $ret0 := $t6;
    return;

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:627:5+1
L3:

    // abort($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:627:5+1
    assume {:print "$at(167,26320,26321)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun fungible_asset::unchecked_deposit [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1203:5+335
procedure {:inline 1} $1_fungible_asset_unchecked_deposit(_$t0: int, _$t1: $1_fungible_asset_FungibleAsset) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $1_object_Object'$1_fungible_asset_Metadata';
    var $t5: $Mutation ($1_fungible_asset_FungibleStore);
    var $t6: bool;
    var $t7: int;
    var $t8: $1_object_Object'$1_fungible_asset_Metadata';
    var $t9: int;
    var $t10: bool;
    var $t11: $Mutation ($1_fungible_asset_FungibleStore);
    var $t12: int;
    var $t13: $1_object_Object'$1_fungible_asset_Metadata';
    var $t14: bool;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: bool;
    var $t21: $Mutation ($1_fungible_asset_ConcurrentFungibleBalance);
    var $t22: $Mutation ($1_aggregator_v2_Aggregator'u64');
    var $t23: int;
    var $t24: bool;
    var $t25: $1_fungible_asset_Deposit;
    var $t26: int;
    var $t27: int;
    var $t28: $Mutation (int);
    var $t29: bool;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t0: int;
    var $t1: $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_FungibleStore': $1_fungible_asset_FungibleStore;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[store_addr]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1203:5+1
    assume {:print "$at(167,50148,50149)"} true;
    assume {:print "$track_local(48,71,0):", $t0} $t0 == $t0;

    // trace_local[fa]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1203:5+1
    assume {:print "$track_local(48,71,1):", $t1} $t1 == $t1;

    // trace_local[store_addr]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1183:16+39
    assume {:print "$at(167,49264,49303)"} true;
    assume {:print "$track_local(48,71,2):", $t0} $t0 == $t0;

    // ($t8, $t9) := unpack 0x1::fungible_asset::FungibleAsset($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1187:13+34
    assume {:print "$at(167,49435,49469)"} true;
    $t8 := $t1->$metadata;
    $t9 := $t1->$amount;

    // trace_local[amount]($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1187:13+34
    assume {:print "$track_local(48,71,3):", $t9} $t9 == $t9;

    // trace_local[metadata]($t8) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1187:13+34
    assume {:print "$track_local(48,71,4):", $t8} $t8 == $t8;

    // $t10 := exists<0x1::fungible_asset::FungibleStore>($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1188:17+33
    assume {:print "$at(167,49492,49525)"} true;
    $t10 := $ResourceExists($1_fungible_asset_FungibleStore_$memory, $t0);

    // if ($t10) goto L1 else goto L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1188:9+6
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1189:21+44
    assume {:print "$at(167,49593,49637)"} true;
L1:

    // $t11 := borrow_global<0x1::fungible_asset::FungibleStore>($t0) on_abort goto L16 with $t12 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1189:21+44
    assume {:print "$at(167,49593,49637)"} true;
    if (!$ResourceExists($1_fungible_asset_FungibleStore_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t11 := $Mutation($Global($t0), EmptyVec(), $ResourceValue($1_fungible_asset_FungibleStore_$memory, $t0));
    }
    if ($abort_flag) {
        assume {:print "$at(167,49593,49637)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(48,71):", $t12} $t12 == $t12;
        goto L16;
    }

    // trace_local[store]($t11) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1189:21+44
    $temp_0'$1_fungible_asset_FungibleStore' := $Dereference($t11);
    assume {:print "$track_local(48,71,5):", $temp_0'$1_fungible_asset_FungibleStore'} $temp_0'$1_fungible_asset_FungibleStore' == $temp_0'$1_fungible_asset_FungibleStore';

    // $t13 := get_field<0x1::fungible_asset::FungibleStore>.metadata($t11) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1190:29+14
    assume {:print "$at(167,49667,49681)"} true;
    $t13 := $Dereference($t11)->$metadata;

    // $t14 := ==($t8, $t13) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1190:17+26
    $t14 := $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''($t8, $t13);

    // if ($t14) goto L3 else goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1190:9+6
    if ($t14) { goto L3; } else { goto L2; }

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1192:13+6
    assume {:print "$at(167,49758,49764)"} true;
L3:

    // $t15 := 0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1192:23+1
    assume {:print "$at(167,49768,49769)"} true;
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // $t16 := !=($t9, $t15) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1192:13+11
    $t16 := !$IsEqual'u64'($t9, $t15);

    // if ($t16) goto L5 else goto L4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1192:9+366
    if ($t16) { goto L5; } else { goto L4; }

    // label L5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1193:17+13
    assume {:print "$at(167,49789,49802)"} true;
L5:

    // $t17 := get_field<0x1::fungible_asset::FungibleStore>.balance($t11) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1193:17+13
    assume {:print "$at(167,49789,49802)"} true;
    $t17 := $Dereference($t11)->$balance;

    // $t18 := 0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1193:34+1
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // $t19 := ==($t17, $t18) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1193:17+18
    $t19 := $IsEqual'u64'($t17, $t18);

    // if ($t19) goto L7 else goto L6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1193:17+75
    if ($t19) { goto L7; } else { goto L6; }

    // label L7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:614:16+41
    assume {:print "$at(167,25841,25882)"} true;
L7:

    // $t20 := exists<0x1::fungible_asset::ConcurrentFungibleBalance>($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:615:9+40
    assume {:print "$at(167,25915,25955)"} true;
    $t20 := $ResourceExists($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t0);

    // $t6 := $t20 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:615:9+40
    $t6 := $t20;

    // trace_local[$t7]($t20) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:615:9+40
    assume {:print "$track_local(48,71,6):", $t20} $t20 == $t20;

    // label L14 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1193:13+324
    assume {:print "$at(167,49785,50109)"} true;
L14:

    // if ($t6) goto L9 else goto L8 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1193:13+324
    assume {:print "$at(167,49785,50109)"} true;
    if ($t6) { goto L9; } else { goto L8; }

    // label L9 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1193:94+166
L9:

    // drop($t11) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1193:94+166
    assume {:print "$at(167,49866,50032)"} true;

    // $t21 := borrow_global<0x1::fungible_asset::ConcurrentFungibleBalance>($t0) on_abort goto L16 with $t12 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1194:40+56
    assume {:print "$at(167,49907,49963)"} true;
    if (!$ResourceExists($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t21 := $Mutation($Global($t0), EmptyVec(), $ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t0));
    }
    if ($abort_flag) {
        assume {:print "$at(167,49907,49963)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(48,71):", $t12} $t12 == $t12;
        goto L16;
    }

    // $t22 := borrow_field<0x1::fungible_asset::ConcurrentFungibleBalance>.balance($t21) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1195:17+36
    assume {:print "$at(167,49981,50017)"} true;
    $t22 := $ChildMutation($t21, 0, $Dereference($t21)->$balance);

    // aggregator_v2::add<u64>($t22, $t9) on_abort goto L16 with $t12 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1195:17+36
    call $t22 := $1_aggregator_v2_add'u64'($t22, $t9);
    if ($abort_flag) {
        assume {:print "$at(167,49981,50017)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(48,71):", $t12} $t12 == $t12;
        goto L16;
    }

    // write_back[Reference($t21).balance (0x1::aggregator_v2::Aggregator<u64>)]($t22) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1195:17+36
    $t21 := $UpdateMutation($t21, $Update'$1_fungible_asset_ConcurrentFungibleBalance'_balance($Dereference($t21), $Dereference($t22)));

    // write_back[0x1::fungible_asset::ConcurrentFungibleBalance@]($t21) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1195:17+36
    $1_fungible_asset_ConcurrentFungibleBalance_$memory := $ResourceUpdate($1_fungible_asset_ConcurrentFungibleBalance_$memory, $GlobalLocationAddress($t21),
        $Dereference($t21));

    // label L13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1200:9+6
    assume {:print "$at(167,50130,50136)"} true;
L13:

    // trace_local[$t18]($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1200:9+6
    assume {:print "$at(167,50130,50136)"} true;
    assume {:print "$track_local(48,71,7):", $t9} $t9 == $t9;

    // $t23 := 0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1208:23+1
    assume {:print "$at(167,50399,50400)"} true;
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := !=($t9, $t23) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1208:13+11
    $t24 := !$IsEqual'u64'($t9, $t23);

    // if ($t24) goto L10 else goto L12 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1208:9+92
    if ($t24) { goto L10; } else { goto L12; }

    // label L10 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1209:42+10
    assume {:print "$at(167,50445,50455)"} true;
L10:

    // $t25 := pack 0x1::fungible_asset::Deposit($t0, $t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1209:25+37
    assume {:print "$at(167,50428,50465)"} true;
    $t25 := $1_fungible_asset_Deposit($t0, $t9);

    // opaque begin: event::emit<0x1::fungible_asset::Deposit>($t25) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1209:13+50

    // opaque end: event::emit<0x1::fungible_asset::Deposit>($t25) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1209:13+50

    // label L12 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1208:9+92
    assume {:print "$at(167,50385,50477)"} true;
L12:

    // goto L15 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1208:9+92
    assume {:print "$at(167,50385,50477)"} true;
    goto L15;

    // label L8 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1197:33+13
    assume {:print "$at(167,50072,50085)"} true;
L8:

    // $t26 := get_field<0x1::fungible_asset::FungibleStore>.balance($t11) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1197:33+13
    assume {:print "$at(167,50072,50085)"} true;
    $t26 := $Dereference($t11)->$balance;

    // $t27 := +($t26, $t9) on_abort goto L16 with $t12 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1197:33+22
    call $t27 := $AddU64($t26, $t9);
    if ($abort_flag) {
        assume {:print "$at(167,50072,50094)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(48,71):", $t12} $t12 == $t12;
        goto L16;
    }

    // $t28 := borrow_field<0x1::fungible_asset::FungibleStore>.balance($t11) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1197:17+13
    $t28 := $ChildMutation($t11, 1, $Dereference($t11)->$balance);

    // write_ref($t28, $t27) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1197:17+38
    $t28 := $UpdateMutation($t28, $t27);

    // write_back[Reference($t11).balance (u64)]($t28) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1197:17+38
    $t11 := $UpdateMutation($t11, $Update'$1_fungible_asset_FungibleStore'_balance($Dereference($t11), $Dereference($t28)));

    // write_back[0x1::fungible_asset::FungibleStore@]($t11) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1197:17+38
    $1_fungible_asset_FungibleStore_$memory := $ResourceUpdate($1_fungible_asset_FungibleStore_$memory, $GlobalLocationAddress($t11),
        $Dereference($t11));

    // goto L13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1197:17+38
    goto L13;

    // label L6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1193:17+75
    assume {:print "$at(167,49789,49864)"} true;
L6:

    // $t29 := false at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1193:17+75
    assume {:print "$at(167,49789,49864)"} true;
    $t29 := false;
    assume $IsValid'bool'($t29);

    // $t6 := $t29 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1193:17+75
    $t6 := $t29;

    // trace_local[$t7]($t29) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1193:17+75
    assume {:print "$track_local(48,71,6):", $t29} $t29 == $t29;

    // goto L14 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1193:17+75
    goto L14;

    // label L4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1192:9+366
    assume {:print "$at(167,49754,50120)"} true;
L4:

    // drop($t11) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1192:9+366
    assume {:print "$at(167,49754,50120)"} true;

    // goto L13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1192:9+366
    goto L13;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1190:9+6
    assume {:print "$at(167,49647,49653)"} true;
L2:

    // drop($t11) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1190:9+6
    assume {:print "$at(167,49647,49653)"} true;

    // $t30 := 11 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1190:69+34
    $t30 := 11;
    assume $IsValid'u64'($t30);

    // $t31 := error::invalid_argument($t30) on_abort goto L16 with $t12 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1190:45+59
    call $t31 := $1_error_invalid_argument($t30);
    if ($abort_flag) {
        assume {:print "$at(167,49683,49742)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(48,71):", $t12} $t12 == $t12;
        goto L16;
    }

    // trace_abort($t31) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1190:9+6
    assume {:print "$at(167,49647,49653)"} true;
    assume {:print "$track_abort(48,71):", $t31} $t31 == $t31;

    // $t12 := move($t31) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1190:9+6
    $t12 := $t31;

    // goto L16 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1190:9+6
    goto L16;

    // label L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1188:69+25
    assume {:print "$at(167,49544,49569)"} true;
L0:

    // $t32 := 23 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1188:69+25
    assume {:print "$at(167,49544,49569)"} true;
    $t32 := 23;
    assume $IsValid'u64'($t32);

    // $t33 := error::not_found($t32) on_abort goto L16 with $t12 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1188:52+43
    call $t33 := $1_error_not_found($t32);
    if ($abort_flag) {
        assume {:print "$at(167,49527,49570)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(48,71):", $t12} $t12 == $t12;
        goto L16;
    }

    // trace_abort($t33) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1188:9+6
    assume {:print "$at(167,49484,49490)"} true;
    assume {:print "$track_abort(48,71):", $t33} $t33 == $t33;

    // $t12 := move($t33) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1188:9+6
    $t12 := $t33;

    // goto L16 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1188:9+6
    goto L16;

    // label L15 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1211:5+1
    assume {:print "$at(167,50482,50483)"} true;
L15:

    // return () at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1211:5+1
    assume {:print "$at(167,50482,50483)"} true;
    return;

    // label L16 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1211:5+1
L16:

    // abort($t12) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1211:5+1
    assume {:print "$at(167,50482,50483)"} true;
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun fungible_asset::unchecked_withdraw [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1221:5+362
procedure {:inline 1} $1_fungible_asset_unchecked_withdraw(_$t0: int, _$t1: int) returns ($ret0: $1_fungible_asset_FungibleAsset)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $Mutation ($1_fungible_asset_FungibleStore);
    var $t5: $1_object_Object'$1_fungible_asset_Metadata';
    var $t6: bool;
    var $t7: $1_fungible_asset_FungibleAsset;
    var $t8: bool;
    var $t9: $Mutation ($1_fungible_asset_FungibleStore);
    var $t10: int;
    var $t11: $1_object_Object'$1_fungible_asset_Metadata';
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: bool;
    var $t18: $Mutation ($1_fungible_asset_ConcurrentFungibleBalance);
    var $t19: $Mutation ($1_aggregator_v2_Aggregator'u64');
    var $t20: bool;
    var $t21: $1_fungible_asset_FungibleAsset;
    var $t22: int;
    var $t23: bool;
    var $t24: $1_fungible_asset_Withdraw;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: bool;
    var $t29: int;
    var $t30: int;
    var $t31: $Mutation (int);
    var $t32: int;
    var $t33: int;
    var $t34: bool;
    var $t35: int;
    var $t36: int;
    var $t0: int;
    var $t1: int;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_FungibleStore': $1_fungible_asset_FungibleStore;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[store_addr]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1221:5+1
    assume {:print "$at(167,50807,50808)"} true;
    assume {:print "$track_local(48,73,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1221:5+1
    assume {:print "$track_local(48,73,1):", $t1} $t1 == $t1;

    // trace_local[store_addr]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1233:16+33
    assume {:print "$at(167,51266,51299)"} true;
    assume {:print "$track_local(48,73,2):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1233:16+33
    assume {:print "$track_local(48,73,3):", $t1} $t1 == $t1;

    // $t8 := exists<0x1::fungible_asset::FungibleStore>($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1237:17+33
    assume {:print "$at(167,51440,51473)"} true;
    $t8 := $ResourceExists($1_fungible_asset_FungibleStore_$memory, $t0);

    // if ($t8) goto L1 else goto L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1237:9+6
    if ($t8) { goto L1; } else { goto L0; }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1239:21+44
    assume {:print "$at(167,51542,51586)"} true;
L1:

    // $t9 := borrow_global<0x1::fungible_asset::FungibleStore>($t0) on_abort goto L18 with $t10 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1239:21+44
    assume {:print "$at(167,51542,51586)"} true;
    if (!$ResourceExists($1_fungible_asset_FungibleStore_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t0), EmptyVec(), $ResourceValue($1_fungible_asset_FungibleStore_$memory, $t0));
    }
    if ($abort_flag) {
        assume {:print "$at(167,51542,51586)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(48,73):", $t10} $t10 == $t10;
        goto L18;
    }

    // trace_local[store]($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1239:21+44
    $temp_0'$1_fungible_asset_FungibleStore' := $Dereference($t9);
    assume {:print "$track_local(48,73,4):", $temp_0'$1_fungible_asset_FungibleStore'} $temp_0'$1_fungible_asset_FungibleStore' == $temp_0'$1_fungible_asset_FungibleStore';

    // $t11 := get_field<0x1::fungible_asset::FungibleStore>.metadata($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1240:24+14
    assume {:print "$at(167,51611,51625)"} true;
    $t11 := $Dereference($t9)->$metadata;

    // trace_local[metadata]($t11) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1240:24+14
    assume {:print "$track_local(48,73,5):", $t11} $t11 == $t11;

    // $t12 := 0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1241:23+1
    assume {:print "$at(167,51649,51650)"} true;
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // $t13 := !=($t1, $t12) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1241:13+11
    $t13 := !$IsEqual'u64'($t1, $t12);

    // if ($t13) goto L3 else goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1241:9+583
    if ($t13) { goto L3; } else { goto L2; }

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1242:17+13
    assume {:print "$at(167,51670,51683)"} true;
L3:

    // $t14 := get_field<0x1::fungible_asset::FungibleStore>.balance($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1242:17+13
    assume {:print "$at(167,51670,51683)"} true;
    $t14 := $Dereference($t9)->$balance;

    // $t15 := 0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1242:34+1
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // $t16 := ==($t14, $t15) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1242:17+18
    $t16 := $IsEqual'u64'($t14, $t15);

    // if ($t16) goto L5 else goto L4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1242:17+75
    if ($t16) { goto L5; } else { goto L4; }

    // label L5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:614:16+41
    assume {:print "$at(167,25841,25882)"} true;
L5:

    // $t17 := exists<0x1::fungible_asset::ConcurrentFungibleBalance>($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:615:9+40
    assume {:print "$at(167,25915,25955)"} true;
    $t17 := $ResourceExists($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t0);

    // $t6 := $t17 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:615:9+40
    $t6 := $t17;

    // trace_local[$t6]($t17) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:615:9+40
    assume {:print "$track_local(48,73,6):", $t17} $t17 == $t17;

    // label L16 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1242:13+541
    assume {:print "$at(167,51666,52207)"} true;
L16:

    // if ($t6) goto L7 else goto L6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1242:13+541
    assume {:print "$at(167,51666,52207)"} true;
    if ($t6) { goto L7; } else { goto L6; }

    // label L7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1242:94+285
L7:

    // drop($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1242:94+285
    assume {:print "$at(167,51747,52032)"} true;

    // $t18 := borrow_global<0x1::fungible_asset::ConcurrentFungibleBalance>($t0) on_abort goto L18 with $t10 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1243:40+56
    assume {:print "$at(167,51788,51844)"} true;
    if (!$ResourceExists($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t18 := $Mutation($Global($t0), EmptyVec(), $ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t0));
    }
    if ($abort_flag) {
        assume {:print "$at(167,51788,51844)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(48,73):", $t10} $t10 == $t10;
        goto L18;
    }

    // $t19 := borrow_field<0x1::fungible_asset::ConcurrentFungibleBalance>.balance($t18) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1245:21+40
    assume {:print "$at(167,51891,51931)"} true;
    $t19 := $ChildMutation($t18, 0, $Dereference($t18)->$balance);

    // $t20 := aggregator_v2::try_sub<u64>($t19, $t1) on_abort goto L18 with $t10 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1245:21+40
    call $t20,$t19 := $1_aggregator_v2_try_sub'u64'($t19, $t1);
    if ($abort_flag) {
        assume {:print "$at(167,51891,51931)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(48,73):", $t10} $t10 == $t10;
        goto L18;
    }

    // write_back[Reference($t18).balance (0x1::aggregator_v2::Aggregator<u64>)]($t19) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1245:21+40
    $t18 := $UpdateMutation($t18, $Update'$1_fungible_asset_ConcurrentFungibleBalance'_balance($Dereference($t18), $Dereference($t19)));

    // write_back[0x1::fungible_asset::ConcurrentFungibleBalance@]($t18) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1245:21+40
    $1_fungible_asset_ConcurrentFungibleBalance_$memory := $ResourceUpdate($1_fungible_asset_ConcurrentFungibleBalance_$memory, $GlobalLocationAddress($t18),
        $Dereference($t18));

    // if ($t20) goto L9 else goto L8 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1244:17+6
    assume {:print "$at(167,51862,51868)"} true;
    if ($t20) { goto L9; } else { goto L8; }

    // label L9 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1244:17+6
L9:

    // label L10 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1253:25+8
    assume {:print "$at(167,52244,52252)"} true;
L10:

    // $t21 := pack 0x1::fungible_asset::FungibleAsset($t11, $t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1253:9+34
    assume {:print "$at(167,52228,52262)"} true;
    $t21 := $1_fungible_asset_FungibleAsset($t11, $t1);

    // trace_local[fa]($t21) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1253:9+34
    assume {:print "$track_local(48,73,7):", $t21} $t21 == $t21;

    // $t22 := 0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1226:23+1
    assume {:print "$at(167,51062,51063)"} true;
    $t22 := 0;
    assume $IsValid'u64'($t22);

    // $t23 := !=($t1, $t22) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1226:13+11
    $t23 := !$IsEqual'u64'($t1, $t22);

    // if ($t23) goto L11 else goto L13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1226:9+103
    if ($t23) { goto L11; } else { goto L13; }

    // label L11 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1227:53+10
    assume {:print "$at(167,51119,51129)"} true;
L11:

    // $t24 := pack 0x1::fungible_asset::Withdraw($t0, $t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1227:35+38
    assume {:print "$at(167,51101,51139)"} true;
    $t24 := $1_fungible_asset_Withdraw($t0, $t1);

    // opaque begin: event::emit<0x1::fungible_asset::Withdraw>($t24) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1227:13+61

    // opaque end: event::emit<0x1::fungible_asset::Withdraw>($t24) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1227:13+61

    // label L13 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1224:72+203
    assume {:print "$at(167,50966,51169)"} true;
L13:

    // trace_return[0]($t21) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1224:72+203
    assume {:print "$at(167,50966,51169)"} true;
    assume {:print "$track_return(48,73,0):", $t21} $t21 == $t21;

    // goto L17 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1224:72+203
    goto L17;

    // label L8 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1246:45+21
    assume {:print "$at(167,51977,51998)"} true;
L8:

    // $t25 := 4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1246:45+21
    assume {:print "$at(167,51977,51998)"} true;
    $t25 := 4;
    assume $IsValid'u64'($t25);

    // $t26 := error::invalid_argument($t25) on_abort goto L18 with $t10 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1246:21+46
    call $t26 := $1_error_invalid_argument($t25);
    if ($abort_flag) {
        assume {:print "$at(167,51953,51999)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(48,73):", $t10} $t10 == $t10;
        goto L18;
    }

    // trace_abort($t26) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1244:17+6
    assume {:print "$at(167,51862,51868)"} true;
    assume {:print "$track_abort(48,73):", $t26} $t26 == $t26;

    // $t10 := move($t26) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1244:17+6
    $t10 := $t26;

    // goto L18 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1244:17+6
    goto L18;

    // label L6 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1249:25+13
    assume {:print "$at(167,52064,52077)"} true;
L6:

    // $t27 := get_field<0x1::fungible_asset::FungibleStore>.balance($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1249:25+13
    assume {:print "$at(167,52064,52077)"} true;
    $t27 := $Dereference($t9)->$balance;

    // $t28 := >=($t27, $t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1249:25+23
    call $t28 := $Ge($t27, $t1);

    // if ($t28) goto L15 else goto L14 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1249:17+6
    if ($t28) { goto L15; } else { goto L14; }

    // label L15 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1250:33+13
    assume {:print "$at(167,52170,52183)"} true;
L15:

    // $t29 := get_field<0x1::fungible_asset::FungibleStore>.balance($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1250:33+13
    assume {:print "$at(167,52170,52183)"} true;
    $t29 := $Dereference($t9)->$balance;

    // $t30 := -($t29, $t1) on_abort goto L18 with $t10 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1250:33+22
    call $t30 := $Sub($t29, $t1);
    if ($abort_flag) {
        assume {:print "$at(167,52170,52192)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(48,73):", $t10} $t10 == $t10;
        goto L18;
    }

    // $t31 := borrow_field<0x1::fungible_asset::FungibleStore>.balance($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1250:17+13
    $t31 := $ChildMutation($t9, 1, $Dereference($t9)->$balance);

    // write_ref($t31, $t30) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1250:17+38
    $t31 := $UpdateMutation($t31, $t30);

    // write_back[Reference($t9).balance (u64)]($t31) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1250:17+38
    $t9 := $UpdateMutation($t9, $Update'$1_fungible_asset_FungibleStore'_balance($Dereference($t9), $Dereference($t31)));

    // write_back[0x1::fungible_asset::FungibleStore@]($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1250:17+38
    $1_fungible_asset_FungibleStore_$memory := $ResourceUpdate($1_fungible_asset_FungibleStore_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // goto L10 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1250:17+38
    goto L10;

    // label L14 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1249:17+6
    assume {:print "$at(167,52056,52062)"} true;
L14:

    // drop($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1249:17+6
    assume {:print "$at(167,52056,52062)"} true;

    // $t32 := 4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1249:74+21
    $t32 := 4;
    assume $IsValid'u64'($t32);

    // $t33 := error::invalid_argument($t32) on_abort goto L18 with $t10 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1249:50+46
    call $t33 := $1_error_invalid_argument($t32);
    if ($abort_flag) {
        assume {:print "$at(167,52089,52135)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(48,73):", $t10} $t10 == $t10;
        goto L18;
    }

    // trace_abort($t33) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1249:17+6
    assume {:print "$at(167,52056,52062)"} true;
    assume {:print "$track_abort(48,73):", $t33} $t33 == $t33;

    // $t10 := move($t33) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1249:17+6
    $t10 := $t33;

    // goto L18 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1249:17+6
    goto L18;

    // label L4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1242:17+75
    assume {:print "$at(167,51670,51745)"} true;
L4:

    // $t34 := false at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1242:17+75
    assume {:print "$at(167,51670,51745)"} true;
    $t34 := false;
    assume $IsValid'bool'($t34);

    // $t6 := $t34 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1242:17+75
    $t6 := $t34;

    // trace_local[$t6]($t34) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1242:17+75
    assume {:print "$track_local(48,73,6):", $t34} $t34 == $t34;

    // goto L16 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1242:17+75
    goto L16;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1241:9+583
    assume {:print "$at(167,51635,52218)"} true;
L2:

    // drop($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1241:9+583
    assume {:print "$at(167,51635,52218)"} true;

    // goto L10 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1241:9+583
    goto L10;

    // label L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1237:69+25
    assume {:print "$at(167,51492,51517)"} true;
L0:

    // $t35 := 23 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1237:69+25
    assume {:print "$at(167,51492,51517)"} true;
    $t35 := 23;
    assume $IsValid'u64'($t35);

    // $t36 := error::not_found($t35) on_abort goto L18 with $t10 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1237:52+43
    call $t36 := $1_error_not_found($t35);
    if ($abort_flag) {
        assume {:print "$at(167,51475,51518)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(48,73):", $t10} $t10 == $t10;
        goto L18;
    }

    // trace_abort($t36) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1237:9+6
    assume {:print "$at(167,51432,51438)"} true;
    assume {:print "$track_abort(48,73):", $t36} $t36 == $t36;

    // $t10 := move($t36) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1237:9+6
    $t10 := $t36;

    // goto L18 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1237:9+6
    goto L18;

    // label L17 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1230:5+1
    assume {:print "$at(167,51168,51169)"} true;
L17:

    // return $t21 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1230:5+1
    assume {:print "$at(167,51168,51169)"} true;
    $ret0 := $t21;
    return;

    // label L18 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1230:5+1
L18:

    // abort($t10) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1230:5+1
    assume {:print "$at(167,51168,51169)"} true;
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun fungible_asset::withdraw_with_ref<0x1::fungible_asset::FungibleStore> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1051:5+406
procedure {:inline 1} $1_fungible_asset_withdraw_with_ref'$1_fungible_asset_FungibleStore'(_$t0: $1_fungible_asset_TransferRef, _$t1: $1_object_Object'$1_fungible_asset_FungibleStore', _$t2: int) returns ($ret0: $1_fungible_asset_FungibleAsset)
{
    // declare local variables
    var $t3: $1_object_Object'$1_fungible_asset_Metadata';
    var $t4: $1_object_Object'$1_fungible_asset_Metadata';
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: $1_fungible_asset_FungibleAsset;
    var $t9: int;
    var $t10: int;
    var $t0: $1_fungible_asset_TransferRef;
    var $t1: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t2: int;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_TransferRef': $1_fungible_asset_TransferRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1051:5+1
    assume {:print "$at(167,43739,43740)"} true;
    assume {:print "$track_local(48,81,0):", $t0} $t0 == $t0;

    // trace_local[store]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1051:5+1
    assume {:print "$track_local(48,81,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1051:5+1
    assume {:print "$track_local(48,81,2):", $t2} $t2 == $t2;

    // $t3 := get_field<0x1::fungible_asset::TransferRef>.metadata($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1057:13+12
    assume {:print "$at(167,43952,43964)"} true;
    $t3 := $t0->$metadata;

    // $t4 := fungible_asset::store_metadata<#0>($t1) on_abort goto L3 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1057:29+21
    call $t4 := $1_fungible_asset_store_metadata'$1_fungible_asset_FungibleStore'($t1);
    if ($abort_flag) {
        assume {:print "$at(167,43968,43989)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(48,81):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t6 := ==($t3, $t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1057:13+37
    $t6 := $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''($t3, $t4);

    // if ($t6) goto L1 else goto L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1056:9+6
    assume {:print "$at(167,43931,43937)"} true;
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1060:51+6
    assume {:print "$at(167,44123,44129)"} true;
L1:

    // $t7 := object::object_address<#0>($t1) on_abort goto L3 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1060:28+30
    assume {:print "$at(167,44100,44130)"} true;
    call $t7 := $1_object_object_address'$1_fungible_asset_FungibleStore'($t1);
    if ($abort_flag) {
        assume {:print "$at(167,44100,44130)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(48,81):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t8 := fungible_asset::unchecked_withdraw($t7, $t2) on_abort goto L3 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1060:9+58
    call $t8 := $1_fungible_asset_unchecked_withdraw($t7, $t2);
    if ($abort_flag) {
        assume {:print "$at(167,44081,44139)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(48,81):", $t5} $t5 == $t5;
        goto L3;
    }

    // trace_return[0]($t8) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1055:72+224
    assume {:print "$at(167,43921,44145)"} true;
    assume {:print "$track_return(48,81,0):", $t8} $t8 == $t8;

    // goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1055:72+224
    goto L2;

    // label L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1058:37+32
    assume {:print "$at(167,44027,44059)"} true;
L0:

    // $t9 := 9 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1058:37+32
    assume {:print "$at(167,44027,44059)"} true;
    $t9 := 9;
    assume $IsValid'u64'($t9);

    // $t10 := error::invalid_argument($t9) on_abort goto L3 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1058:13+57
    call $t10 := $1_error_invalid_argument($t9);
    if ($abort_flag) {
        assume {:print "$at(167,44003,44060)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(48,81):", $t5} $t5 == $t5;
        goto L3;
    }

    // trace_abort($t10) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1056:9+6
    assume {:print "$at(167,43931,43937)"} true;
    assume {:print "$track_abort(48,81):", $t10} $t10 == $t10;

    // $t5 := move($t10) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1056:9+6
    $t5 := $t10;

    // goto L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1056:9+6
    goto L3;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1061:5+1
    assume {:print "$at(167,44144,44145)"} true;
L2:

    // return $t8 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1061:5+1
    assume {:print "$at(167,44144,44145)"} true;
    $ret0 := $t8;
    return;

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1061:5+1
L3:

    // abort($t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\fungible_asset.move:1061:5+1
    assume {:print "$at(167,44144,44145)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// struct primary_fungible_store::DeriveRefPod at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:30:5+75
datatype $1_primary_fungible_store_DeriveRefPod {
    $1_primary_fungible_store_DeriveRefPod($metadata_derive_ref: $1_object_DeriveRef)
}
function {:inline} $Update'$1_primary_fungible_store_DeriveRefPod'_metadata_derive_ref(s: $1_primary_fungible_store_DeriveRefPod, x: $1_object_DeriveRef): $1_primary_fungible_store_DeriveRefPod {
    $1_primary_fungible_store_DeriveRefPod(x)
}
function $IsValid'$1_primary_fungible_store_DeriveRefPod'(s: $1_primary_fungible_store_DeriveRefPod): bool {
    $IsValid'$1_object_DeriveRef'(s->$metadata_derive_ref)
}
function {:inline} $IsEqual'$1_primary_fungible_store_DeriveRefPod'(s1: $1_primary_fungible_store_DeriveRefPod, s2: $1_primary_fungible_store_DeriveRefPod): bool {
    s1 == s2
}
var $1_primary_fungible_store_DeriveRefPod_$memory: $Memory $1_primary_fungible_store_DeriveRefPod;

// fun primary_fungible_store::create_primary_store<0x1::fungible_asset::Metadata> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:75:5+746
procedure {:inline 1} $1_primary_fungible_store_create_primary_store'$1_fungible_asset_Metadata'(_$t0: int, _$t1: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: $1_object_Object'$1_fungible_asset_FungibleStore')
{
    // declare local variables
    var $t2: int;
    var $t3: $1_object_DeriveRef;
    var $t4: $1_object_ConstructorRef;
    var $t5: $1_object_ConstructorRef;
    var $t6: $1_object_TransferRef;
    var $t7: int;
    var $t8: int;
    var $t9: $1_object_Object'$1_fungible_asset_Metadata';
    var $t10: $1_primary_fungible_store_DeriveRefPod;
    var $t11: $1_object_DeriveRef;
    var $t12: int;
    var $t13: $1_object_ConstructorRef;
    var $t14: $1_object_TransferRef;
    var $t15: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t0: int;
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_DeriveRef': $1_object_DeriveRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_TransferRef': $1_object_TransferRef;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[owner_addr]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:75:5+1
    assume {:print "$at(189,3507,3508)"} true;
    assume {:print "$track_local(50,14,0):", $t0} $t0 == $t0;

    // trace_local[metadata]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:75:5+1
    assume {:print "$track_local(50,14,1):", $t1} $t1 == $t1;

    // $t7 := object::object_address<#0>($t1) on_abort goto L2 with $t8 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:79:29+33
    assume {:print "$at(189,3687,3720)"} true;
    call $t7 := $1_object_object_address'$1_fungible_asset_Metadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(189,3687,3720)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(50,14):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[metadata_addr]($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:79:29+33
    assume {:print "$track_local(50,14,2):", $t7} $t7 == $t7;

    // $t9 := object::address_to_object<0x1::fungible_asset::Metadata>($t7) on_abort goto L2 with $t8 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:80:9+50
    assume {:print "$at(189,3730,3780)"} true;
    call $t9 := $1_object_address_to_object'$1_fungible_asset_Metadata'($t7);
    if ($abort_flag) {
        assume {:print "$at(189,3730,3780)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(50,14):", $t8} $t8 == $t8;
        goto L2;
    }

    // drop($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:80:9+50

    // $t10 := get_global<0x1::primary_fungible_store::DeriveRefPod>($t7) on_abort goto L2 with $t8 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:81:27+42
    assume {:print "$at(189,3808,3850)"} true;
    if (!$ResourceExists($1_primary_fungible_store_DeriveRefPod_$memory, $t7)) {
        call $ExecFailureAbort();
    } else {
        $t10 := $ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $t7);
    }
    if ($abort_flag) {
        assume {:print "$at(189,3808,3850)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(50,14):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t11 := get_field<0x1::primary_fungible_store::DeriveRefPod>.metadata_derive_ref($t10) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:81:26+63
    $t11 := $t10->$metadata_derive_ref;

    // trace_local[derive_ref]($t11) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:81:26+63
    assume {:print "$track_local(50,14,3):", $t11} $t11 == $t11;

    // assume Identical($t12, object::spec_create_user_derived_object_address($t0, select object::DeriveRef.self<0x1::object::DeriveRef>($t11))) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.spec.move:185:9+89
    assume {:print "$at(185,7868,7957)"} true;
    assume ($t12 == $1_object_spec_create_user_derived_object_address($t0, $t11->$self));

    // $t13 := object::create_user_derived_object($t0, $t11) on_abort goto L2 with $t8 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:82:32+58
    assume {:print "$at(189,3903,3961)"} true;
    call $t13 := $1_object_create_user_derived_object($t0, $t11);
    if ($abort_flag) {
        assume {:print "$at(189,3903,3961)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(50,14):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[$t9]($t13) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:82:32+58
    assume {:print "$track_local(50,14,4):", $t13} $t13 == $t13;

    // trace_local[constructor_ref]($t13) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:82:31+59
    assume {:print "$track_local(50,14,5):", $t13} $t13 == $t13;

    // $t14 := object::generate_transfer_ref($t13) on_abort goto L2 with $t8 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:84:29+46
    assume {:print "$at(189,4079,4125)"} true;
    call $t14 := $1_object_generate_transfer_ref($t13);
    if ($abort_flag) {
        assume {:print "$at(189,4079,4125)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(50,14):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[$t12]($t14) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:84:29+46
    assume {:print "$track_local(50,14,6):", $t14} $t14 == $t14;

    // object::disable_ungated_transfer($t14) on_abort goto L2 with $t8 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:85:9+46
    assume {:print "$at(189,4135,4181)"} true;
    call $1_object_disable_ungated_transfer($t14);
    if ($abort_flag) {
        assume {:print "$at(189,4135,4181)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(50,14):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t15 := fungible_asset::create_store<#0>($t13, $t1) on_abort goto L2 with $t8 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:87:9+55
    assume {:print "$at(189,4192,4247)"} true;
    call $t15 := $1_fungible_asset_create_store'$1_fungible_asset_Metadata'($t13, $t1);
    if ($abort_flag) {
        assume {:print "$at(189,4192,4247)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(50,14):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_return[0]($t15) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:78:52+596
    assume {:print "$at(189,3657,4253)"} true;
    assume {:print "$track_return(50,14,0):", $t15} $t15 == $t15;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:88:5+1
    assume {:print "$at(189,4252,4253)"} true;
L1:

    // return $t15 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:88:5+1
    assume {:print "$at(189,4252,4253)"} true;
    $ret0 := $t15;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:88:5+1
L2:

    // abort($t8) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:88:5+1
    assume {:print "$at(189,4252,4253)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun primary_fungible_store::create_primary_store_enabled_fungible_asset [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:37:5+694
procedure {:inline 1} $1_primary_fungible_store_create_primary_store_enabled_fungible_asset(_$t0: $1_object_ConstructorRef, _$t1: $1_option_Option'u128', _$t2: $1_string_String, _$t3: $1_string_String, _$t4: int, _$t5: $1_string_String, _$t6: $1_string_String) returns ()
{
    // declare local variables
    var $t7: $signer;
    var $t8: $1_object_Object'$1_fungible_asset_Metadata';
    var $t9: int;
    var $t10: $signer;
    var $t11: $1_object_DeriveRef;
    var $t12: $1_primary_fungible_store_DeriveRefPod;
    var $t0: $1_object_ConstructorRef;
    var $t1: $1_option_Option'u128';
    var $t2: $1_string_String;
    var $t3: $1_string_String;
    var $t4: int;
    var $t5: $1_string_String;
    var $t6: $1_string_String;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_option_Option'u128'': $1_option_Option'u128';
    var $temp_0'$1_string_String': $1_string_String;
    var $temp_0'signer': $signer;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;

    // bytecode translation starts here
    // trace_local[constructor_ref]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:37:5+1
    assume {:print "$at(189,2209,2210)"} true;
    assume {:print "$track_local(50,15,0):", $t0} $t0 == $t0;

    // trace_local[maximum_supply]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:37:5+1
    assume {:print "$track_local(50,15,1):", $t1} $t1 == $t1;

    // trace_local[name]($t2) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:37:5+1
    assume {:print "$track_local(50,15,2):", $t2} $t2 == $t2;

    // trace_local[symbol]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:37:5+1
    assume {:print "$track_local(50,15,3):", $t3} $t3 == $t3;

    // trace_local[decimals]($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:37:5+1
    assume {:print "$track_local(50,15,4):", $t4} $t4 == $t4;

    // trace_local[icon_uri]($t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:37:5+1
    assume {:print "$track_local(50,15,5):", $t5} $t5 == $t5;

    // trace_local[project_uri]($t6) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:37:5+1
    assume {:print "$track_local(50,15,6):", $t6} $t6 == $t6;

    // $t8 := fungible_asset::add_fungibility($t0, $t1, $t2, $t3, $t4, $t5, $t6) on_abort goto L2 with $t9 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:46:9+206
    assume {:print "$at(189,2484,2690)"} true;
    call $t8 := $1_fungible_asset_add_fungibility($t0, $t1, $t2, $t3, $t4, $t5, $t6);
    if ($abort_flag) {
        assume {:print "$at(189,2484,2690)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(50,15):", $t9} $t9 == $t9;
        goto L2;
    }

    // drop($t8) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:46:9+206

    // $t10 := object::generate_signer($t0) on_abort goto L2 with $t9 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:55:29+40
    assume {:print "$at(189,2720,2760)"} true;
    call $t10 := $1_object_generate_signer($t0);
    if ($abort_flag) {
        assume {:print "$at(189,2720,2760)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(50,15):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[$t15]($t10) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:55:29+40
    assume {:print "$track_local(50,15,7):", $t10} $t10 == $t10;

    // $t11 := object::generate_derive_ref($t0) on_abort goto L2 with $t9 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:57:34+44
    assume {:print "$at(189,2840,2884)"} true;
    call $t11 := $1_object_generate_derive_ref($t0);
    if ($abort_flag) {
        assume {:print "$at(189,2840,2884)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(50,15):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t12 := pack 0x1::primary_fungible_store::DeriveRefPod($t11) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:56:31+103
    assume {:print "$at(189,2792,2895)"} true;
    $t12 := $1_primary_fungible_store_DeriveRefPod($t11);

    // move_to<0x1::primary_fungible_store::DeriveRefPod>($t12, $t10) on_abort goto L2 with $t9 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:56:9+126
    if ($ResourceExists($1_primary_fungible_store_DeriveRefPod_$memory, $t10->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_primary_fungible_store_DeriveRefPod_$memory := $ResourceUpdate($1_primary_fungible_store_DeriveRefPod_$memory, $t10->$addr, $t12);
    }
    if ($abort_flag) {
        assume {:print "$at(189,2770,2896)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(50,15):", $t9} $t9 == $t9;
        goto L2;
    }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:59:5+1
    assume {:print "$at(189,2902,2903)"} true;
L1:

    // return () at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:59:5+1
    assume {:print "$at(189,2902,2903)"} true;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:59:5+1
L2:

    // abort($t9) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:59:5+1
    assume {:print "$at(189,2902,2903)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun primary_fungible_store::ensure_primary_store_exists<0x1::fungible_asset::Metadata> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:62:5+407
procedure {:inline 1} $1_primary_fungible_store_ensure_primary_store_exists'$1_fungible_asset_Metadata'(_$t0: int, _$t1: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: $1_object_Object'$1_fungible_asset_FungibleStore')
{
    // declare local variables
    var $t2: int;
    var $t3: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t8: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t0: int;
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[owner]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:62:5+1
    assume {:print "$at(189,3010,3011)"} true;
    assume {:print "$track_local(50,17,0):", $t0} $t0 == $t0;

    // trace_local[metadata]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:62:5+1
    assume {:print "$track_local(50,17,1):", $t1} $t1 == $t1;

    // $t4 := primary_fungible_store::primary_store_address<#0>($t0, $t1) on_abort goto L4 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:66:26+38
    assume {:print "$at(189,3189,3227)"} true;
    call $t4 := $1_primary_fungible_store_primary_store_address'$1_fungible_asset_Metadata'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(189,3189,3227)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(50,17):", $t5} $t5 == $t5;
        goto L4;
    }

    // trace_local[$t4]($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:66:26+38
    assume {:print "$track_local(50,17,2):", $t4} $t4 == $t4;

    // $t6 := fungible_asset::store_exists($t4) on_abort goto L4 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:67:13+40
    assume {:print "$at(189,3241,3281)"} true;
    call $t6 := $1_fungible_asset_store_exists($t4);
    if ($abort_flag) {
        assume {:print "$at(189,3241,3281)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(50,17):", $t5} $t5 == $t5;
        goto L4;
    }

    // if ($t6) goto L1 else goto L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:67:9+174
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:68:13+37
    assume {:print "$at(189,3297,3334)"} true;
L1:

    // $t7 := object::address_to_object<0x1::fungible_asset::FungibleStore>($t4) on_abort goto L4 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:68:13+37
    assume {:print "$at(189,3297,3334)"} true;
    call $t7 := $1_object_address_to_object'$1_fungible_asset_FungibleStore'($t4);
    if ($abort_flag) {
        assume {:print "$at(189,3297,3334)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(50,17):", $t5} $t5 == $t5;
        goto L4;
    }

    // $t3 := $t7 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:68:13+37
    $t3 := $t7;

    // trace_local[return]($t7) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:68:13+37
    assume {:print "$track_local(50,17,3):", $t7} $t7 == $t7;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:67:9+174
    assume {:print "$at(189,3237,3411)"} true;
L2:

    // trace_return[0]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:67:9+174
    assume {:print "$at(189,3237,3411)"} true;
    assume {:print "$track_return(50,17,0):", $t3} $t3 == $t3;

    // goto L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:67:9+174
    goto L3;

    // label L0 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:70:34+5
    assume {:print "$at(189,3385,3390)"} true;
L0:

    // $t8 := primary_fungible_store::create_primary_store<#0>($t0, $t1) on_abort goto L4 with $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:70:13+37
    assume {:print "$at(189,3364,3401)"} true;
    call $t8 := $1_primary_fungible_store_create_primary_store'$1_fungible_asset_Metadata'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(189,3364,3401)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(50,17):", $t5} $t5 == $t5;
        goto L4;
    }

    // $t3 := $t8 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:70:13+37
    $t3 := $t8;

    // trace_local[return]($t8) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:70:13+37
    assume {:print "$track_local(50,17,3):", $t8} $t8 == $t8;

    // goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:70:13+37
    goto L2;

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:72:5+1
    assume {:print "$at(189,3416,3417)"} true;
L3:

    // return $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:72:5+1
    assume {:print "$at(189,3416,3417)"} true;
    $ret0 := $t3;
    return;

    // label L4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:72:5+1
L4:

    // abort($t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:72:5+1
    assume {:print "$at(189,3416,3417)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun primary_fungible_store::primary_store<0x1::fungible_asset::Metadata> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:99:5+216
procedure {:inline 1} $1_primary_fungible_store_primary_store'$1_fungible_asset_Metadata'(_$t0: int, _$t1: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: $1_object_Object'$1_fungible_asset_FungibleStore')
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t0: int;
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[owner]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:99:5+1
    assume {:print "$at(189,4647,4648)"} true;
    assume {:print "$track_local(50,20,0):", $t0} $t0 == $t0;

    // trace_local[metadata]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:99:5+1
    assume {:print "$track_local(50,20,1):", $t1} $t1 == $t1;

    // $t2 := primary_fungible_store::primary_store_address<#0>($t0, $t1) on_abort goto L2 with $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:100:21+38
    assume {:print "$at(189,4762,4800)"} true;
    call $t2 := $1_primary_fungible_store_primary_store_address'$1_fungible_asset_Metadata'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(189,4762,4800)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(50,20):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := object::address_to_object<0x1::fungible_asset::FungibleStore>($t2) on_abort goto L2 with $t3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:101:9+47
    assume {:print "$at(189,4810,4857)"} true;
    call $t4 := $1_object_address_to_object'$1_fungible_asset_FungibleStore'($t2);
    if ($abort_flag) {
        assume {:print "$at(189,4810,4857)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(50,20):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:101:9+47
    assume {:print "$track_return(50,20,0):", $t4} $t4 == $t4;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:102:5+1
    assume {:print "$at(189,4862,4863)"} true;
L1:

    // return $t4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:102:5+1
    assume {:print "$at(189,4862,4863)"} true;
    $ret0 := $t4;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:102:5+1
L2:

    // abort($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:102:5+1
    assume {:print "$at(189,4862,4863)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun primary_fungible_store::primary_store_address<0x1::fungible_asset::Metadata> [baseline] at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:92:5+230
procedure {:inline 1} $1_primary_fungible_store_primary_store_address'$1_fungible_asset_Metadata'(_$t0: int, _$t1: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t0: int;
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[owner]($t0) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:92:5+1
    assume {:print "$at(189,4339,4340)"} true;
    assume {:print "$track_local(50,21,0):", $t0} $t0 == $t0;

    // trace_local[metadata]($t1) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:92:5+1
    assume {:print "$track_local(50,21,1):", $t1} $t1 == $t1;

    // $t3 := object::object_address<#0>($t1) on_abort goto L2 with $t4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:93:29+33
    assume {:print "$at(189,4456,4489)"} true;
    call $t3 := $1_object_object_address'$1_fungible_asset_Metadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(189,4456,4489)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(50,21):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_local[metadata_addr]($t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:93:29+33
    assume {:print "$track_local(50,21,2):", $t3} $t3 == $t3;

    // $t5 := opaque begin: object::create_user_derived_object_address($t0, $t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:94:9+64
    assume {:print "$at(189,4499,4563)"} true;

    // $t6 := havoc[val]() at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:94:9+64
    havoc $t6;

    // if ($t6) goto L4 else goto L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:94:9+64
    if ($t6) { goto L4; } else { goto L3; }

    // label L4 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:94:9+64
L4:

    // trace_abort($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:94:9+64
    assume {:print "$at(189,4499,4563)"} true;
    assume {:print "$track_abort(50,21):", $t4} $t4 == $t4;

    // goto L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:94:9+64
    goto L2;

    // label L3 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:94:9+64
L3:

    // assume WellFormed($t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:94:9+64
    assume {:print "$at(189,4499,4563)"} true;
    assume $IsValid'address'($t5);

    // assume Eq<address>($t5, object::spec_create_user_derived_object_address($t0, $t3)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:94:9+64
    assume $IsEqual'address'($t5, $1_object_spec_create_user_derived_object_address($t0, $t3));

    // $t5 := opaque end: object::create_user_derived_object_address($t0, $t3) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:94:9+64

    // trace_return[0]($t5) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:94:9+64
    assume {:print "$track_return(50,21,0):", $t5} $t5 == $t5;

    // label L1 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:95:5+1
    assume {:print "$at(189,4568,4569)"} true;
L1:

    // return $t5 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:95:5+1
    assume {:print "$at(189,4568,4569)"} true;
    $ret0 := $t5;
    return;

    // label L2 at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:95:5+1
L2:

    // abort($t4) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\primary_fungible_store.move:95:5+1
    assume {:print "$at(189,4568,4569)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\hash.spec.move:7:9+50
function  $1_aptos_hash_spec_keccak256(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_keccak256(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\hash.spec.move:12:9+58
function  $1_aptos_hash_spec_sha2_512_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_sha2_512_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\hash.spec.move:17:9+58
function  $1_aptos_hash_spec_sha3_512_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_sha3_512_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\hash.spec.move:22:9+59
function  $1_aptos_hash_spec_ripemd160_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_ripemd160_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\../aptos-stdlib\sources\hash.spec.move:27:9+61
function  $1_aptos_hash_spec_blake2b_256_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_blake2b_256_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\reconfiguration.move:161:5+155
function {:inline} $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory: $Memory $1_reconfiguration_Configuration): int {
    $ResourceValue($1_reconfiguration_Configuration_$memory, 1)->$last_reconfiguration_time
}

// struct reconfiguration::Configuration at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\reconfiguration.move:43:5+306
datatype $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration($epoch: int, $last_reconfiguration_time: int, $events: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent')
}
function {:inline} $Update'$1_reconfiguration_Configuration'_epoch(s: $1_reconfiguration_Configuration, x: int): $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration(x, s->$last_reconfiguration_time, s->$events)
}
function {:inline} $Update'$1_reconfiguration_Configuration'_last_reconfiguration_time(s: $1_reconfiguration_Configuration, x: int): $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration(s->$epoch, x, s->$events)
}
function {:inline} $Update'$1_reconfiguration_Configuration'_events(s: $1_reconfiguration_Configuration, x: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'): $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration(s->$epoch, s->$last_reconfiguration_time, x)
}
function $IsValid'$1_reconfiguration_Configuration'(s: $1_reconfiguration_Configuration): bool {
    $IsValid'u64'(s->$epoch)
      && $IsValid'u64'(s->$last_reconfiguration_time)
      && $IsValid'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(s->$events)
}
function {:inline} $IsEqual'$1_reconfiguration_Configuration'(s1: $1_reconfiguration_Configuration, s2: $1_reconfiguration_Configuration): bool {
    s1 == s2
}
var $1_reconfiguration_Configuration_$memory: $Memory $1_reconfiguration_Configuration;

// struct reconfiguration::NewEpochEvent at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\reconfiguration.move:30:5+64
datatype $1_reconfiguration_NewEpochEvent {
    $1_reconfiguration_NewEpochEvent($epoch: int)
}
function {:inline} $Update'$1_reconfiguration_NewEpochEvent'_epoch(s: $1_reconfiguration_NewEpochEvent, x: int): $1_reconfiguration_NewEpochEvent {
    $1_reconfiguration_NewEpochEvent(x)
}
function $IsValid'$1_reconfiguration_NewEpochEvent'(s: $1_reconfiguration_NewEpochEvent): bool {
    $IsValid'u64'(s->$epoch)
}
function {:inline} $IsEqual'$1_reconfiguration_NewEpochEvent'(s1: $1_reconfiguration_NewEpochEvent, s2: $1_reconfiguration_NewEpochEvent): bool {
    s1 == s2
}

// struct account_control::LockAdmin at .\sources\account_control.move:15:5+84
datatype $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin($_dummy: bool)
}
function {:inline} $Update'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'__dummy(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin, x: bool): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin(x)
}
function $IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin): bool {
    $IsValid'bool'(s->$_dummy)
}
function {:inline} $IsEqual'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'(s1: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin, s2: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin): bool {
    s1 == s2
}
var $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory: $Memory $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin;

// struct account_control::TimeLock at .\sources\account_control.move:11:5+64
datatype $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock($unlock_time_secs: int)
}
function {:inline} $Update'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'_unlock_time_secs(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock, x: int): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock(x)
}
function $IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock): bool {
    $IsValid'u64'(s->$unlock_time_secs)
}
function {:inline} $IsEqual'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'(s1: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock, s2: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock): bool {
    s1 == s2
}
var $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory: $Memory $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock;

// fun account_control::unlock [verification] at .\sources\account_control.move:30:1+111
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_unlock$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\account_control.move:30:1+1
    assume {:print "$at(2,838,839)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\account_control.move:30:1+1
    assume $IsValid'address'($t1);

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>(): WellFormed($rsc) at .\sources\account_control.move:30:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>(): WellFormed($rsc) at .\sources\account_control.move:30:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'($rsc))));

    // assume exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>(signer::$address_of($t0)) at .\sources\account_control.move:26:5+54
    assume {:print "$at(2,718,772)"} true;
    assume $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $1_signer_$address_of($t0));

    // trace_local[admin]($t0) at .\sources\account_control.move:30:1+1
    assume {:print "$at(2,838,839)"} true;
    assume {:print "$track_local(101,0,0):", $t0} $t0 == $t0;

    // trace_local[user]($t1) at .\sources\account_control.move:30:1+1
    assume {:print "$track_local(101,0,1):", $t1} $t1 == $t1;

    // assert exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>(signer::$address_of($t0)) at .\sources\account_control.move:53:5+54
    assume {:print "$at(2,1837,1891)"} true;
    assert {:msg "assert_failed(2,1837,1891): precondition does not hold at this call"}
      $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $1_signer_$address_of($t0));

    // account_control::unlock_account($t0, $t1) on_abort goto L2 with $t2 at .\sources\account_control.move:31:5+27
    assume {:print "$at(2,918,945)"} true;
    call $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_unlock_account($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,918,945)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(101,0):", $t2} $t2 == $t2;
        goto L2;
    }

    // label L1 at .\sources\account_control.move:32:1+1
    assume {:print "$at(2,948,949)"} true;
L1:

    // assert exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>(signer::$address_of($t0)) at .\sources\account_control.move:27:5+53
    assume {:print "$at(2,778,831)"} true;
    assert {:msg "assert_failed(2,778,831): post-condition does not hold"}
      $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $1_signer_$address_of($t0));

    // return () at .\sources\account_control.move:27:5+53
    return;

    // label L2 at .\sources\account_control.move:32:1+1
    assume {:print "$at(2,948,949)"} true;
L2:

    // abort($t2) at .\sources\account_control.move:32:1+1
    assume {:print "$at(2,948,949)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun account_control::assert_not_locked [baseline] at .\sources\account_control.move:89:5+349
procedure {:inline 1} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_assert_not_locked(_$t0: int) returns ()
{
    // declare local variables
    var $t1: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock;
    var $t2: bool;
    var $t3: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t0: int;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at .\sources\account_control.move:89:5+1
    assume {:print "$at(2,3188,3189)"} true;
    assume {:print "$track_local(101,1,0):", $t0} $t0 == $t0;

    // $t2 := exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t0) at .\sources\account_control.move:90:13+25
    assume {:print "$at(2,3268,3293)"} true;
    $t2 := $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t0);

    // if ($t2) goto L0 else goto L2 at .\sources\account_control.move:90:9+266
    if ($t2) { goto L0; } else { goto L2; }

    // label L0 at .\sources\account_control.move:91:24+32
    assume {:print "$at(2,3321,3353)"} true;
L0:

    // $t3 := get_global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t0) on_abort goto L6 with $t4 at .\sources\account_control.move:91:24+32
    assume {:print "$at(2,3321,3353)"} true;
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,3321,3353)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(101,1):", $t4} $t4 == $t4;
        goto L6;
    }

    // trace_local[lock]($t3) at .\sources\account_control.move:91:24+32
    assume {:print "$track_local(101,1,1):", $t3} $t3 == $t3;

    // $t5 := timestamp::now_seconds() on_abort goto L6 with $t4 at .\sources\account_control.move:93:17+24
    assume {:print "$at(2,3394,3418)"} true;
    call $t5 := $1_timestamp_now_seconds();
    if ($abort_flag) {
        assume {:print "$at(2,3394,3418)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(101,1):", $t4} $t4 == $t4;
        goto L6;
    }

    // $t6 := get_field<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>.unlock_time_secs($t3) at .\sources\account_control.move:93:45+21
    $t6 := $t3->$unlock_time_secs;

    // $t7 := >=($t5, $t6) at .\sources\account_control.move:93:17+49
    call $t7 := $Ge($t5, $t6);

    // if ($t7) goto L4 else goto L3 at .\sources\account_control.move:92:13+6
    assume {:print "$at(2,3368,3374)"} true;
    if ($t7) { goto L4; } else { goto L3; }

    // label L4 at .\sources\account_control.move:92:13+6
L4:

    // label L2 at .\sources\account_control.move:90:9+266
    assume {:print "$at(2,3264,3530)"} true;
L2:

    // goto L5 at .\sources\account_control.move:90:9+266
    assume {:print "$at(2,3264,3530)"} true;
    goto L5;

    // label L3 at .\sources\account_control.move:94:42+15
    assume {:print "$at(2,3487,3502)"} true;
L3:

    // $t8 := 227 at .\sources\account_control.move:94:42+15
    assume {:print "$at(2,3487,3502)"} true;
    $t8 := 227;
    assume $IsValid'u64'($t8);

    // $t9 := error::permission_denied($t8) on_abort goto L6 with $t4 at .\sources\account_control.move:94:17+41
    call $t9 := $1_error_permission_denied($t8);
    if ($abort_flag) {
        assume {:print "$at(2,3462,3503)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(101,1):", $t4} $t4 == $t4;
        goto L6;
    }

    // trace_abort($t9) at .\sources\account_control.move:92:13+6
    assume {:print "$at(2,3368,3374)"} true;
    assume {:print "$track_abort(101,1):", $t9} $t9 == $t9;

    // $t4 := move($t9) at .\sources\account_control.move:92:13+6
    $t4 := $t9;

    // goto L6 at .\sources\account_control.move:92:13+6
    goto L6;

    // label L5 at .\sources\account_control.move:97:5+1
    assume {:print "$at(2,3536,3537)"} true;
L5:

    // return () at .\sources\account_control.move:97:5+1
    assume {:print "$at(2,3536,3537)"} true;
    return;

    // label L6 at .\sources\account_control.move:97:5+1
L6:

    // abort($t4) at .\sources\account_control.move:97:5+1
    assume {:print "$at(2,3536,3537)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun account_control::assert_not_locked [verification] at .\sources\account_control.move:89:5+349
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_assert_not_locked$verify(_$t0: int) returns ()
{
    // declare local variables
    var $t1: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock;
    var $t2: bool;
    var $t3: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t0: int;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock;
    var $temp_0'address': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\account_control.move:89:5+1
    assume {:print "$at(2,3188,3189)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: 0x1::chain_status::GenesisEndMarker: ResourceDomain<0x1::chain_status::GenesisEndMarker>(): WellFormed($rsc) at .\sources\account_control.move:89:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: 0x1::timestamp::CurrentTimeMicroseconds: ResourceDomain<0x1::timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at .\sources\account_control.move:89:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: 0x1::reconfiguration::Configuration: ResourceDomain<0x1::reconfiguration::Configuration>(): WellFormed($rsc) at .\sources\account_control.move:89:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>(): WellFormed($rsc) at .\sources\account_control.move:89:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<0x1::timestamp::CurrentTimeMicroseconds>(0x1)) at .\sources\account_control.move:89:5+349
    // global invariant at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at .\sources\account_control.move:89:5+349
    // global invariant at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // trace_local[account]($t0) at .\sources\account_control.move:89:5+1
    assume {:print "$track_local(101,1,0):", $t0} $t0 == $t0;

    // $t2 := exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t0) at .\sources\account_control.move:90:13+25
    assume {:print "$at(2,3268,3293)"} true;
    $t2 := $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t0);

    // if ($t2) goto L0 else goto L2 at .\sources\account_control.move:90:9+266
    if ($t2) { goto L0; } else { goto L2; }

    // label L0 at .\sources\account_control.move:91:24+32
    assume {:print "$at(2,3321,3353)"} true;
L0:

    // $t3 := get_global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t0) on_abort goto L6 with $t4 at .\sources\account_control.move:91:24+32
    assume {:print "$at(2,3321,3353)"} true;
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,3321,3353)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(101,1):", $t4} $t4 == $t4;
        goto L6;
    }

    // trace_local[lock]($t3) at .\sources\account_control.move:91:24+32
    assume {:print "$track_local(101,1,1):", $t3} $t3 == $t3;

    // $t5 := timestamp::now_seconds() on_abort goto L6 with $t4 at .\sources\account_control.move:93:17+24
    assume {:print "$at(2,3394,3418)"} true;
    call $t5 := $1_timestamp_now_seconds();
    if ($abort_flag) {
        assume {:print "$at(2,3394,3418)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(101,1):", $t4} $t4 == $t4;
        goto L6;
    }

    // $t6 := get_field<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>.unlock_time_secs($t3) at .\sources\account_control.move:93:45+21
    $t6 := $t3->$unlock_time_secs;

    // $t7 := >=($t5, $t6) at .\sources\account_control.move:93:17+49
    call $t7 := $Ge($t5, $t6);

    // if ($t7) goto L4 else goto L3 at .\sources\account_control.move:92:13+6
    assume {:print "$at(2,3368,3374)"} true;
    if ($t7) { goto L4; } else { goto L3; }

    // label L4 at .\sources\account_control.move:92:13+6
L4:

    // label L2 at .\sources\account_control.move:90:9+266
    assume {:print "$at(2,3264,3530)"} true;
L2:

    // goto L5 at .\sources\account_control.move:90:9+266
    assume {:print "$at(2,3264,3530)"} true;
    goto L5;

    // label L3 at .\sources\account_control.move:94:42+15
    assume {:print "$at(2,3487,3502)"} true;
L3:

    // $t8 := 227 at .\sources\account_control.move:94:42+15
    assume {:print "$at(2,3487,3502)"} true;
    $t8 := 227;
    assume $IsValid'u64'($t8);

    // $t9 := error::permission_denied($t8) on_abort goto L6 with $t4 at .\sources\account_control.move:94:17+41
    call $t9 := $1_error_permission_denied($t8);
    if ($abort_flag) {
        assume {:print "$at(2,3462,3503)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(101,1):", $t4} $t4 == $t4;
        goto L6;
    }

    // trace_abort($t9) at .\sources\account_control.move:92:13+6
    assume {:print "$at(2,3368,3374)"} true;
    assume {:print "$track_abort(101,1):", $t9} $t9 == $t9;

    // $t4 := move($t9) at .\sources\account_control.move:92:13+6
    $t4 := $t9;

    // goto L6 at .\sources\account_control.move:92:13+6
    goto L6;

    // label L5 at .\sources\account_control.move:97:5+1
    assume {:print "$at(2,3536,3537)"} true;
L5:

    // assert Or(Not(exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t0)), Ge(timestamp::$now_seconds(), select account_control::TimeLock.unlock_time_secs<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t0)))) at .\sources\account_control.move:83:5+127
    assume {:print "$at(2,2997,3124)"} true;
    assert {:msg "assert_failed(2,2997,3124): post-condition does not hold"}
      (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t0) || ($1_timestamp_$now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t0)->$unlock_time_secs));

    // return () at .\sources\account_control.move:83:5+127
    return;

    // label L6 at .\sources\account_control.move:97:5+1
    assume {:print "$at(2,3536,3537)"} true;
L6:

    // abort($t4) at .\sources\account_control.move:97:5+1
    assume {:print "$at(2,3536,3537)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun account_control::destroy_lock [baseline] at .\sources\account_control.move:77:5+95
procedure {:inline 1} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_destroy_lock(_$t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock) returns ()
{
    // declare local variables
    var $t1: int;
    var $t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[lock]($t0) at .\sources\account_control.move:77:5+1
    assume {:print "$at(2,2771,2772)"} true;
    assume {:print "$track_local(101,2,0):", $t0} $t0 == $t0;

    // $t1 := unpack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock($t0) at .\sources\account_control.move:78:13+32
    assume {:print "$at(2,2819,2851)"} true;
    $t1 := $t0->$unlock_time_secs;

    // drop($t1) at .\sources\account_control.move:78:13+32

    // label L1 at .\sources\account_control.move:79:5+1
    assume {:print "$at(2,2865,2866)"} true;
L1:

    // return () at .\sources\account_control.move:79:5+1
    assume {:print "$at(2,2865,2866)"} true;
    return;

}

// fun account_control::destroy_lock [verification] at .\sources\account_control.move:77:5+95
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_destroy_lock$verify(_$t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock) returns ()
{
    // declare local variables
    var $t1: int;
    var $t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\account_control.move:77:5+1
    assume {:print "$at(2,2771,2772)"} true;
    assume $IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'($t0);

    // trace_local[lock]($t0) at .\sources\account_control.move:77:5+1
    assume {:print "$track_local(101,2,0):", $t0} $t0 == $t0;

    // $t1 := unpack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock($t0) at .\sources\account_control.move:78:13+32
    assume {:print "$at(2,2819,2851)"} true;
    $t1 := $t0->$unlock_time_secs;

    // drop($t1) at .\sources\account_control.move:78:13+32

    // label L1 at .\sources\account_control.move:79:5+1
    assume {:print "$at(2,2865,2866)"} true;
L1:

    // return () at .\sources\account_control.move:79:5+1
    assume {:print "$at(2,2865,2866)"} true;
    return;

}

// fun account_control::destroy_lock_admin [baseline] at .\sources\account_control.move:163:5+95
procedure {:inline 1} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_destroy_lock_admin(_$t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[admin]($t0) at .\sources\account_control.move:163:5+1
    assume {:print "$at(2,5763,5764)"} true;
    assume {:print "$track_local(101,3,0):", $t0} $t0 == $t0;

    // $t1 := unpack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin($t0) at .\sources\account_control.move:164:13+23
    assume {:print "$at(2,5819,5842)"} true;
    $t1 := $t0->$_dummy;

    // drop($t1) at .\sources\account_control.move:164:13+23

    // label L1 at .\sources\account_control.move:165:5+1
    assume {:print "$at(2,5857,5858)"} true;
L1:

    // return () at .\sources\account_control.move:165:5+1
    assume {:print "$at(2,5857,5858)"} true;
    return;

}

// fun account_control::destroy_lock_admin [verification] at .\sources\account_control.move:163:5+95
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_destroy_lock_admin$verify(_$t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\account_control.move:163:5+1
    assume {:print "$at(2,5763,5764)"} true;
    assume $IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'($t0);

    // trace_local[admin]($t0) at .\sources\account_control.move:163:5+1
    assume {:print "$track_local(101,3,0):", $t0} $t0 == $t0;

    // $t1 := unpack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin($t0) at .\sources\account_control.move:164:13+23
    assume {:print "$at(2,5819,5842)"} true;
    $t1 := $t0->$_dummy;

    // drop($t1) at .\sources\account_control.move:164:13+23

    // label L1 at .\sources\account_control.move:165:5+1
    assume {:print "$at(2,5857,5858)"} true;
L1:

    // return () at .\sources\account_control.move:165:5+1
    assume {:print "$at(2,5857,5858)"} true;
    return;

}

// fun account_control::get_lock_info [verification] at .\sources\account_control.move:115:5+296
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_get_lock_info$verify(_$t0: int) returns ($ret0: $1_option_Option'u64')
{
    // declare local variables
    var $t1: $1_option_Option'u64';
    var $t2: bool;
    var $t3: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock;
    var $t4: int;
    var $t5: int;
    var $t6: $1_option_Option'u64';
    var $t7: $1_option_Option'u64';
    var $t0: int;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'address': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\account_control.move:115:5+1
    assume {:print "$at(2,3975,3976)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>(): WellFormed($rsc) at .\sources\account_control.move:115:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'($rsc))));

    // trace_local[account]($t0) at .\sources\account_control.move:115:5+1
    assume {:print "$track_local(101,4,0):", $t0} $t0 == $t0;

    // $t2 := exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t0) at .\sources\account_control.move:116:13+25
    assume {:print "$at(2,4072,4097)"} true;
    $t2 := $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t0);

    // if ($t2) goto L1 else goto L0 at .\sources\account_control.move:116:9+196
    if ($t2) { goto L1; } else { goto L0; }

    // label L1 at .\sources\account_control.move:117:24+32
    assume {:print "$at(2,4125,4157)"} true;
L1:

    // $t3 := get_global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t0) on_abort goto L4 with $t4 at .\sources\account_control.move:117:24+32
    assume {:print "$at(2,4125,4157)"} true;
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,4125,4157)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(101,4):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t5 := get_field<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>.unlock_time_secs($t3) at .\sources\account_control.move:118:26+21
    assume {:print "$at(2,4185,4206)"} true;
    $t5 := $t3->$unlock_time_secs;

    // $t6 := opaque begin: option::some<u64>($t5) at .\sources\account_control.move:118:13+35

    // assume And(WellFormed($t6), Le(Len<u64>(select option::Option.vec($t6)), 1)) at .\sources\account_control.move:118:13+35
    assume ($IsValid'$1_option_Option'u64''($t6) && (LenVec($t6->$vec) <= 1));

    // assume Eq<0x1::option::Option<u64>>($t6, option::spec_some<u64>($t5)) at .\sources\account_control.move:118:13+35
    assume $IsEqual'$1_option_Option'u64''($t6, $1_option_spec_some'u64'($t5));

    // $t6 := opaque end: option::some<u64>($t5) at .\sources\account_control.move:118:13+35

    // $t1 := $t6 at .\sources\account_control.move:118:13+35
    $t1 := $t6;

    // trace_local[return]($t6) at .\sources\account_control.move:118:13+35
    assume {:print "$track_local(101,4,1):", $t6} $t6 == $t6;

    // label L2 at .\sources\account_control.move:116:9+196
    assume {:print "$at(2,4068,4264)"} true;
L2:

    // trace_return[0]($t1) at .\sources\account_control.move:116:9+196
    assume {:print "$at(2,4068,4264)"} true;
    assume {:print "$track_return(101,4,0):", $t1} $t1 == $t1;

    // goto L3 at .\sources\account_control.move:116:9+196
    goto L3;

    // label L0 at .\sources\account_control.move:120:13+14
    assume {:print "$at(2,4239,4253)"} true;
L0:

    // $t7 := opaque begin: option::none<u64>() at .\sources\account_control.move:120:13+14
    assume {:print "$at(2,4239,4253)"} true;

    // assume And(WellFormed($t7), Le(Len<u64>(select option::Option.vec($t7)), 1)) at .\sources\account_control.move:120:13+14
    assume ($IsValid'$1_option_Option'u64''($t7) && (LenVec($t7->$vec) <= 1));

    // assume Eq<0x1::option::Option<u64>>($t7, option::spec_none<u64>()) at .\sources\account_control.move:120:13+14
    assume $IsEqual'$1_option_Option'u64''($t7, $1_option_spec_none'u64'());

    // $t7 := opaque end: option::none<u64>() at .\sources\account_control.move:120:13+14

    // $t1 := $t7 at .\sources\account_control.move:120:13+14
    $t1 := $t7;

    // trace_local[return]($t7) at .\sources\account_control.move:120:13+14
    assume {:print "$track_local(101,4,1):", $t7} $t7 == $t7;

    // goto L2 at .\sources\account_control.move:120:13+14
    goto L2;

    // label L3 at .\sources\account_control.move:122:5+1
    assume {:print "$at(2,4270,4271)"} true;
L3:

    // assert true at .\sources\account_control.move:100:5+13
    assume {:print "$at(2,3594,3607)"} true;
    assert {:msg "assert_failed(2,3594,3607): post-condition does not hold"}
      true;

    // assert Implies(exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t0), Eq<vector<u64>>(select option::Option.vec<0x1::option::Option<u64>>($t1), Vector<u64>(select account_control::TimeLock.unlock_time_secs<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t0))))) at .\sources\account_control.move:103:5+121
    assume {:print "$at(2,3673,3794)"} true;
    assert {:msg "assert_failed(2,3673,3794): post-condition does not hold"}
      ($ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t0) ==> $IsEqual'vec'u64''($t1->$vec, MakeVec1($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t0)->$unlock_time_secs)));

    // assert Implies(Not(exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t0)), Eq<vector<u64>>(select option::Option.vec<0x1::option::Option<u64>>($t1), Vector<u64>())) at .\sources\account_control.move:108:5+80
    assume {:print "$at(2,3856,3936)"} true;
    assert {:msg "assert_failed(2,3856,3936): post-condition does not hold"}
      (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t0) ==> $IsEqual'vec'u64''($t1->$vec, $EmptyVec'u64'()));

    // return $t1 at .\sources\account_control.move:108:5+80
    $ret0 := $t1;
    return;

    // label L4 at .\sources\account_control.move:122:5+1
    assume {:print "$at(2,4270,4271)"} true;
L4:

    // abort($t4) at .\sources\account_control.move:122:5+1
    assume {:print "$at(2,4270,4271)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun account_control::grant_lock_admin [verification] at .\sources\account_control.move:137:5+238
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_grant_lock_admin$verify(_$t0: $signer, _$t1: $signer) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: bool;
    var $t6: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin;
    var $t7: int;
    var $t8: int;
    var $t0: $signer;
    var $t1: $signer;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\account_control.move:137:5+1
    assume {:print "$at(2,4716,4717)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\account_control.move:137:5+1
    assume $IsValid'signer'($t1) && $1_signer_is_txn_signer($t1) && $1_signer_is_txn_signer_addr($t1->$addr);

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>(): WellFormed($rsc) at .\sources\account_control.move:137:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'($rsc))));

    // assume exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>(signer::$address_of($t0)) at .\sources\account_control.move:126:5+54
    assume {:print "$at(2,4354,4408)"} true;
    assume $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $1_signer_$address_of($t0));

    // trace_local[admin]($t0) at .\sources\account_control.move:137:5+1
    assume {:print "$at(2,4716,4717)"} true;
    assume {:print "$track_local(101,5,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at .\sources\account_control.move:137:5+1
    assume {:print "$track_local(101,5,1):", $t1} $t1 == $t1;

    // $t2 := signer::address_of($t0) on_abort goto L3 with $t3 at .\sources\account_control.move:138:35+25
    assume {:print "$at(2,4823,4848)"} true;
    call $t2 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,4823,4848)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,5):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t4 := exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>($t2) at .\sources\account_control.move:138:17+44
    $t4 := $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $t2);

    // if ($t4) goto L1 else goto L0 at .\sources\account_control.move:138:9+6
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at .\sources\account_control.move:139:17+9
    assume {:print "$at(2,4907,4916)"} true;
L1:

    // $t5 := false at .\sources\account_control.move:139:48+5
    assume {:print "$at(2,4938,4943)"} true;
    $t5 := false;
    assume $IsValid'bool'($t5);

    // $t6 := pack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin($t5) at .\sources\account_control.move:139:28+27
    $t6 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin($t5);

    // move_to<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>($t6, $t1) on_abort goto L3 with $t3 at .\sources\account_control.move:139:9+47
    if ($ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $t1->$addr)) {
        call $ExecFailureAbort();
    } else {
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory := $ResourceUpdate($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $t1->$addr, $t6);
    }
    if ($abort_flag) {
        assume {:print "$at(2,4899,4946)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,5):", $t3} $t3 == $t3;
        goto L3;
    }

    // goto L2 at .\sources\account_control.move:137:75+168
    assume {:print "$at(2,4786,4954)"} true;
    goto L2;

    // label L0 at .\sources\account_control.move:138:9+6
    assume {:print "$at(2,4797,4803)"} true;
L0:

    // $t7 := 228 at .\sources\account_control.move:138:88+10
    assume {:print "$at(2,4876,4886)"} true;
    $t7 := 228;
    assume $IsValid'u64'($t7);

    // $t8 := error::permission_denied($t7) on_abort goto L3 with $t3 at .\sources\account_control.move:138:63+36
    call $t8 := $1_error_permission_denied($t7);
    if ($abort_flag) {
        assume {:print "$at(2,4851,4887)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,5):", $t3} $t3 == $t3;
        goto L3;
    }

    // trace_abort($t8) at .\sources\account_control.move:138:9+6
    assume {:print "$at(2,4797,4803)"} true;
    assume {:print "$track_abort(101,5):", $t8} $t8 == $t8;

    // $t3 := move($t8) at .\sources\account_control.move:138:9+6
    $t3 := $t8;

    // goto L3 at .\sources\account_control.move:138:9+6
    goto L3;

    // label L2 at .\sources\account_control.move:140:5+1
    assume {:print "$at(2,4953,4954)"} true;
L2:

    // assert exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>(signer::$address_of($t1)) at .\sources\account_control.move:129:5+57
    assume {:print "$at(2,4478,4535)"} true;
    assert {:msg "assert_failed(2,4478,4535): post-condition does not hold"}
      $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $1_signer_$address_of($t1));

    // assert exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>(signer::$address_of($t0)) at .\sources\account_control.move:132:5+53
    assume {:print "$at(2,4590,4643)"} true;
    assert {:msg "assert_failed(2,4590,4643): post-condition does not hold"}
      $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $1_signer_$address_of($t0));

    // return () at .\sources\account_control.move:132:5+53
    return;

    // label L3 at .\sources\account_control.move:140:5+1
    assume {:print "$at(2,4953,4954)"} true;
L3:

    // abort($t3) at .\sources\account_control.move:140:5+1
    assume {:print "$at(2,4953,4954)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun account_control::init_module [verification] at .\sources\account_control.move:20:5+129
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_init_module$verify(_$t0: $signer) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin;
    var $t3: int;
    var $t0: $signer;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\account_control.move:20:5+1
    assume {:print "$at(2,500,501)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>(): WellFormed($rsc) at .\sources\account_control.move:20:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'($rsc))));

    // trace_local[admin]($t0) at .\sources\account_control.move:20:5+1
    assume {:print "$track_local(101,6,0):", $t0} $t0 == $t0;

    // $t1 := false at .\sources\account_control.move:21:44+5
    assume {:print "$at(2,613,618)"} true;
    $t1 := false;
    assume $IsValid'bool'($t1);

    // $t2 := pack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin($t1) at .\sources\account_control.move:21:24+27
    $t2 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin($t1);

    // move_to<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>($t2, $t0) on_abort goto L2 with $t3 at .\sources\account_control.move:21:9+43
    if ($ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $t0->$addr)) {
        call $ExecFailureAbort();
    } else {
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory := $ResourceUpdate($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $t0->$addr, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(2,578,621)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,6):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at .\sources\account_control.move:22:5+1
    assume {:print "$at(2,628,629)"} true;
L1:

    // return () at .\sources\account_control.move:22:5+1
    assume {:print "$at(2,628,629)"} true;
    return;

    // label L2 at .\sources\account_control.move:22:5+1
L2:

    // abort($t3) at .\sources\account_control.move:22:5+1
    assume {:print "$at(2,628,629)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun account_control::lock_account [verification] at .\sources\account_control.move:44:5+370
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_lock_account$verify(_$t0: $signer, _$t1: $signer, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t0: $signer;
    var $t1: $signer;
    var $t2: int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\account_control.move:44:5+1
    assume {:print "$at(2,1370,1371)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\account_control.move:44:5+1
    assume $IsValid'signer'($t1) && $1_signer_is_txn_signer($t1) && $1_signer_is_txn_signer_addr($t1->$addr);

    // assume WellFormed($t2) at .\sources\account_control.move:44:5+1
    assume $IsValid'u64'($t2);

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>(): WellFormed($rsc) at .\sources\account_control.move:44:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>(): WellFormed($rsc) at .\sources\account_control.move:44:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'($rsc))));

    // assume exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>(signer::$address_of($t0)) at .\sources\account_control.move:34:5+54
    assume {:print "$at(2,976,1030)"} true;
    assume $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $1_signer_$address_of($t0));

    // assume Not(exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>(signer::$address_of($t1))) at .\sources\account_control.move:37:5+56
    assume {:print "$at(2,1097,1153)"} true;
    assume !$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $1_signer_$address_of($t1));

    // trace_local[admin]($t0) at .\sources\account_control.move:44:5+1
    assume {:print "$at(2,1370,1371)"} true;
    assume {:print "$track_local(101,7,0):", $t0} $t0 == $t0;

    // trace_local[account]($t1) at .\sources\account_control.move:44:5+1
    assume {:print "$track_local(101,7,1):", $t1} $t1 == $t1;

    // trace_local[unlock_time_secs]($t2) at .\sources\account_control.move:44:5+1
    assume {:print "$track_local(101,7,2):", $t2} $t2 == $t2;

    // $t3 := signer::address_of($t0) on_abort goto L5 with $t4 at .\sources\account_control.move:45:35+25
    assume {:print "$at(2,1494,1519)"} true;
    call $t3 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,1494,1519)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(101,7):", $t4} $t4 == $t4;
        goto L5;
    }

    // $t5 := exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>($t3) at .\sources\account_control.move:45:17+44
    $t5 := $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $t3);

    // if ($t5) goto L1 else goto L0 at .\sources\account_control.move:45:9+6
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at .\sources\account_control.move:46:35+27
    assume {:print "$at(2,1596,1623)"} true;
L1:

    // $t6 := signer::address_of($t1) on_abort goto L5 with $t4 at .\sources\account_control.move:46:35+27
    assume {:print "$at(2,1596,1623)"} true;
    call $t6 := $1_signer_address_of($t1);
    if ($abort_flag) {
        assume {:print "$at(2,1596,1623)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(101,7):", $t4} $t4 == $t4;
        goto L5;
    }

    // $t7 := exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t6) at .\sources\account_control.move:46:18+45
    $t7 := $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t6);

    // if ($t7) goto L2 else goto L3 at .\sources\account_control.move:46:17+46
    if ($t7) { goto L2; } else { goto L3; }

    // label L3 at .\sources\account_control.move:48:17+7
    assume {:print "$at(2,1693,1700)"} true;
L3:

    // $t8 := pack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock($t2) at .\sources\account_control.move:48:26+29
    assume {:print "$at(2,1702,1731)"} true;
    $t8 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock($t2);

    // move_to<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t8, $t1) on_abort goto L5 with $t4 at .\sources\account_control.move:48:9+47
    if ($ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t1->$addr)) {
        call $ExecFailureAbort();
    } else {
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory := $ResourceUpdate($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t1->$addr, $t8);
    }
    if ($abort_flag) {
        assume {:print "$at(2,1685,1732)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(101,7):", $t4} $t4 == $t4;
        goto L5;
    }

    // goto L4 at .\sources\account_control.move:44:92+283
    assume {:print "$at(2,1457,1740)"} true;
    goto L4;

    // label L2 at .\sources\account_control.move:46:9+6
    assume {:print "$at(2,1570,1576)"} true;
L2:

    // $t9 := 229 at .\sources\account_control.move:46:86+15
    assume {:print "$at(2,1647,1662)"} true;
    $t9 := 229;
    assume $IsValid'u64'($t9);

    // $t10 := error::invalid_state($t9) on_abort goto L5 with $t4 at .\sources\account_control.move:46:65+37
    call $t10 := $1_error_invalid_state($t9);
    if ($abort_flag) {
        assume {:print "$at(2,1626,1663)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(101,7):", $t4} $t4 == $t4;
        goto L5;
    }

    // trace_abort($t10) at .\sources\account_control.move:46:9+6
    assume {:print "$at(2,1570,1576)"} true;
    assume {:print "$track_abort(101,7):", $t10} $t10 == $t10;

    // $t4 := move($t10) at .\sources\account_control.move:46:9+6
    $t4 := $t10;

    // goto L5 at .\sources\account_control.move:46:9+6
    goto L5;

    // label L0 at .\sources\account_control.move:45:9+6
    assume {:print "$at(2,1468,1474)"} true;
L0:

    // $t11 := 228 at .\sources\account_control.move:45:88+10
    assume {:print "$at(2,1547,1557)"} true;
    $t11 := 228;
    assume $IsValid'u64'($t11);

    // $t12 := error::permission_denied($t11) on_abort goto L5 with $t4 at .\sources\account_control.move:45:63+36
    call $t12 := $1_error_permission_denied($t11);
    if ($abort_flag) {
        assume {:print "$at(2,1522,1558)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(101,7):", $t4} $t4 == $t4;
        goto L5;
    }

    // trace_abort($t12) at .\sources\account_control.move:45:9+6
    assume {:print "$at(2,1468,1474)"} true;
    assume {:print "$track_abort(101,7):", $t12} $t12 == $t12;

    // $t4 := move($t12) at .\sources\account_control.move:45:9+6
    $t4 := $t12;

    // goto L5 at .\sources\account_control.move:45:9+6
    goto L5;

    // label L4 at .\sources\account_control.move:49:5+1
    assume {:print "$at(2,1739,1740)"} true;
L4:

    // assert exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>(signer::$address_of($t0)) at .\sources\account_control.move:35:5+53
    assume {:print "$at(2,1036,1089)"} true;
    assert {:msg "assert_failed(2,1036,1089): post-condition does not hold"}
      $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $1_signer_$address_of($t0));

    // assert exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>(signer::$address_of($t1)) at .\sources\account_control.move:38:5+54
    assume {:print "$at(2,1159,1213)"} true;
    assert {:msg "assert_failed(2,1159,1213): post-condition does not hold"}
      $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $1_signer_$address_of($t1));

    // assert Eq<u64>(select account_control::TimeLock.unlock_time_secs<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>(signer::$address_of($t1))), $t2) at .\sources\account_control.move:39:5+91
    assume {:print "$at(2,1219,1310)"} true;
    assert {:msg "assert_failed(2,1219,1310): post-condition does not hold"}
      $IsEqual'u64'($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $1_signer_$address_of($t1))->$unlock_time_secs, $t2);

    // return () at .\sources\account_control.move:39:5+91
    return;

    // label L5 at .\sources\account_control.move:49:5+1
    assume {:print "$at(2,1739,1740)"} true;
L5:

    // abort($t4) at .\sources\account_control.move:49:5+1
    assume {:print "$at(2,1739,1740)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun account_control::revoke_lock_admin [verification] at .\sources\account_control.move:157:5+302
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_revoke_lock_admin$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin;
    var $t6: int;
    var $t7: int;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\account_control.move:157:5+1
    assume {:print "$at(2,5453,5454)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\account_control.move:157:5+1
    assume $IsValid'address'($t1);

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>(): WellFormed($rsc) at .\sources\account_control.move:157:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'($rsc))));

    // assume exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>(signer::$address_of($t0)) at .\sources\account_control.move:144:5+54
    assume {:print "$at(2,5039,5093)"} true;
    assume $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $1_signer_$address_of($t0));

    // assume exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>($t1) at .\sources\account_control.move:147:5+35
    assume {:print "$at(2,5158,5193)"} true;
    assume $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $t1);

    // trace_local[admin]($t0) at .\sources\account_control.move:157:5+1
    assume {:print "$at(2,5453,5454)"} true;
    assume {:print "$track_local(101,8,0):", $t0} $t0 == $t0;

    // trace_local[target]($t1) at .\sources\account_control.move:157:5+1
    assume {:print "$track_local(101,8,1):", $t1} $t1 == $t1;

    // $t2 := signer::address_of($t0) on_abort goto L3 with $t3 at .\sources\account_control.move:158:35+25
    assume {:print "$at(2,5577,5602)"} true;
    call $t2 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,5577,5602)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,8):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t4 := exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>($t2) at .\sources\account_control.move:158:17+44
    $t4 := $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $t2);

    // if ($t4) goto L1 else goto L0 at .\sources\account_control.move:158:9+6
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at .\sources\account_control.move:159:30+28
    assume {:print "$at(2,5674,5702)"} true;
L1:

    // $t5 := move_from<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>($t1) on_abort goto L3 with $t3 at .\sources\account_control.move:159:30+28
    assume {:print "$at(2,5674,5702)"} true;
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t5 := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $t1);
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory := $ResourceRemove($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(2,5674,5702)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,8):", $t3} $t3 == $t3;
        goto L3;
    }

    // account_control::destroy_lock_admin($t5) on_abort goto L3 with $t3 at .\sources\account_control.move:160:9+34
    assume {:print "$at(2,5713,5747)"} true;
    call $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_destroy_lock_admin($t5);
    if ($abort_flag) {
        assume {:print "$at(2,5713,5747)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,8):", $t3} $t3 == $t3;
        goto L3;
    }

    // goto L2 at .\sources\account_control.move:157:92+215
    assume {:print "$at(2,5540,5755)"} true;
    goto L2;

    // label L0 at .\sources\account_control.move:158:88+10
    assume {:print "$at(2,5630,5640)"} true;
L0:

    // $t6 := 228 at .\sources\account_control.move:158:88+10
    assume {:print "$at(2,5630,5640)"} true;
    $t6 := 228;
    assume $IsValid'u64'($t6);

    // $t7 := error::permission_denied($t6) on_abort goto L3 with $t3 at .\sources\account_control.move:158:63+36
    call $t7 := $1_error_permission_denied($t6);
    if ($abort_flag) {
        assume {:print "$at(2,5605,5641)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,8):", $t3} $t3 == $t3;
        goto L3;
    }

    // trace_abort($t7) at .\sources\account_control.move:158:9+6
    assume {:print "$at(2,5551,5557)"} true;
    assume {:print "$track_abort(101,8):", $t7} $t7 == $t7;

    // $t3 := move($t7) at .\sources\account_control.move:158:9+6
    $t3 := $t7;

    // goto L3 at .\sources\account_control.move:158:9+6
    goto L3;

    // label L2 at .\sources\account_control.move:161:5+1
    assume {:print "$at(2,5754,5755)"} true;
L2:

    // assert Not(exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>($t1)) at .\sources\account_control.move:150:5+35
    assume {:print "$at(2,5260,5295)"} true;
    assert {:msg "assert_failed(2,5260,5295): post-condition does not hold"}
      !$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $t1);

    // return () at .\sources\account_control.move:150:5+35
    return;

    // label L3 at .\sources\account_control.move:161:5+1
    assume {:print "$at(2,5754,5755)"} true;
L3:

    // abort($t3) at .\sources\account_control.move:161:5+1
    assume {:print "$at(2,5754,5755)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun account_control::unlock_account [baseline] at .\sources\account_control.move:68:5+341
procedure {:inline 1} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_unlock_account(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: bool;
    var $t6: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock;
    var $t7: int;
    var $t8: int;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>(signer::$address_of($t0)) at .\sources\account_control.move:53:5+54
    assume {:print "$at(2,1837,1891)"} true;
    assume $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $1_signer_$address_of($t0));

    // trace_local[admin]($t0) at .\sources\account_control.move:68:5+1
    assume {:print "$at(2,2422,2423)"} true;
    assume {:print "$track_local(101,9,0):", $t0} $t0 == $t0;

    // trace_local[target]($t1) at .\sources\account_control.move:68:5+1
    assume {:print "$track_local(101,9,1):", $t1} $t1 == $t1;

    // $t2 := signer::address_of($t0) on_abort goto L6 with $t3 at .\sources\account_control.move:69:35+25
    assume {:print "$at(2,2542,2567)"} true;
    call $t2 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,2542,2567)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,9):", $t3} $t3 == $t3;
        goto L6;
    }

    // $t4 := exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>($t2) at .\sources\account_control.move:69:17+44
    $t4 := $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $t2);

    // if ($t4) goto L1 else goto L0 at .\sources\account_control.move:69:9+6
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at .\sources\account_control.move:71:13+24
    assume {:print "$at(2,2632,2656)"} true;
L1:

    // $t5 := exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t1) at .\sources\account_control.move:71:13+24
    assume {:print "$at(2,2632,2656)"} true;
    $t5 := $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t1);

    // if ($t5) goto L2 else goto L4 at .\sources\account_control.move:71:9+128
    if ($t5) { goto L2; } else { goto L4; }

    // label L2 at .\sources\account_control.move:72:24+27
    assume {:print "$at(2,2684,2711)"} true;
L2:

    // $t6 := move_from<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t1) on_abort goto L6 with $t3 at .\sources\account_control.move:72:24+27
    assume {:print "$at(2,2684,2711)"} true;
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t1);
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory := $ResourceRemove($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(2,2684,2711)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,9):", $t3} $t3 == $t3;
        goto L6;
    }

    // account_control::destroy_lock($t6) on_abort goto L6 with $t3 at .\sources\account_control.move:73:13+18
    assume {:print "$at(2,2726,2744)"} true;
    call $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_destroy_lock($t6);
    if ($abort_flag) {
        assume {:print "$at(2,2726,2744)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,9):", $t3} $t3 == $t3;
        goto L6;
    }

    // label L4 at .\sources\account_control.move:68:88+258
    assume {:print "$at(2,2505,2763)"} true;
L4:

    // goto L5 at .\sources\account_control.move:68:88+258
    assume {:print "$at(2,2505,2763)"} true;
    goto L5;

    // label L0 at .\sources\account_control.move:69:88+10
    assume {:print "$at(2,2595,2605)"} true;
L0:

    // $t7 := 228 at .\sources\account_control.move:69:88+10
    assume {:print "$at(2,2595,2605)"} true;
    $t7 := 228;
    assume $IsValid'u64'($t7);

    // $t8 := error::permission_denied($t7) on_abort goto L6 with $t3 at .\sources\account_control.move:69:63+36
    call $t8 := $1_error_permission_denied($t7);
    if ($abort_flag) {
        assume {:print "$at(2,2570,2606)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,9):", $t3} $t3 == $t3;
        goto L6;
    }

    // trace_abort($t8) at .\sources\account_control.move:69:9+6
    assume {:print "$at(2,2516,2522)"} true;
    assume {:print "$track_abort(101,9):", $t8} $t8 == $t8;

    // $t3 := move($t8) at .\sources\account_control.move:69:9+6
    $t3 := $t8;

    // goto L6 at .\sources\account_control.move:69:9+6
    goto L6;

    // label L5 at .\sources\account_control.move:75:5+1
    assume {:print "$at(2,2762,2763)"} true;
L5:

    // return () at .\sources\account_control.move:75:5+1
    assume {:print "$at(2,2762,2763)"} true;
    return;

    // label L6 at .\sources\account_control.move:75:5+1
L6:

    // abort($t3) at .\sources\account_control.move:75:5+1
    assume {:print "$at(2,2762,2763)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun account_control::unlock_account [verification] at .\sources\account_control.move:68:5+341
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_unlock_account$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: bool;
    var $t6: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock;
    var $t7: int;
    var $t8: int;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory#34: $Memory $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\account_control.move:68:5+1
    assume {:print "$at(2,2422,2423)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\account_control.move:68:5+1
    assume $IsValid'address'($t1);

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>(): WellFormed($rsc) at .\sources\account_control.move:68:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>(): WellFormed($rsc) at .\sources\account_control.move:68:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'($rsc))));

    // assume exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>(signer::$address_of($t0)) at .\sources\account_control.move:53:5+54
    assume {:print "$at(2,1837,1891)"} true;
    assume $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $1_signer_$address_of($t0));

    // @34 := save_mem(account_control::TimeLock) at .\sources\account_control.move:53:5+54
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory#34 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory;

    // trace_local[admin]($t0) at .\sources\account_control.move:68:5+1
    assume {:print "$at(2,2422,2423)"} true;
    assume {:print "$track_local(101,9,0):", $t0} $t0 == $t0;

    // trace_local[target]($t1) at .\sources\account_control.move:68:5+1
    assume {:print "$track_local(101,9,1):", $t1} $t1 == $t1;

    // $t2 := signer::address_of($t0) on_abort goto L6 with $t3 at .\sources\account_control.move:69:35+25
    assume {:print "$at(2,2542,2567)"} true;
    call $t2 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,2542,2567)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,9):", $t3} $t3 == $t3;
        goto L6;
    }

    // $t4 := exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>($t2) at .\sources\account_control.move:69:17+44
    $t4 := $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $t2);

    // if ($t4) goto L1 else goto L0 at .\sources\account_control.move:69:9+6
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at .\sources\account_control.move:71:13+24
    assume {:print "$at(2,2632,2656)"} true;
L1:

    // $t5 := exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t1) at .\sources\account_control.move:71:13+24
    assume {:print "$at(2,2632,2656)"} true;
    $t5 := $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t1);

    // if ($t5) goto L2 else goto L4 at .\sources\account_control.move:71:9+128
    if ($t5) { goto L2; } else { goto L4; }

    // label L2 at .\sources\account_control.move:72:24+27
    assume {:print "$at(2,2684,2711)"} true;
L2:

    // $t6 := move_from<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t1) on_abort goto L6 with $t3 at .\sources\account_control.move:72:24+27
    assume {:print "$at(2,2684,2711)"} true;
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t1);
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory := $ResourceRemove($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(2,2684,2711)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,9):", $t3} $t3 == $t3;
        goto L6;
    }

    // account_control::destroy_lock($t6) on_abort goto L6 with $t3 at .\sources\account_control.move:73:13+18
    assume {:print "$at(2,2726,2744)"} true;
    call $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_destroy_lock($t6);
    if ($abort_flag) {
        assume {:print "$at(2,2726,2744)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,9):", $t3} $t3 == $t3;
        goto L6;
    }

    // label L4 at .\sources\account_control.move:68:88+258
    assume {:print "$at(2,2505,2763)"} true;
L4:

    // goto L5 at .\sources\account_control.move:68:88+258
    assume {:print "$at(2,2505,2763)"} true;
    goto L5;

    // label L0 at .\sources\account_control.move:69:88+10
    assume {:print "$at(2,2595,2605)"} true;
L0:

    // $t7 := 228 at .\sources\account_control.move:69:88+10
    assume {:print "$at(2,2595,2605)"} true;
    $t7 := 228;
    assume $IsValid'u64'($t7);

    // $t8 := error::permission_denied($t7) on_abort goto L6 with $t3 at .\sources\account_control.move:69:63+36
    call $t8 := $1_error_permission_denied($t7);
    if ($abort_flag) {
        assume {:print "$at(2,2570,2606)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(101,9):", $t3} $t3 == $t3;
        goto L6;
    }

    // trace_abort($t8) at .\sources\account_control.move:69:9+6
    assume {:print "$at(2,2516,2522)"} true;
    assume {:print "$track_abort(101,9):", $t8} $t8 == $t8;

    // $t3 := move($t8) at .\sources\account_control.move:69:9+6
    $t3 := $t8;

    // goto L6 at .\sources\account_control.move:69:9+6
    goto L6;

    // label L5 at .\sources\account_control.move:75:5+1
    assume {:print "$at(2,2762,2763)"} true;
L5:

    // assert exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::LockAdmin>(signer::$address_of($t0)) at .\sources\account_control.move:54:5+53
    assume {:print "$at(2,1897,1950)"} true;
    assert {:msg "assert_failed(2,1897,1950): post-condition does not hold"}
      $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_LockAdmin_$memory, $1_signer_$address_of($t0));

    // assert Implies(exists[@34]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t1), Not(exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t1))) at .\sources\account_control.move:57:5+68
    assume {:print "$at(2,2022,2090)"} true;
    assert {:msg "assert_failed(2,2022,2090): post-condition does not hold"}
      ($ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory#34, $t1) ==> !$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t1));

    // assert Implies(Not(exists[@34]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t1)), Not(exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>($t1))) at .\sources\account_control.move:60:5+69
    assume {:print "$at(2,2163,2232)"} true;
    assert {:msg "assert_failed(2,2163,2232): post-condition does not hold"}
      (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory#34, $t1) ==> !$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $t1));

    // return () at .\sources\account_control.move:60:5+69
    return;

    // label L6 at .\sources\account_control.move:75:5+1
    assume {:print "$at(2,2762,2763)"} true;
L6:

    // abort($t3) at .\sources\account_control.move:75:5+1
    assume {:print "$at(2,2762,2763)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// struct fungible_asset::BurnCapability at .\sources\fungible_asset.move:45:5+32
datatype $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability($dummy_field: bool)
}
function {:inline} $Update'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability'_dummy_field(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability, x: bool): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability(x)
}
function $IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability'(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability'(s1: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability, s2: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability): bool {
    s1 == s2
}
var $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability_$memory: $Memory $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability;

// struct fungible_asset::FreezeCapability at .\sources\fungible_asset.move:48:5+34
datatype $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability($dummy_field: bool)
}
function {:inline} $Update'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability'_dummy_field(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability, x: bool): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability(x)
}
function $IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability'(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability'(s1: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability, s2: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability): bool {
    s1 == s2
}
var $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability_$memory: $Memory $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability;

// struct fungible_asset::MintCapability at .\sources\fungible_asset.move:42:5+32
datatype $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability($dummy_field: bool)
}
function {:inline} $Update'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability'_dummy_field(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability, x: bool): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability(x)
}
function $IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability'(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability'(s1: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability, s2: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability): bool {
    s1 == s2
}
var $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability_$memory: $Memory $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability;

// struct fungible_asset::DepositCapability at .\sources\fungible_asset.move:56:5+35
datatype $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability($dummy_field: bool)
}
function {:inline} $Update'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability'_dummy_field(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability, x: bool): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability(x)
}
function $IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability'(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability'(s1: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability, s2: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability): bool {
    s1 == s2
}
var $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability_$memory: $Memory $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability;

// struct fungible_asset::EmissionState at .\sources\fungible_asset.move:36:1+80
datatype $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState($max_supply: int, $total_emitted: int)
}
function {:inline} $Update'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'_max_supply(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState, x: int): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState(x, s->$total_emitted)
}
function {:inline} $Update'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'_total_emitted(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState, x: int): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState(s->$max_supply, x)
}
function $IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState): bool {
    $IsValid'u64'(s->$max_supply)
      && $IsValid'u64'(s->$total_emitted)
}
function {:inline} $IsEqual'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'(s1: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState, s2: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState): bool {
    s1 == s2
}
var $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory: $Memory $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState;

// struct fungible_asset::ManagedFungibleAsset at .\sources\fungible_asset.move:29:5+136
datatype $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset($mint_ref: $1_fungible_asset_MintRef, $transfer_ref: $1_fungible_asset_TransferRef, $burn_ref: $1_fungible_asset_BurnRef)
}
function {:inline} $Update'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'_mint_ref(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset, x: $1_fungible_asset_MintRef): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset(x, s->$transfer_ref, s->$burn_ref)
}
function {:inline} $Update'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'_transfer_ref(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset, x: $1_fungible_asset_TransferRef): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset(s->$mint_ref, x, s->$burn_ref)
}
function {:inline} $Update'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'_burn_ref(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset, x: $1_fungible_asset_BurnRef): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset(s->$mint_ref, s->$transfer_ref, x)
}
function $IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset): bool {
    $IsValid'$1_fungible_asset_MintRef'(s->$mint_ref)
      && $IsValid'$1_fungible_asset_TransferRef'(s->$transfer_ref)
      && $IsValid'$1_fungible_asset_BurnRef'(s->$burn_ref)
}
function {:inline} $IsEqual'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'(s1: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset, s2: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset): bool {
    s1 == s2
}
var $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory: $Memory $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset;

// struct fungible_asset::UnfreezeCapability at .\sources\fungible_asset.move:49:5+36
datatype $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability($dummy_field: bool)
}
function {:inline} $Update'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability'_dummy_field(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability, x: bool): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability(x)
}
function $IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability'(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability'(s1: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability, s2: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability): bool {
    s1 == s2
}
var $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability_$memory: $Memory $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability;

// struct fungible_asset::WithdrawCapability at .\sources\fungible_asset.move:52:5+36
datatype $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability($dummy_field: bool)
}
function {:inline} $Update'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability'_dummy_field(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability, x: bool): $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability {
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability(x)
}
function $IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability'(s: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability'(s1: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability, s2: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability): bool {
    s1 == s2
}
var $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability_$memory: $Memory $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability;

// fun fungible_asset::burn [verification] at .\sources\fungible_asset.move:226:5+410
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_burn$verify(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: $1_object_Object'$1_fungible_asset_Metadata';
    var $t4: $1_object_Object'$1_fungible_asset_Metadata';
    var $t5: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t6: $1_fungible_asset_BurnRef;
    var $t7: int;
    var $t8: $1_object_Object'$1_fungible_asset_Metadata';
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset;
    var $t13: $1_fungible_asset_BurnRef;
    var $t14: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t15: int;
    var $t16: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#37: $Memory $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:226:5+1
    assume {:print "$at(3,8425,8426)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\fungible_asset.move:226:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at .\sources\fungible_asset.move:226:5+1
    assume $IsValid'u64'($t2);

    // assume forall $rsc: 0x1::features::Features: ResourceDomain<0x1::features::Features>(): WellFormed($rsc) at .\sources\fungible_asset.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: 0x1::chain_status::GenesisEndMarker: ResourceDomain<0x1::chain_status::GenesisEndMarker>(): WellFormed($rsc) at .\sources\fungible_asset.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: 0x1::timestamp::CurrentTimeMicroseconds: ResourceDomain<0x1::timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at .\sources\fungible_asset.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: 0x1::object::ObjectCore: ResourceDomain<0x1::object::ObjectCore>(): WellFormed($rsc) at .\sources\fungible_asset.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::ConcurrentFungibleBalance: ResourceDomain<0x1::fungible_asset::ConcurrentFungibleBalance>(): WellFormed($rsc) at .\sources\fungible_asset.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentFungibleBalance'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::ConcurrentSupply: ResourceDomain<0x1::fungible_asset::ConcurrentSupply>(): WellFormed($rsc) at .\sources\fungible_asset.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentSupply'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::FungibleStore: ResourceDomain<0x1::fungible_asset::FungibleStore>(): WellFormed($rsc) at .\sources\fungible_asset.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0);
    ($IsValid'$1_fungible_asset_FungibleStore'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::Supply: ResourceDomain<0x1::fungible_asset::Supply>(): And(WellFormed($rsc), Le(Len<u128>(select option::Option.vec(select fungible_asset::Supply.maximum($rsc))), 1)) at .\sources\fungible_asset.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Supply_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Supply_$memory, $a_0);
    (($IsValid'$1_fungible_asset_Supply'($rsc) && (LenVec($rsc->$maximum->$vec) <= 1)))));

    // assume forall $rsc: 0x1::reconfiguration::Configuration: ResourceDomain<0x1::reconfiguration::Configuration>(): WellFormed($rsc) at .\sources\fungible_asset.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>(): WellFormed($rsc) at .\sources\fungible_asset.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(): WellFormed($rsc) at .\sources\fungible_asset.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>(): WellFormed($rsc) at .\sources\fungible_asset.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<0x1::timestamp::CurrentTimeMicroseconds>(0x1)) at .\sources\fungible_asset.move:226:5+410
    // global invariant at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at .\sources\fungible_asset.move:226:5+410
    // global invariant at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // assume Gt($t2, 0) at .\sources\fungible_asset.move:206:5+20
    assume {:print "$at(3,7582,7602)"} true;
    assume ($t2 > 0);

    // assume exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0)) at .\sources\fungible_asset.move:209:5+58
    assume {:print "$at(3,7670,7728)"} true;
    assume $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0));

    // @37 := save_mem(fungible_asset::EmissionState) at .\sources\fungible_asset.move:209:5+58
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#37 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory;

    // trace_local[admin]($t0) at .\sources\fungible_asset.move:226:5+1
    assume {:print "$at(3,8425,8426)"} true;
    assume {:print "$track_local(102,0,0):", $t0} $t0 == $t0;

    // trace_local[from]($t1) at .\sources\fungible_asset.move:226:5+1
    assume {:print "$track_local(102,0,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at .\sources\fungible_asset.move:226:5+1
    assume {:print "$track_local(102,0,2):", $t2} $t2 == $t2;

    // account_control::assert_not_locked($t1) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:227:9+40
    assume {:print "$at(3,8532,8572)"} true;
    call $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_assert_not_locked($t1);
    if ($abort_flag) {
        assume {:print "$at(3,8532,8572)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,0):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t8 := fungible_asset::get_metadata() on_abort goto L3 with $t7 at .\sources\fungible_asset.move:228:21+14
    assume {:print "$at(3,8595,8609)"} true;
    call $t8 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_get_metadata();
    if ($abort_flag) {
        assume {:print "$at(3,8595,8609)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,0):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_local[asset]($t8) at .\sources\fungible_asset.move:228:21+14
    assume {:print "$track_local(102,0,3):", $t8} $t8 == $t8;

    // trace_local[asset]($t8) at .\sources\fungible_asset.move:513:16+22
    assume {:print "$at(3,20092,20114)"} true;
    assume {:print "$track_local(102,0,4):", $t8} $t8 == $t8;

    // $t9 := signer::address_of($t0) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:517:41+25
    assume {:print "$at(3,20278,20303)"} true;
    call $t9 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(3,20278,20303)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,0):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t10 := object::is_owner<0x1::fungible_asset::Metadata>($t8, $t9) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:517:17+50
    call $t10 := $1_object_is_owner'$1_fungible_asset_Metadata'($t8, $t9);
    if ($abort_flag) {
        assume {:print "$at(3,20254,20304)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,0):", $t7} $t7 == $t7;
        goto L3;
    }

    // if ($t10) goto L1 else goto L0 at .\sources\fungible_asset.move:517:9+6
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at .\sources\fungible_asset.move:518:68+6
    assume {:print "$at(3,20413,20419)"} true;
L1:

    // $t11 := object::object_address<0x1::fungible_asset::Metadata>($t8) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:518:45+30
    assume {:print "$at(3,20390,20420)"} true;
    call $t11 := $1_object_object_address'$1_fungible_asset_Metadata'($t8);
    if ($abort_flag) {
        assume {:print "$at(3,20390,20420)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,0):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t12 := get_global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>($t11) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:518:9+67
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $t11)) {
        call $ExecFailureAbort();
    } else {
        $t12 := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $t11);
    }
    if ($abort_flag) {
        assume {:print "$at(3,20354,20421)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,0):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t13 := get_field<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>.burn_ref($t12) at .\sources\fungible_asset.move:229:24+46
    assume {:print "$at(3,8635,8681)"} true;
    $t13 := $t12->$burn_ref;

    // $t14 := primary_fungible_store::primary_store<0x1::fungible_asset::Metadata>($t1, $t8) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:230:27+50
    assume {:print "$at(3,8710,8760)"} true;
    call $t14 := $1_primary_fungible_store_primary_store'$1_fungible_asset_Metadata'($t1, $t8);
    if ($abort_flag) {
        assume {:print "$at(3,8710,8760)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,0):", $t7} $t7 == $t7;
        goto L3;
    }

    // fungible_asset::burn_from<0x1::fungible_asset::FungibleStore>($t13, $t14, $t2) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:231:9+56
    assume {:print "$at(3,8771,8827)"} true;
    call $1_fungible_asset_burn_from'$1_fungible_asset_FungibleStore'($t13, $t14, $t2);
    if ($abort_flag) {
        assume {:print "$at(3,8771,8827)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,0):", $t7} $t7 == $t7;
        goto L3;
    }

    // goto L2 at .\sources\fungible_asset.move:226:101+314
    assume {:print "$at(3,8521,8835)"} true;
    goto L2;

    // label L0 at .\sources\fungible_asset.move:517:94+10
    assume {:print "$at(3,20331,20341)"} true;
L0:

    // $t15 := 1 at .\sources\fungible_asset.move:517:94+10
    assume {:print "$at(3,20331,20341)"} true;
    $t15 := 1;
    assume $IsValid'u64'($t15);

    // $t16 := error::permission_denied($t15) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:517:69+36
    call $t16 := $1_error_permission_denied($t15);
    if ($abort_flag) {
        assume {:print "$at(3,20306,20342)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,0):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_abort($t16) at .\sources\fungible_asset.move:517:9+6
    assume {:print "$at(3,20246,20252)"} true;
    assume {:print "$track_abort(102,0):", $t16} $t16 == $t16;

    // $t7 := move($t16) at .\sources\fungible_asset.move:517:9+6
    $t7 := $t16;

    // goto L3 at .\sources\fungible_asset.move:517:9+6
    goto L3;

    // label L2 at .\sources\fungible_asset.move:232:5+1
    assume {:print "$at(3,8834,8835)"} true;
L2:

    // assert exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0)) at .\sources\fungible_asset.move:210:5+57
    assume {:print "$at(3,7734,7791)"} true;
    assert {:msg "assert_failed(3,7734,7791): post-condition does not hold"}
      $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0));

    // assert Eq<u64>(select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global[@37]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of[]($t0)))) at .\sources\fungible_asset.move:213:5+151
    assume {:print "$at(3,7882,8033)"} true;
    assert {:msg "assert_failed(3,7882,8033): post-condition does not hold"}
      $IsEqual'u64'($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$total_emitted, $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#37, $1_signer_$address_of($t0))->$total_emitted);

    // assert Eq<u64>(select fungible_asset::EmissionState.max_supply<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), select fungible_asset::EmissionState.max_supply<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global[@37]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of[]($t0)))) at .\sources\fungible_asset.move:217:5+145
    assume {:print "$at(3,8079,8224)"} true;
    assert {:msg "assert_failed(3,8079,8224): post-condition does not hold"}
      $IsEqual'u64'($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$max_supply, $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#37, $1_signer_$address_of($t0))->$max_supply);

    // return () at .\sources\fungible_asset.move:217:5+145
    return;

    // label L3 at .\sources\fungible_asset.move:232:5+1
    assume {:print "$at(3,8834,8835)"} true;
L3:

    // abort($t7) at .\sources\fungible_asset.move:232:5+1
    assume {:print "$at(3,8834,8835)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun fungible_asset::transfer [verification] at .\sources\fungible_asset.move:191:5+571
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_transfer$verify(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int) returns ()
{
    // declare local variables
    var $t4: $1_object_Object'$1_fungible_asset_Metadata';
    var $t5: $1_object_Object'$1_fungible_asset_Metadata';
    var $t6: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t7: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t8: $1_fungible_asset_TransferRef;
    var $t9: int;
    var $t10: $1_object_Object'$1_fungible_asset_Metadata';
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset;
    var $t15: $1_fungible_asset_TransferRef;
    var $t16: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t17: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t18: int;
    var $t19: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#38: $Memory $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:191:5+1
    assume {:print "$at(3,6949,6950)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\fungible_asset.move:191:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at .\sources\fungible_asset.move:191:5+1
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at .\sources\fungible_asset.move:191:5+1
    assume $IsValid'u64'($t3);

    // assume forall $rsc: 0x1::features::Features: ResourceDomain<0x1::features::Features>(): WellFormed($rsc) at .\sources\fungible_asset.move:191:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: 0x1::chain_status::GenesisEndMarker: ResourceDomain<0x1::chain_status::GenesisEndMarker>(): WellFormed($rsc) at .\sources\fungible_asset.move:191:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: 0x1::timestamp::CurrentTimeMicroseconds: ResourceDomain<0x1::timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at .\sources\fungible_asset.move:191:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: 0x1::object::ObjectCore: ResourceDomain<0x1::object::ObjectCore>(): WellFormed($rsc) at .\sources\fungible_asset.move:191:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: 0x1::object::Untransferable: ResourceDomain<0x1::object::Untransferable>(): WellFormed($rsc) at .\sources\fungible_asset.move:191:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_Untransferable_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_Untransferable_$memory, $a_0);
    ($IsValid'$1_object_Untransferable'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::Untransferable: ResourceDomain<0x1::fungible_asset::Untransferable>(): WellFormed($rsc) at .\sources\fungible_asset.move:191:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Untransferable_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Untransferable_$memory, $a_0);
    ($IsValid'$1_fungible_asset_Untransferable'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::ConcurrentFungibleBalance: ResourceDomain<0x1::fungible_asset::ConcurrentFungibleBalance>(): WellFormed($rsc) at .\sources\fungible_asset.move:191:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentFungibleBalance'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::FungibleStore: ResourceDomain<0x1::fungible_asset::FungibleStore>(): WellFormed($rsc) at .\sources\fungible_asset.move:191:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0);
    ($IsValid'$1_fungible_asset_FungibleStore'($rsc))));

    // assume forall $rsc: 0x1::primary_fungible_store::DeriveRefPod: ResourceDomain<0x1::primary_fungible_store::DeriveRefPod>(): WellFormed($rsc) at .\sources\fungible_asset.move:191:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0)}(var $rsc := $ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0);
    ($IsValid'$1_primary_fungible_store_DeriveRefPod'($rsc))));

    // assume forall $rsc: 0x1::reconfiguration::Configuration: ResourceDomain<0x1::reconfiguration::Configuration>(): WellFormed($rsc) at .\sources\fungible_asset.move:191:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>(): WellFormed($rsc) at .\sources\fungible_asset.move:191:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(): WellFormed($rsc) at .\sources\fungible_asset.move:191:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>(): WellFormed($rsc) at .\sources\fungible_asset.move:191:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<0x1::timestamp::CurrentTimeMicroseconds>(0x1)) at .\sources\fungible_asset.move:191:5+571
    // global invariant at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at .\sources\fungible_asset.move:191:5+571
    // global invariant at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // assume Gt($t3, 0) at .\sources\fungible_asset.move:162:5+20
    assume {:print "$at(3,5827,5847)"} true;
    assume ($t3 > 0);

    // assume Neq<address>($t1, $t2) at .\sources\fungible_asset.move:165:5+20
    assume {:print "$at(3,5905,5925)"} true;
    assume !$IsEqual'address'($t1, $t2);

    // assume exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0)) at .\sources\fungible_asset.move:168:5+58
    assume {:print "$at(3,5971,6029)"} true;
    assume $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0));

    // @38 := save_mem(fungible_asset::EmissionState) at .\sources\fungible_asset.move:168:5+58
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#38 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory;

    // trace_local[admin]($t0) at .\sources\fungible_asset.move:191:5+1
    assume {:print "$at(3,6949,6950)"} true;
    assume {:print "$track_local(102,1,0):", $t0} $t0 == $t0;

    // trace_local[from]($t1) at .\sources\fungible_asset.move:191:5+1
    assume {:print "$track_local(102,1,1):", $t1} $t1 == $t1;

    // trace_local[to]($t2) at .\sources\fungible_asset.move:191:5+1
    assume {:print "$track_local(102,1,2):", $t2} $t2 == $t2;

    // trace_local[amount]($t3) at .\sources\fungible_asset.move:191:5+1
    assume {:print "$track_local(102,1,3):", $t3} $t3 == $t3;

    // account_control::assert_not_locked($t1) on_abort goto L3 with $t9 at .\sources\fungible_asset.move:193:5+40
    assume {:print "$at(3,7074,7114)"} true;
    call $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_assert_not_locked($t1);
    if ($abort_flag) {
        assume {:print "$at(3,7074,7114)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(102,1):", $t9} $t9 == $t9;
        goto L3;
    }

    // account_control::assert_not_locked($t2) on_abort goto L3 with $t9 at .\sources\fungible_asset.move:194:5+38
    assume {:print "$at(3,7121,7159)"} true;
    call $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_assert_not_locked($t2);
    if ($abort_flag) {
        assume {:print "$at(3,7121,7159)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(102,1):", $t9} $t9 == $t9;
        goto L3;
    }

    // $t10 := fungible_asset::get_metadata() on_abort goto L3 with $t9 at .\sources\fungible_asset.move:196:17+14
    assume {:print "$at(3,7180,7194)"} true;
    call $t10 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_get_metadata();
    if ($abort_flag) {
        assume {:print "$at(3,7180,7194)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(102,1):", $t9} $t9 == $t9;
        goto L3;
    }

    // trace_local[asset]($t10) at .\sources\fungible_asset.move:196:17+14
    assume {:print "$track_local(102,1,4):", $t10} $t10 == $t10;

    // trace_local[asset]($t10) at .\sources\fungible_asset.move:513:16+22
    assume {:print "$at(3,20092,20114)"} true;
    assume {:print "$track_local(102,1,5):", $t10} $t10 == $t10;

    // $t11 := signer::address_of($t0) on_abort goto L3 with $t9 at .\sources\fungible_asset.move:517:41+25
    assume {:print "$at(3,20278,20303)"} true;
    call $t11 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(3,20278,20303)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(102,1):", $t9} $t9 == $t9;
        goto L3;
    }

    // $t12 := object::is_owner<0x1::fungible_asset::Metadata>($t10, $t11) on_abort goto L3 with $t9 at .\sources\fungible_asset.move:517:17+50
    call $t12 := $1_object_is_owner'$1_fungible_asset_Metadata'($t10, $t11);
    if ($abort_flag) {
        assume {:print "$at(3,20254,20304)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(102,1):", $t9} $t9 == $t9;
        goto L3;
    }

    // if ($t12) goto L1 else goto L0 at .\sources\fungible_asset.move:517:9+6
    if ($t12) { goto L1; } else { goto L0; }

    // label L1 at .\sources\fungible_asset.move:518:68+6
    assume {:print "$at(3,20413,20419)"} true;
L1:

    // $t13 := object::object_address<0x1::fungible_asset::Metadata>($t10) on_abort goto L3 with $t9 at .\sources\fungible_asset.move:518:45+30
    assume {:print "$at(3,20390,20420)"} true;
    call $t13 := $1_object_object_address'$1_fungible_asset_Metadata'($t10);
    if ($abort_flag) {
        assume {:print "$at(3,20390,20420)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(102,1):", $t9} $t9 == $t9;
        goto L3;
    }

    // $t14 := get_global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>($t13) on_abort goto L3 with $t9 at .\sources\fungible_asset.move:518:9+67
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $t13)) {
        call $ExecFailureAbort();
    } else {
        $t14 := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $t13);
    }
    if ($abort_flag) {
        assume {:print "$at(3,20354,20421)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(102,1):", $t9} $t9 == $t9;
        goto L3;
    }

    // $t15 := get_field<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>.transfer_ref($t14) at .\sources\fungible_asset.move:197:24+50
    assume {:print "$at(3,7220,7270)"} true;
    $t15 := $t14->$transfer_ref;

    // $t16 := primary_fungible_store::primary_store<0x1::fungible_asset::Metadata>($t1, $t10) on_abort goto L3 with $t9 at .\sources\fungible_asset.move:198:23+50
    assume {:print "$at(3,7295,7345)"} true;
    call $t16 := $1_primary_fungible_store_primary_store'$1_fungible_asset_Metadata'($t1, $t10);
    if ($abort_flag) {
        assume {:print "$at(3,7295,7345)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(102,1):", $t9} $t9 == $t9;
        goto L3;
    }

    // $t17 := primary_fungible_store::ensure_primary_store_exists<0x1::fungible_asset::Metadata>($t2, $t10) on_abort goto L3 with $t9 at .\sources\fungible_asset.move:199:21+62
    assume {:print "$at(3,7368,7430)"} true;
    call $t17 := $1_primary_fungible_store_ensure_primary_store_exists'$1_fungible_asset_Metadata'($t2, $t10);
    if ($abort_flag) {
        assume {:print "$at(3,7368,7430)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(102,1):", $t9} $t9 == $t9;
        goto L3;
    }

    // fungible_asset::transfer_with_ref<0x1::fungible_asset::FungibleStore>($t15, $t16, $t17, $t3) on_abort goto L3 with $t9 at .\sources\fungible_asset.move:200:5+79
    assume {:print "$at(3,7437,7516)"} true;
    call $1_fungible_asset_transfer_with_ref'$1_fungible_asset_FungibleStore'($t15, $t16, $t17, $t3);
    if ($abort_flag) {
        assume {:print "$at(3,7437,7516)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(102,1):", $t9} $t9 == $t9;
        goto L3;
    }

    // goto L2 at .\sources\fungible_asset.move:192:35+453
    assume {:print "$at(3,7067,7520)"} true;
    goto L2;

    // label L0 at .\sources\fungible_asset.move:517:94+10
    assume {:print "$at(3,20331,20341)"} true;
L0:

    // $t18 := 1 at .\sources\fungible_asset.move:517:94+10
    assume {:print "$at(3,20331,20341)"} true;
    $t18 := 1;
    assume $IsValid'u64'($t18);

    // $t19 := error::permission_denied($t18) on_abort goto L3 with $t9 at .\sources\fungible_asset.move:517:69+36
    call $t19 := $1_error_permission_denied($t18);
    if ($abort_flag) {
        assume {:print "$at(3,20306,20342)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(102,1):", $t9} $t9 == $t9;
        goto L3;
    }

    // trace_abort($t19) at .\sources\fungible_asset.move:517:9+6
    assume {:print "$at(3,20246,20252)"} true;
    assume {:print "$track_abort(102,1):", $t19} $t19 == $t19;

    // $t9 := move($t19) at .\sources\fungible_asset.move:517:9+6
    $t9 := $t19;

    // goto L3 at .\sources\fungible_asset.move:517:9+6
    goto L3;

    // label L2 at .\sources\fungible_asset.move:201:1+1
    assume {:print "$at(3,7519,7520)"} true;
L2:

    // assert exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0)) at .\sources\fungible_asset.move:169:5+57
    assume {:print "$at(3,6035,6092)"} true;
    assert {:msg "assert_failed(3,6035,6092): post-condition does not hold"}
      $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0));

    // assert Eq<u64>(select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global[@38]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of[]($t0)))) at .\sources\fungible_asset.move:172:5+151
    assume {:print "$at(3,6159,6310)"} true;
    assert {:msg "assert_failed(3,6159,6310): post-condition does not hold"}
      $IsEqual'u64'($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$total_emitted, $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#38, $1_signer_$address_of($t0))->$total_emitted);

    // assert Eq<u64>(select fungible_asset::EmissionState.max_supply<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), select fungible_asset::EmissionState.max_supply<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global[@38]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of[]($t0)))) at .\sources\fungible_asset.move:175:5+145
    assume {:print "$at(3,6318,6463)"} true;
    assert {:msg "assert_failed(3,6318,6463): post-condition does not hold"}
      $IsEqual'u64'($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$max_supply, $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#38, $1_signer_$address_of($t0))->$max_supply);

    // assert Ge(select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global[@38]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of[]($t0)))) at .\sources\fungible_asset.move:179:5+151
    assume {:print "$at(3,6544,6695)"} true;
    assert {:msg "assert_failed(3,6544,6695): post-condition does not hold"}
      ($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$total_emitted >= $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#38, $1_signer_$address_of($t0))->$total_emitted);

    // return () at .\sources\fungible_asset.move:179:5+151
    return;

    // label L3 at .\sources\fungible_asset.move:201:1+1
    assume {:print "$at(3,7519,7520)"} true;
L3:

    // abort($t9) at .\sources\fungible_asset.move:201:1+1
    assume {:print "$at(3,7519,7520)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun fungible_asset::deposit [verification] at .\sources\fungible_asset.move:349:5+436
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_deposit$verify(_$t0: $signer, _$t1: int, _$t2: $1_fungible_asset_FungibleAsset) returns ()
{
    // declare local variables
    var $t3: $1_object_Object'$1_fungible_asset_Metadata';
    var $t4: $1_object_Object'$1_fungible_asset_Metadata';
    var $t5: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t6: $1_fungible_asset_TransferRef;
    var $t7: int;
    var $t8: $1_object_Object'$1_fungible_asset_Metadata';
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset;
    var $t13: $1_fungible_asset_TransferRef;
    var $t14: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t15: int;
    var $t16: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#39: $Memory $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:349:5+1
    assume {:print "$at(3,14033,14034)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\fungible_asset.move:349:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at .\sources\fungible_asset.move:349:5+1
    assume $IsValid'$1_fungible_asset_FungibleAsset'($t2);

    // assume forall $rsc: 0x1::features::Features: ResourceDomain<0x1::features::Features>(): WellFormed($rsc) at .\sources\fungible_asset.move:349:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: 0x1::chain_status::GenesisEndMarker: ResourceDomain<0x1::chain_status::GenesisEndMarker>(): WellFormed($rsc) at .\sources\fungible_asset.move:349:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: 0x1::timestamp::CurrentTimeMicroseconds: ResourceDomain<0x1::timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at .\sources\fungible_asset.move:349:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: 0x1::object::ObjectCore: ResourceDomain<0x1::object::ObjectCore>(): WellFormed($rsc) at .\sources\fungible_asset.move:349:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: 0x1::object::Untransferable: ResourceDomain<0x1::object::Untransferable>(): WellFormed($rsc) at .\sources\fungible_asset.move:349:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_Untransferable_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_Untransferable_$memory, $a_0);
    ($IsValid'$1_object_Untransferable'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::Untransferable: ResourceDomain<0x1::fungible_asset::Untransferable>(): WellFormed($rsc) at .\sources\fungible_asset.move:349:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Untransferable_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Untransferable_$memory, $a_0);
    ($IsValid'$1_fungible_asset_Untransferable'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::ConcurrentFungibleBalance: ResourceDomain<0x1::fungible_asset::ConcurrentFungibleBalance>(): WellFormed($rsc) at .\sources\fungible_asset.move:349:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentFungibleBalance'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::FungibleStore: ResourceDomain<0x1::fungible_asset::FungibleStore>(): WellFormed($rsc) at .\sources\fungible_asset.move:349:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0);
    ($IsValid'$1_fungible_asset_FungibleStore'($rsc))));

    // assume forall $rsc: 0x1::primary_fungible_store::DeriveRefPod: ResourceDomain<0x1::primary_fungible_store::DeriveRefPod>(): WellFormed($rsc) at .\sources\fungible_asset.move:349:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0)}(var $rsc := $ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0);
    ($IsValid'$1_primary_fungible_store_DeriveRefPod'($rsc))));

    // assume forall $rsc: 0x1::reconfiguration::Configuration: ResourceDomain<0x1::reconfiguration::Configuration>(): WellFormed($rsc) at .\sources\fungible_asset.move:349:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>(): WellFormed($rsc) at .\sources\fungible_asset.move:349:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(): WellFormed($rsc) at .\sources\fungible_asset.move:349:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>(): WellFormed($rsc) at .\sources\fungible_asset.move:349:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<0x1::timestamp::CurrentTimeMicroseconds>(0x1)) at .\sources\fungible_asset.move:349:5+436
    // global invariant at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at .\sources\fungible_asset.move:349:5+436
    // global invariant at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // assume exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0)) at .\sources\fungible_asset.move:329:5+58
    assume {:print "$at(3,13186,13244)"} true;
    assume $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0));

    // @39 := save_mem(fungible_asset::EmissionState) at .\sources\fungible_asset.move:329:5+58
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#39 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory;

    // trace_local[admin]($t0) at .\sources\fungible_asset.move:349:5+1
    assume {:print "$at(3,14033,14034)"} true;
    assume {:print "$track_local(102,2,0):", $t0} $t0 == $t0;

    // trace_local[to]($t1) at .\sources\fungible_asset.move:349:5+1
    assume {:print "$track_local(102,2,1):", $t1} $t1 == $t1;

    // trace_local[fa]($t2) at .\sources\fungible_asset.move:349:5+1
    assume {:print "$track_local(102,2,2):", $t2} $t2 == $t2;

    // account_control::assert_not_locked($t1) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:350:13+38
    assume {:print "$at(3,14145,14183)"} true;
    call $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_assert_not_locked($t1);
    if ($abort_flag) {
        assume {:print "$at(3,14145,14183)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,2):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t8 := fungible_asset::get_metadata() on_abort goto L3 with $t7 at .\sources\fungible_asset.move:351:21+14
    assume {:print "$at(3,14206,14220)"} true;
    call $t8 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_get_metadata();
    if ($abort_flag) {
        assume {:print "$at(3,14206,14220)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,2):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_local[asset]($t8) at .\sources\fungible_asset.move:351:21+14
    assume {:print "$track_local(102,2,3):", $t8} $t8 == $t8;

    // trace_local[asset]($t8) at .\sources\fungible_asset.move:513:16+22
    assume {:print "$at(3,20092,20114)"} true;
    assume {:print "$track_local(102,2,4):", $t8} $t8 == $t8;

    // $t9 := signer::address_of($t0) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:517:41+25
    assume {:print "$at(3,20278,20303)"} true;
    call $t9 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(3,20278,20303)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,2):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t10 := object::is_owner<0x1::fungible_asset::Metadata>($t8, $t9) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:517:17+50
    call $t10 := $1_object_is_owner'$1_fungible_asset_Metadata'($t8, $t9);
    if ($abort_flag) {
        assume {:print "$at(3,20254,20304)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,2):", $t7} $t7 == $t7;
        goto L3;
    }

    // if ($t10) goto L1 else goto L0 at .\sources\fungible_asset.move:517:9+6
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at .\sources\fungible_asset.move:518:68+6
    assume {:print "$at(3,20413,20419)"} true;
L1:

    // $t11 := object::object_address<0x1::fungible_asset::Metadata>($t8) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:518:45+30
    assume {:print "$at(3,20390,20420)"} true;
    call $t11 := $1_object_object_address'$1_fungible_asset_Metadata'($t8);
    if ($abort_flag) {
        assume {:print "$at(3,20390,20420)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,2):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t12 := get_global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>($t11) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:518:9+67
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $t11)) {
        call $ExecFailureAbort();
    } else {
        $t12 := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $t11);
    }
    if ($abort_flag) {
        assume {:print "$at(3,20354,20421)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,2):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t13 := get_field<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>.transfer_ref($t12) at .\sources\fungible_asset.move:352:28+50
    assume {:print "$at(3,14250,14300)"} true;
    $t13 := $t12->$transfer_ref;

    // $t14 := primary_fungible_store::ensure_primary_store_exists<0x1::fungible_asset::Metadata>($t1, $t8) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:353:25+62
    assume {:print "$at(3,14327,14389)"} true;
    call $t14 := $1_primary_fungible_store_ensure_primary_store_exists'$1_fungible_asset_Metadata'($t1, $t8);
    if ($abort_flag) {
        assume {:print "$at(3,14327,14389)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,2):", $t7} $t7 == $t7;
        goto L3;
    }

    // fungible_asset::deposit_with_ref<0x1::fungible_asset::FungibleStore>($t13, $t14, $t2) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:354:9+61
    assume {:print "$at(3,14400,14461)"} true;
    call $1_fungible_asset_deposit_with_ref'$1_fungible_asset_FungibleStore'($t13, $t14, $t2);
    if ($abort_flag) {
        assume {:print "$at(3,14400,14461)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,2):", $t7} $t7 == $t7;
        goto L3;
    }

    // goto L2 at .\sources\fungible_asset.move:349:102+339
    assume {:print "$at(3,14130,14469)"} true;
    goto L2;

    // label L0 at .\sources\fungible_asset.move:517:94+10
    assume {:print "$at(3,20331,20341)"} true;
L0:

    // $t15 := 1 at .\sources\fungible_asset.move:517:94+10
    assume {:print "$at(3,20331,20341)"} true;
    $t15 := 1;
    assume $IsValid'u64'($t15);

    // $t16 := error::permission_denied($t15) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:517:69+36
    call $t16 := $1_error_permission_denied($t15);
    if ($abort_flag) {
        assume {:print "$at(3,20306,20342)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,2):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_abort($t16) at .\sources\fungible_asset.move:517:9+6
    assume {:print "$at(3,20246,20252)"} true;
    assume {:print "$track_abort(102,2):", $t16} $t16 == $t16;

    // $t7 := move($t16) at .\sources\fungible_asset.move:517:9+6
    $t7 := $t16;

    // goto L3 at .\sources\fungible_asset.move:517:9+6
    goto L3;

    // label L2 at .\sources\fungible_asset.move:355:5+1
    assume {:print "$at(3,14468,14469)"} true;
L2:

    // assert exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0)) at .\sources\fungible_asset.move:330:5+57
    assume {:print "$at(3,13250,13307)"} true;
    assert {:msg "assert_failed(3,13250,13307): post-condition does not hold"}
      $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0));

    // assert Eq<u64>(select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global[@39]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of[]($t0)))) at .\sources\fungible_asset.move:333:5+151
    assume {:print "$at(3,13362,13513)"} true;
    assert {:msg "assert_failed(3,13362,13513): post-condition does not hold"}
      $IsEqual'u64'($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$total_emitted, $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#39, $1_signer_$address_of($t0))->$total_emitted);

    // assert Eq<u64>(select fungible_asset::EmissionState.max_supply<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), select fungible_asset::EmissionState.max_supply<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global[@39]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of[]($t0)))) at .\sources\fungible_asset.move:337:5+145
    assume {:print "$at(3,13559,13704)"} true;
    assert {:msg "assert_failed(3,13559,13704): post-condition does not hold"}
      $IsEqual'u64'($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$max_supply, $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#39, $1_signer_$address_of($t0))->$max_supply);

    // return () at .\sources\fungible_asset.move:337:5+145
    return;

    // label L3 at .\sources\fungible_asset.move:355:5+1
    assume {:print "$at(3,14468,14469)"} true;
L3:

    // abort($t7) at .\sources\fungible_asset.move:355:5+1
    assume {:print "$at(3,14468,14469)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun fungible_asset::mint [verification] at .\sources\fungible_asset.move:127:1+1182
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_mint$verify(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: $1_object_Object'$1_fungible_asset_Metadata';
    var $t4: $Mutation ($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState);
    var $t5: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset;
    var $t6: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t7: $1_fungible_asset_FungibleAsset;
    var $t8: int;
    var $t9: $1_object_Object'$1_fungible_asset_Metadata';
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: $Mutation ($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState);
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset;
    var $t20: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t21: $1_fungible_asset_MintRef;
    var $t22: $1_fungible_asset_FungibleAsset;
    var $t23: $1_fungible_asset_TransferRef;
    var $t24: int;
    var $t25: int;
    var $t26: $Mutation (int);
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#40: $Memory $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:127:1+1
    assume {:print "$at(3,4573,4574)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\fungible_asset.move:127:1+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at .\sources\fungible_asset.move:127:1+1
    assume $IsValid'u64'($t2);

    // assume forall $rsc: 0x1::features::Features: ResourceDomain<0x1::features::Features>(): WellFormed($rsc) at .\sources\fungible_asset.move:127:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: 0x1::chain_status::GenesisEndMarker: ResourceDomain<0x1::chain_status::GenesisEndMarker>(): WellFormed($rsc) at .\sources\fungible_asset.move:127:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: 0x1::timestamp::CurrentTimeMicroseconds: ResourceDomain<0x1::timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at .\sources\fungible_asset.move:127:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: 0x1::object::ObjectCore: ResourceDomain<0x1::object::ObjectCore>(): WellFormed($rsc) at .\sources\fungible_asset.move:127:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: 0x1::object::Untransferable: ResourceDomain<0x1::object::Untransferable>(): WellFormed($rsc) at .\sources\fungible_asset.move:127:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_Untransferable_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_Untransferable_$memory, $a_0);
    ($IsValid'$1_object_Untransferable'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::Untransferable: ResourceDomain<0x1::fungible_asset::Untransferable>(): WellFormed($rsc) at .\sources\fungible_asset.move:127:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Untransferable_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Untransferable_$memory, $a_0);
    ($IsValid'$1_fungible_asset_Untransferable'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::ConcurrentFungibleBalance: ResourceDomain<0x1::fungible_asset::ConcurrentFungibleBalance>(): WellFormed($rsc) at .\sources\fungible_asset.move:127:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentFungibleBalance'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::ConcurrentSupply: ResourceDomain<0x1::fungible_asset::ConcurrentSupply>(): WellFormed($rsc) at .\sources\fungible_asset.move:127:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentSupply'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::FungibleStore: ResourceDomain<0x1::fungible_asset::FungibleStore>(): WellFormed($rsc) at .\sources\fungible_asset.move:127:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0);
    ($IsValid'$1_fungible_asset_FungibleStore'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::Supply: ResourceDomain<0x1::fungible_asset::Supply>(): And(WellFormed($rsc), Le(Len<u128>(select option::Option.vec(select fungible_asset::Supply.maximum($rsc))), 1)) at .\sources\fungible_asset.move:127:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Supply_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Supply_$memory, $a_0);
    (($IsValid'$1_fungible_asset_Supply'($rsc) && (LenVec($rsc->$maximum->$vec) <= 1)))));

    // assume forall $rsc: 0x1::primary_fungible_store::DeriveRefPod: ResourceDomain<0x1::primary_fungible_store::DeriveRefPod>(): WellFormed($rsc) at .\sources\fungible_asset.move:127:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0)}(var $rsc := $ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0);
    ($IsValid'$1_primary_fungible_store_DeriveRefPod'($rsc))));

    // assume forall $rsc: 0x1::reconfiguration::Configuration: ResourceDomain<0x1::reconfiguration::Configuration>(): WellFormed($rsc) at .\sources\fungible_asset.move:127:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>(): WellFormed($rsc) at .\sources\fungible_asset.move:127:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(): WellFormed($rsc) at .\sources\fungible_asset.move:127:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>(): WellFormed($rsc) at .\sources\fungible_asset.move:127:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<0x1::timestamp::CurrentTimeMicroseconds>(0x1)) at .\sources\fungible_asset.move:127:1+1182
    // global invariant at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at .\sources\fungible_asset.move:127:1+1182
    // global invariant at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // assume Gt($t2, 0) at .\sources\fungible_asset.move:99:5+20
    assume {:print "$at(3,3420,3440)"} true;
    assume ($t2 > 0);

    // assume exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0)) at .\sources\fungible_asset.move:102:5+59
    assume {:print "$at(3,3502,3561)"} true;
    assume $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0));

    // assume Le(Add(select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), $t2), select fungible_asset::EmissionState.max_supply<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0)))) at .\sources\fungible_asset.move:106:5+155
    assume {:print "$at(3,3695,3850)"} true;
    assume (($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$total_emitted + $t2) <= $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$max_supply);

    // @40 := save_mem(fungible_asset::EmissionState) at .\sources\fungible_asset.move:106:5+155
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#40 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory;

    // trace_local[minter]($t0) at .\sources\fungible_asset.move:127:1+1
    assume {:print "$at(3,4573,4574)"} true;
    assume {:print "$track_local(102,3,0):", $t0} $t0 == $t0;

    // trace_local[to]($t1) at .\sources\fungible_asset.move:127:1+1
    assume {:print "$track_local(102,3,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at .\sources\fungible_asset.move:127:1+1
    assume {:print "$track_local(102,3,2):", $t2} $t2 == $t2;

    // account_control::assert_not_locked($t1) on_abort goto L5 with $t8 at .\sources\fungible_asset.move:130:5+38
    assume {:print "$at(3,4696,4734)"} true;
    call $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_assert_not_locked($t1);
    if ($abort_flag) {
        assume {:print "$at(3,4696,4734)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(102,3):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t9 := fungible_asset::get_metadata() on_abort goto L5 with $t8 at .\sources\fungible_asset.move:133:17+14
    assume {:print "$at(3,4757,4771)"} true;
    call $t9 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_get_metadata();
    if ($abort_flag) {
        assume {:print "$at(3,4757,4771)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(102,3):", $t8} $t8 == $t8;
        goto L5;
    }

    // trace_local[asset]($t9) at .\sources\fungible_asset.move:133:17+14
    assume {:print "$track_local(102,3,3):", $t9} $t9 == $t9;

    // $t10 := signer::address_of($t0) on_abort goto L5 with $t8 at .\sources\fungible_asset.move:137:33+26
    assume {:print "$at(3,4881,4907)"} true;
    call $t10 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(3,4881,4907)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(102,3):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t11 := object::is_owner<0x1::fungible_asset::Metadata>($t9, $t10) on_abort goto L5 with $t8 at .\sources\fungible_asset.move:137:9+51
    call $t11 := $1_object_is_owner'$1_fungible_asset_Metadata'($t9, $t10);
    if ($abort_flag) {
        assume {:print "$at(3,4857,4908)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(102,3):", $t8} $t8 == $t8;
        goto L5;
    }

    // if ($t11) goto L1 else goto L0 at .\sources\fungible_asset.move:136:5+6
    assume {:print "$at(3,4839,4845)"} true;
    if ($t11) { goto L1; } else { goto L0; }

    // label L1 at .\sources\fungible_asset.move:142:59+26
    assume {:print "$at(3,5070,5096)"} true;
L1:

    // $t12 := signer::address_of($t0) on_abort goto L5 with $t8 at .\sources\fungible_asset.move:142:59+26
    assume {:print "$at(3,5070,5096)"} true;
    call $t12 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(3,5070,5096)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(102,3):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t13 := borrow_global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>($t12) on_abort goto L5 with $t8 at .\sources\fungible_asset.move:142:26+60
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $t12)) {
        call $ExecFailureAbort();
    } else {
        $t13 := $Mutation($Global($t12), EmptyVec(), $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $t12));
    }
    if ($abort_flag) {
        assume {:print "$at(3,5037,5097)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(102,3):", $t8} $t8 == $t8;
        goto L5;
    }

    // trace_local[emission_state]($t13) at .\sources\fungible_asset.move:142:26+60
    $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState' := $Dereference($t13);
    assume {:print "$track_local(102,3,4):", $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'} $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState' == $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState';

    // $t14 := get_field<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>.total_emitted($t13) at .\sources\fungible_asset.move:144:9+28
    assume {:print "$at(3,5122,5150)"} true;
    $t14 := $Dereference($t13)->$total_emitted;

    // $t15 := +($t14, $t2) on_abort goto L5 with $t8 at .\sources\fungible_asset.move:144:9+37
    call $t15 := $AddU64($t14, $t2);
    if ($abort_flag) {
        assume {:print "$at(3,5122,5159)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(102,3):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t16 := get_field<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>.max_supply($t13) at .\sources\fungible_asset.move:144:50+25
    $t16 := $Dereference($t13)->$max_supply;

    // $t17 := <=($t15, $t16) at .\sources\fungible_asset.move:144:9+66
    call $t17 := $Le($t15, $t16);

    // if ($t17) goto L3 else goto L2 at .\sources\fungible_asset.move:143:5+6
    assume {:print "$at(3,5104,5110)"} true;
    if ($t17) { goto L3; } else { goto L2; }

    // label L3 at .\sources\fungible_asset.move:149:93+6
    assume {:print "$at(3,5375,5381)"} true;
L3:

    // $t18 := object::object_address<0x1::fungible_asset::Metadata>($t9) on_abort goto L5 with $t8 at .\sources\fungible_asset.move:149:70+30
    assume {:print "$at(3,5352,5382)"} true;
    call $t18 := $1_object_object_address'$1_fungible_asset_Metadata'($t9);
    if ($abort_flag) {
        assume {:print "$at(3,5352,5382)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(102,3):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t19 := get_global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>($t18) on_abort goto L5 with $t8 at .\sources\fungible_asset.move:149:34+67
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $t18)) {
        call $ExecFailureAbort();
    } else {
        $t19 := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $t18);
    }
    if ($abort_flag) {
        assume {:print "$at(3,5316,5383)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(102,3):", $t8} $t8 == $t8;
        goto L5;
    }

    // trace_local[managed_fungible_asset]($t19) at .\sources\fungible_asset.move:149:34+67
    assume {:print "$track_local(102,3,5):", $t19} $t19 == $t19;

    // $t20 := primary_fungible_store::ensure_primary_store_exists<0x1::fungible_asset::Metadata>($t1, $t9) on_abort goto L5 with $t8 at .\sources\fungible_asset.move:150:21+62
    assume {:print "$at(3,5406,5468)"} true;
    call $t20 := $1_primary_fungible_store_ensure_primary_store_exists'$1_fungible_asset_Metadata'($t1, $t9);
    if ($abort_flag) {
        assume {:print "$at(3,5406,5468)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(102,3):", $t8} $t8 == $t8;
        goto L5;
    }

    // trace_local[to_wallet]($t20) at .\sources\fungible_asset.move:150:21+62
    assume {:print "$track_local(102,3,6):", $t20} $t20 == $t20;

    // $t21 := get_field<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>.mint_ref($t19) at .\sources\fungible_asset.move:151:35+32
    assume {:print "$at(3,5505,5537)"} true;
    $t21 := $t19->$mint_ref;

    // $t22 := fungible_asset::mint($t21, $t2) on_abort goto L5 with $t8 at .\sources\fungible_asset.move:151:14+62
    call $t22 := $1_fungible_asset_mint($t21, $t2);
    if ($abort_flag) {
        assume {:print "$at(3,5484,5546)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(102,3):", $t8} $t8 == $t8;
        goto L5;
    }

    // trace_local[fa]($t22) at .\sources\fungible_asset.move:151:14+62
    assume {:print "$track_local(102,3,7):", $t22} $t22 == $t22;

    // $t23 := get_field<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>.transfer_ref($t19) at .\sources\fungible_asset.move:152:38+36
    assume {:print "$at(3,5586,5622)"} true;
    $t23 := $t19->$transfer_ref;

    // fungible_asset::deposit_with_ref<0x1::fungible_asset::FungibleStore>($t23, $t20, $t22) on_abort goto L5 with $t8 at .\sources\fungible_asset.move:152:5+85
    call $1_fungible_asset_deposit_with_ref'$1_fungible_asset_FungibleStore'($t23, $t20, $t22);
    if ($abort_flag) {
        assume {:print "$at(3,5553,5638)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(102,3):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t24 := get_field<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>.total_emitted($t13) at .\sources\fungible_asset.move:155:36+28
    assume {:print "$at(3,5714,5742)"} true;
    $t24 := $Dereference($t13)->$total_emitted;

    // $t25 := +($t24, $t2) on_abort goto L5 with $t8 at .\sources\fungible_asset.move:155:36+37
    call $t25 := $AddU64($t24, $t2);
    if ($abort_flag) {
        assume {:print "$at(3,5714,5751)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(102,3):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t26 := borrow_field<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>.total_emitted($t13) at .\sources\fungible_asset.move:155:5+28
    $t26 := $ChildMutation($t13, 1, $Dereference($t13)->$total_emitted);

    // write_ref($t26, $t25) at .\sources\fungible_asset.move:155:5+68
    $t26 := $UpdateMutation($t26, $t25);

    // write_back[Reference($t13).total_emitted (u64)]($t26) at .\sources\fungible_asset.move:155:5+68
    $t13 := $UpdateMutation($t13, $Update'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'_total_emitted($Dereference($t13), $Dereference($t26)));

    // write_back[0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState@]($t13) at .\sources\fungible_asset.move:155:5+68
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory := $ResourceUpdate($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $GlobalLocationAddress($t13),
        $Dereference($t13));

    // goto L4 at .\sources\fungible_asset.move:129:1+1066
    assume {:print "$at(3,4689,5755)"} true;
    goto L4;

    // label L2 at .\sources\fungible_asset.move:143:5+6
    assume {:print "$at(3,5104,5110)"} true;
L2:

    // drop($t13) at .\sources\fungible_asset.move:143:5+6
    assume {:print "$at(3,5104,5110)"} true;

    // $t27 := 225 at .\sources\fungible_asset.move:145:34+13
    assume {:print "$at(3,5224,5237)"} true;
    $t27 := 225;
    assume $IsValid'u64'($t27);

    // $t28 := error::permission_denied($t27) on_abort goto L5 with $t8 at .\sources\fungible_asset.move:145:9+39
    call $t28 := $1_error_permission_denied($t27);
    if ($abort_flag) {
        assume {:print "$at(3,5199,5238)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(102,3):", $t8} $t8 == $t8;
        goto L5;
    }

    // trace_abort($t28) at .\sources\fungible_asset.move:143:5+6
    assume {:print "$at(3,5104,5110)"} true;
    assume {:print "$track_abort(102,3):", $t28} $t28 == $t28;

    // $t8 := move($t28) at .\sources\fungible_asset.move:143:5+6
    $t8 := $t28;

    // goto L5 at .\sources\fungible_asset.move:143:5+6
    goto L5;

    // label L0 at .\sources\fungible_asset.move:136:5+6
    assume {:print "$at(3,4839,4845)"} true;
L0:

    // $t29 := 1 at .\sources\fungible_asset.move:138:34+10
    assume {:print "$at(3,4944,4954)"} true;
    $t29 := 1;
    assume $IsValid'u64'($t29);

    // $t30 := error::permission_denied($t29) on_abort goto L5 with $t8 at .\sources\fungible_asset.move:138:9+36
    call $t30 := $1_error_permission_denied($t29);
    if ($abort_flag) {
        assume {:print "$at(3,4919,4955)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(102,3):", $t8} $t8 == $t8;
        goto L5;
    }

    // trace_abort($t30) at .\sources\fungible_asset.move:136:5+6
    assume {:print "$at(3,4839,4845)"} true;
    assume {:print "$track_abort(102,3):", $t30} $t30 == $t30;

    // $t8 := move($t30) at .\sources\fungible_asset.move:136:5+6
    $t8 := $t30;

    // goto L5 at .\sources\fungible_asset.move:136:5+6
    goto L5;

    // label L4 at .\sources\fungible_asset.move:156:1+1
    assume {:print "$at(3,5754,5755)"} true;
L4:

    // assert exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0)) at .\sources\fungible_asset.move:103:5+58
    assume {:print "$at(3,3567,3625)"} true;
    assert {:msg "assert_failed(3,3567,3625): post-condition does not hold"}
      $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0));

    // assert Eq<u64>(select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), Add(select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global[@40]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of[]($t0))), $t2)) at .\sources\fungible_asset.move:110:5+162
    assume {:print "$at(3,3914,4076)"} true;
    assert {:msg "assert_failed(3,3914,4076): post-condition does not hold"}
      $IsEqual'u64'($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$total_emitted, ($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#40, $1_signer_$address_of($t0))->$total_emitted + $t2));

    // assert Eq<u64>(select fungible_asset::EmissionState.max_supply<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), select fungible_asset::EmissionState.max_supply<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global[@40]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of[]($t0)))) at .\sources\fungible_asset.move:114:5+147
    assume {:print "$at(3,4118,4265)"} true;
    assert {:msg "assert_failed(3,4118,4265): post-condition does not hold"}
      $IsEqual'u64'($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$max_supply, $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#40, $1_signer_$address_of($t0))->$max_supply);

    // assert Ge(select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global[@40]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of[]($t0)))) at .\sources\fungible_asset.move:118:5+153
    assume {:print "$at(3,4302,4455)"} true;
    assert {:msg "assert_failed(3,4302,4455): post-condition does not hold"}
      ($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$total_emitted >= $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#40, $1_signer_$address_of($t0))->$total_emitted);

    // return () at .\sources\fungible_asset.move:118:5+153
    return;

    // label L5 at .\sources\fungible_asset.move:156:1+1
    assume {:print "$at(3,5754,5755)"} true;
L5:

    // abort($t8) at .\sources\fungible_asset.move:156:1+1
    assume {:print "$at(3,5754,5755)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun fungible_asset::withdraw [verification] at .\sources\fungible_asset.move:318:5+443
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_withdraw$verify(_$t0: $signer, _$t1: int, _$t2: int) returns ($ret0: $1_fungible_asset_FungibleAsset)
{
    // declare local variables
    var $t3: $1_object_Object'$1_fungible_asset_Metadata';
    var $t4: $1_object_Object'$1_fungible_asset_Metadata';
    var $t5: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t6: $1_fungible_asset_TransferRef;
    var $t7: int;
    var $t8: $1_object_Object'$1_fungible_asset_Metadata';
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset;
    var $t13: $1_fungible_asset_TransferRef;
    var $t14: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t15: $1_fungible_asset_FungibleAsset;
    var $t16: int;
    var $t17: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#41: $Memory $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:318:5+1
    assume {:print "$at(3,12664,12665)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\fungible_asset.move:318:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at .\sources\fungible_asset.move:318:5+1
    assume $IsValid'address'($t2);

    // assume forall $rsc: 0x1::features::Features: ResourceDomain<0x1::features::Features>(): WellFormed($rsc) at .\sources\fungible_asset.move:318:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: 0x1::chain_status::GenesisEndMarker: ResourceDomain<0x1::chain_status::GenesisEndMarker>(): WellFormed($rsc) at .\sources\fungible_asset.move:318:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: 0x1::timestamp::CurrentTimeMicroseconds: ResourceDomain<0x1::timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at .\sources\fungible_asset.move:318:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: 0x1::object::ObjectCore: ResourceDomain<0x1::object::ObjectCore>(): WellFormed($rsc) at .\sources\fungible_asset.move:318:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::ConcurrentFungibleBalance: ResourceDomain<0x1::fungible_asset::ConcurrentFungibleBalance>(): WellFormed($rsc) at .\sources\fungible_asset.move:318:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentFungibleBalance'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::FungibleStore: ResourceDomain<0x1::fungible_asset::FungibleStore>(): WellFormed($rsc) at .\sources\fungible_asset.move:318:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0);
    ($IsValid'$1_fungible_asset_FungibleStore'($rsc))));

    // assume forall $rsc: 0x1::reconfiguration::Configuration: ResourceDomain<0x1::reconfiguration::Configuration>(): WellFormed($rsc) at .\sources\fungible_asset.move:318:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::account_control::TimeLock>(): WellFormed($rsc) at .\sources\fungible_asset.move:318:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_TimeLock'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(): WellFormed($rsc) at .\sources\fungible_asset.move:318:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>(): WellFormed($rsc) at .\sources\fungible_asset.move:318:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<0x1::timestamp::CurrentTimeMicroseconds>(0x1)) at .\sources\fungible_asset.move:318:5+443
    // global invariant at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at .\sources\fungible_asset.move:318:5+443
    // global invariant at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // assume Gt($t1, 0) at .\sources\fungible_asset.move:295:5+20
    assume {:print "$at(3,11740,11760)"} true;
    assume ($t1 > 0);

    // assume exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0)) at .\sources\fungible_asset.move:298:5+58
    assume {:print "$at(3,11817,11875)"} true;
    assume $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0));

    // @41 := save_mem(fungible_asset::EmissionState) at .\sources\fungible_asset.move:298:5+58
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#41 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory;

    // trace_local[admin]($t0) at .\sources\fungible_asset.move:318:5+1
    assume {:print "$at(3,12664,12665)"} true;
    assume {:print "$track_local(102,4,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at .\sources\fungible_asset.move:318:5+1
    assume {:print "$track_local(102,4,1):", $t1} $t1 == $t1;

    // trace_local[from]($t2) at .\sources\fungible_asset.move:318:5+1
    assume {:print "$track_local(102,4,2):", $t2} $t2 == $t2;

    // account_control::assert_not_locked($t2) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:319:10+40
    assume {:print "$at(3,12785,12825)"} true;
    call $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_account_control_assert_not_locked($t2);
    if ($abort_flag) {
        assume {:print "$at(3,12785,12825)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,4):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t8 := fungible_asset::get_metadata() on_abort goto L3 with $t7 at .\sources\fungible_asset.move:320:21+14
    assume {:print "$at(3,12848,12862)"} true;
    call $t8 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_get_metadata();
    if ($abort_flag) {
        assume {:print "$at(3,12848,12862)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,4):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_local[asset]($t8) at .\sources\fungible_asset.move:320:21+14
    assume {:print "$track_local(102,4,3):", $t8} $t8 == $t8;

    // trace_local[asset]($t8) at .\sources\fungible_asset.move:513:16+22
    assume {:print "$at(3,20092,20114)"} true;
    assume {:print "$track_local(102,4,4):", $t8} $t8 == $t8;

    // $t9 := signer::address_of($t0) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:517:41+25
    assume {:print "$at(3,20278,20303)"} true;
    call $t9 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(3,20278,20303)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,4):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t10 := object::is_owner<0x1::fungible_asset::Metadata>($t8, $t9) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:517:17+50
    call $t10 := $1_object_is_owner'$1_fungible_asset_Metadata'($t8, $t9);
    if ($abort_flag) {
        assume {:print "$at(3,20254,20304)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,4):", $t7} $t7 == $t7;
        goto L3;
    }

    // if ($t10) goto L1 else goto L0 at .\sources\fungible_asset.move:517:9+6
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at .\sources\fungible_asset.move:518:68+6
    assume {:print "$at(3,20413,20419)"} true;
L1:

    // $t11 := object::object_address<0x1::fungible_asset::Metadata>($t8) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:518:45+30
    assume {:print "$at(3,20390,20420)"} true;
    call $t11 := $1_object_object_address'$1_fungible_asset_Metadata'($t8);
    if ($abort_flag) {
        assume {:print "$at(3,20390,20420)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,4):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t12 := get_global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>($t11) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:518:9+67
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $t11)) {
        call $ExecFailureAbort();
    } else {
        $t12 := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $t11);
    }
    if ($abort_flag) {
        assume {:print "$at(3,20354,20421)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,4):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t13 := get_field<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>.transfer_ref($t12) at .\sources\fungible_asset.move:321:28+50
    assume {:print "$at(3,12892,12942)"} true;
    $t13 := $t12->$transfer_ref;

    // $t14 := primary_fungible_store::primary_store<0x1::fungible_asset::Metadata>($t2, $t8) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:322:27+50
    assume {:print "$at(3,12971,13021)"} true;
    call $t14 := $1_primary_fungible_store_primary_store'$1_fungible_asset_Metadata'($t2, $t8);
    if ($abort_flag) {
        assume {:print "$at(3,12971,13021)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,4):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t15 := fungible_asset::withdraw_with_ref<0x1::fungible_asset::FungibleStore>($t13, $t14, $t1) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:323:9+68
    assume {:print "$at(3,13032,13100)"} true;
    call $t15 := $1_fungible_asset_withdraw_with_ref'$1_fungible_asset_FungibleStore'($t13, $t14, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,13032,13100)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,4):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_return[0]($t15) at .\sources\fungible_asset.move:318:114+334
    assume {:print "$at(3,12773,13107)"} true;
    assume {:print "$track_return(102,4,0):", $t15} $t15 == $t15;

    // goto L2 at .\sources\fungible_asset.move:318:114+334
    goto L2;

    // label L0 at .\sources\fungible_asset.move:517:94+10
    assume {:print "$at(3,20331,20341)"} true;
L0:

    // $t16 := 1 at .\sources\fungible_asset.move:517:94+10
    assume {:print "$at(3,20331,20341)"} true;
    $t16 := 1;
    assume $IsValid'u64'($t16);

    // $t17 := error::permission_denied($t16) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:517:69+36
    call $t17 := $1_error_permission_denied($t16);
    if ($abort_flag) {
        assume {:print "$at(3,20306,20342)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,4):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_abort($t17) at .\sources\fungible_asset.move:517:9+6
    assume {:print "$at(3,20246,20252)"} true;
    assume {:print "$track_abort(102,4):", $t17} $t17 == $t17;

    // $t7 := move($t17) at .\sources\fungible_asset.move:517:9+6
    $t7 := $t17;

    // goto L3 at .\sources\fungible_asset.move:517:9+6
    goto L3;

    // label L2 at .\sources\fungible_asset.move:324:5+1
    assume {:print "$at(3,13106,13107)"} true;
L2:

    // assert exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0)) at .\sources\fungible_asset.move:299:5+57
    assume {:print "$at(3,11881,11938)"} true;
    assert {:msg "assert_failed(3,11881,11938): post-condition does not hold"}
      $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0));

    // assert Eq<u64>(select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global[@41]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of[]($t0)))) at .\sources\fungible_asset.move:302:5+151
    assume {:print "$at(3,11993,12144)"} true;
    assert {:msg "assert_failed(3,11993,12144): post-condition does not hold"}
      $IsEqual'u64'($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$total_emitted, $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#41, $1_signer_$address_of($t0))->$total_emitted);

    // assert Eq<u64>(select fungible_asset::EmissionState.max_supply<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), select fungible_asset::EmissionState.max_supply<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global[@41]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of[]($t0)))) at .\sources\fungible_asset.move:306:5+145
    assume {:print "$at(3,12190,12335)"} true;
    assert {:msg "assert_failed(3,12190,12335): post-condition does not hold"}
      $IsEqual'u64'($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$max_supply, $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#41, $1_signer_$address_of($t0))->$max_supply);

    // return $t15 at .\sources\fungible_asset.move:306:5+145
    $ret0 := $t15;
    return;

    // label L3 at .\sources\fungible_asset.move:324:5+1
    assume {:print "$at(3,13106,13107)"} true;
L3:

    // abort($t7) at .\sources\fungible_asset.move:324:5+1
    assume {:print "$at(3,13106,13107)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun fungible_asset::init_module [verification] at .\sources\fungible_asset.move:62:5+1285
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_init_module$verify(_$t0: $signer) returns ()
{
    // declare local variables
    var $t1: $1_object_ConstructorRef;
    var $t2: $1_object_ConstructorRef;
    var $t3: $1_fungible_asset_BurnRef;
    var $t4: $signer;
    var $t5: $signer;
    var $t6: $1_fungible_asset_TransferRef;
    var $t7: $1_fungible_asset_MintRef;
    var $t8: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset;
    var $t9: Vec (int);
    var $t10: int;
    var $t11: int;
    var $t12: $1_object_ConstructorRef;
    var $t13: int;
    var $t14: $1_option_Option'u128';
    var $t15: Vec (int);
    var $t16: $1_string_String;
    var $t17: Vec (int);
    var $t18: $1_string_String;
    var $t19: int;
    var $t20: Vec (int);
    var $t21: $1_string_String;
    var $t22: Vec (int);
    var $t23: $1_string_String;
    var $t24: $1_fungible_asset_MintRef;
    var $t25: $1_fungible_asset_BurnRef;
    var $t26: $1_fungible_asset_TransferRef;
    var $t27: $signer;
    var $t28: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset;
    var $t29: int;
    var $t30: int;
    var $t31: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState;
    var $t0: $signer;
    var $temp_0'$1_fungible_asset_BurnRef': $1_fungible_asset_BurnRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:62:5+1
    assume {:print "$at(3,1749,1750)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume forall $rsc: 0x1::features::Features: ResourceDomain<0x1::features::Features>(): WellFormed($rsc) at .\sources\fungible_asset.move:62:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: 0x1::object::ObjectCore: ResourceDomain<0x1::object::ObjectCore>(): WellFormed($rsc) at .\sources\fungible_asset.move:62:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::ConcurrentSupply: ResourceDomain<0x1::fungible_asset::ConcurrentSupply>(): WellFormed($rsc) at .\sources\fungible_asset.move:62:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentSupply'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::Metadata: ResourceDomain<0x1::fungible_asset::Metadata>(): WellFormed($rsc) at .\sources\fungible_asset.move:62:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Metadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Metadata_$memory, $a_0);
    ($IsValid'$1_fungible_asset_Metadata'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::Supply: ResourceDomain<0x1::fungible_asset::Supply>(): And(WellFormed($rsc), Le(Len<u128>(select option::Option.vec(select fungible_asset::Supply.maximum($rsc))), 1)) at .\sources\fungible_asset.move:62:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Supply_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Supply_$memory, $a_0);
    (($IsValid'$1_fungible_asset_Supply'($rsc) && (LenVec($rsc->$maximum->$vec) <= 1)))));

    // assume forall $rsc: 0x1::primary_fungible_store::DeriveRefPod: ResourceDomain<0x1::primary_fungible_store::DeriveRefPod>(): WellFormed($rsc) at .\sources\fungible_asset.move:62:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0)}(var $rsc := $ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0);
    ($IsValid'$1_primary_fungible_store_DeriveRefPod'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(): WellFormed($rsc) at .\sources\fungible_asset.move:62:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>(): WellFormed($rsc) at .\sources\fungible_asset.move:62:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'($rsc))));

    // trace_local[admin]($t0) at .\sources\fungible_asset.move:62:5+1
    assume {:print "$track_local(102,5,0):", $t0} $t0 == $t0;

    // $t9 := [66, 76, 79, 67, 75, 70, 79, 82, 71, 69] at .\sources\fungible_asset.move:63:67+12
    assume {:print "$at(3,1850,1862)"} true;
    $t9 := ConcatVec(ConcatVec(MakeVec4(66, 76, 79, 67), MakeVec4(75, 70, 79, 82)), MakeVec2(71, 69));
    assume $IsValid'vec'u8''($t9);

    // assume Identical($t10, signer::$address_of($t0)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.spec.move:162:9+50
    assume {:print "$at(185,6936,6986)"} true;
    assume ($t10 == $1_signer_$address_of($t0));

    // assume Identical($t11, object::spec_create_object_address($t10, $t9)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.spec.move:163:9+65
    assume {:print "$at(185,6995,7060)"} true;
    assume ($t11 == $1_object_spec_create_object_address($t10, $t9));

    // $t12 := object::create_named_object($t0, $t9) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:63:32+48
    assume {:print "$at(3,1815,1863)"} true;
    call $t12 := $1_object_create_named_object($t0, $t9);
    if ($abort_flag) {
        assume {:print "$at(3,1815,1863)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,5):", $t13} $t13 == $t13;
        goto L2;
    }

    // trace_local[$t2]($t12) at .\sources\fungible_asset.move:63:32+48
    assume {:print "$track_local(102,5,1):", $t12} $t12 == $t12;

    // trace_local[constructor_ref]($t12) at .\sources\fungible_asset.move:63:31+49
    assume {:print "$track_local(102,5,2):", $t12} $t12 == $t12;

    // $t14 := opaque begin: option::none<u128>() at .\sources\fungible_asset.move:66:13+14
    assume {:print "$at(3,1986,2000)"} true;

    // assume And(WellFormed($t14), Le(Len<u128>(select option::Option.vec($t14)), 1)) at .\sources\fungible_asset.move:66:13+14
    assume ($IsValid'$1_option_Option'u128''($t14) && (LenVec($t14->$vec) <= 1));

    // assume Eq<0x1::option::Option<u128>>($t14, option::spec_none<u128>()) at .\sources\fungible_asset.move:66:13+14
    assume $IsEqual'$1_option_Option'u128''($t14, $1_option_spec_none'u128'());

    // $t14 := opaque end: option::none<u128>() at .\sources\fungible_asset.move:66:13+14

    // $t15 := [66, 76, 79, 67, 75, 70, 79, 82, 71, 69, 32, 67, 111, 105, 110] at .\sources\fungible_asset.move:67:18+18
    assume {:print "$at(3,2020,2038)"} true;
    $t15 := ConcatVec(ConcatVec(ConcatVec(MakeVec4(66, 76, 79, 67), MakeVec4(75, 70, 79, 82)), MakeVec4(71, 69, 32, 67)), MakeVec3(111, 105, 110));
    assume $IsValid'vec'u8''($t15);

    // $t16 := string::utf8($t15) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:67:13+24
    call $t16 := $1_string_utf8($t15);
    if ($abort_flag) {
        assume {:print "$at(3,2015,2039)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,5):", $t13} $t13 == $t13;
        goto L2;
    }

    // $t17 := [66, 76, 79, 67, 75, 70, 79, 82, 71, 69] at .\sources\fungible_asset.move:68:18+12
    assume {:print "$at(3,2070,2082)"} true;
    $t17 := ConcatVec(ConcatVec(MakeVec4(66, 76, 79, 67), MakeVec4(75, 70, 79, 82)), MakeVec2(71, 69));
    assume $IsValid'vec'u8''($t17);

    // $t18 := string::utf8($t17) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:68:13+18
    call $t18 := $1_string_utf8($t17);
    if ($abort_flag) {
        assume {:print "$at(3,2065,2083)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,5):", $t13} $t13 == $t13;
        goto L2;
    }

    // $t19 := 8 at .\sources\fungible_asset.move:69:13+1
    assume {:print "$at(3,2111,2112)"} true;
    $t19 := 8;
    assume $IsValid'u8'($t19);

    // $t20 := [104, 116, 116, 112, 115, 58, 47, 47, 100, 114, 105, 118, 101, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 47, 102, 105, 108, 101, 47, 100, 47, 49, 118, 70, 109, 45, 107, 70, 54, 79, 51, 111, 110, 120, 80, 103, 70, 74, 95, 114, 86, 76, 104, 57, 89, 71, 70, 84, 95, 102, 70, 87, 77, 54, 47, 118, 105, 101, 119, 63, 117, 115, 112, 61, 115, 104, 97, 114, 105, 110, 103] at .\sources\fungible_asset.move:70:18+85
    assume {:print "$at(3,2147,2232)"} true;
    $t20 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(104, 116, 116, 112), MakeVec4(115, 58, 47, 47)), MakeVec4(100, 114, 105, 118)), MakeVec4(101, 46, 103, 111)), MakeVec4(111, 103, 108, 101)), MakeVec4(46, 99, 111, 109)), MakeVec4(47, 102, 105, 108)), MakeVec4(101, 47, 100, 47)), MakeVec4(49, 118, 70, 109)), MakeVec4(45, 107, 70, 54)), MakeVec4(79, 51, 111, 110)), MakeVec4(120, 80, 103, 70)), MakeVec4(74, 95, 114, 86)), MakeVec4(76, 104, 57, 89)), MakeVec4(71, 70, 84, 95)), MakeVec4(102, 70, 87, 77)), MakeVec4(54, 47, 118, 105)), MakeVec4(101, 119, 63, 117)), MakeVec4(115, 112, 61, 115)), MakeVec4(104, 97, 114, 105)), MakeVec2(110, 103));
    assume $IsValid'vec'u8''($t20);

    // $t21 := string::utf8($t20) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:70:13+91
    call $t21 := $1_string_utf8($t20);
    if ($abort_flag) {
        assume {:print "$at(3,2142,2233)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,5):", $t13} $t13 == $t13;
        goto L2;
    }

    // $t22 := [104, 116, 116, 112, 58, 47, 47, 109, 101, 116, 97, 115, 99, 104, 111, 111, 108, 46, 115, 111] at .\sources\fungible_asset.move:71:18+23
    assume {:print "$at(3,2264,2287)"} true;
    $t22 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(104, 116, 116, 112), MakeVec4(58, 47, 47, 109)), MakeVec4(101, 116, 97, 115)), MakeVec4(99, 104, 111, 111)), MakeVec4(108, 46, 115, 111));
    assume $IsValid'vec'u8''($t22);

    // $t23 := string::utf8($t22) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:71:13+29
    call $t23 := $1_string_utf8($t22);
    if ($abort_flag) {
        assume {:print "$at(3,2259,2288)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,5):", $t13} $t13 == $t13;
        goto L2;
    }

    // primary_fungible_store::create_primary_store_enabled_fungible_asset($t12, $t14, $t16, $t18, $t19, $t21, $t23) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:64:9+440
    assume {:print "$at(3,1874,2314)"} true;
    call $1_primary_fungible_store_create_primary_store_enabled_fungible_asset($t12, $t14, $t16, $t18, $t19, $t21, $t23);
    if ($abort_flag) {
        assume {:print "$at(3,1874,2314)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,5):", $t13} $t13 == $t13;
        goto L2;
    }

    // $t24 := fungible_asset::generate_mint_ref($t12) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:75:24+50
    assume {:print "$at(3,2432,2482)"} true;
    call $t24 := $1_fungible_asset_generate_mint_ref($t12);
    if ($abort_flag) {
        assume {:print "$at(3,2432,2482)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,5):", $t13} $t13 == $t13;
        goto L2;
    }

    // $t25 := fungible_asset::generate_burn_ref($t12) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:76:24+50
    assume {:print "$at(3,2508,2558)"} true;
    call $t25 := $1_fungible_asset_generate_burn_ref($t12);
    if ($abort_flag) {
        assume {:print "$at(3,2508,2558)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,5):", $t13} $t13 == $t13;
        goto L2;
    }

    // trace_local[burn_ref]($t25) at .\sources\fungible_asset.move:76:24+50
    assume {:print "$track_local(102,5,3):", $t25} $t25 == $t25;

    // $t26 := fungible_asset::generate_transfer_ref($t12) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:77:28+54
    assume {:print "$at(3,2588,2642)"} true;
    call $t26 := $1_fungible_asset_generate_transfer_ref($t12);
    if ($abort_flag) {
        assume {:print "$at(3,2588,2642)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,5):", $t13} $t13 == $t13;
        goto L2;
    }

    // $t27 := object::generate_signer($t12) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:78:38+40
    assume {:print "$at(3,2682,2722)"} true;
    call $t27 := $1_object_generate_signer($t12);
    if ($abort_flag) {
        assume {:print "$at(3,2682,2722)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,5):", $t13} $t13 == $t13;
        goto L2;
    }

    // trace_local[metadata_object_signer]($t27) at .\sources\fungible_asset.move:78:38+40
    assume {:print "$track_local(102,5,4):", $t27} $t27 == $t27;

    // trace_local[$t3]($t27) at .\sources\fungible_asset.move:81:36+8
    assume {:print "$at(3,2816,2824)"} true;
    assume {:print "$track_local(102,5,5):", $t27} $t27 == $t27;

    // $t28 := pack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset($t24, $t26, $t25) at .\sources\fungible_asset.move:81:13+57
    $t28 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset($t24, $t26, $t25);

    // trace_local[$t21]($t28) at .\sources\fungible_asset.move:79:9+128
    assume {:print "$at(3,2733,2861)"} true;
    assume {:print "$track_local(102,5,8):", $t28} $t28 == $t28;

    // move_to<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>($t28, $t27) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:79:9+128
    if ($ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $t27->$addr)) {
        call $ExecFailureAbort();
    } else {
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory := $ResourceUpdate($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $t27->$addr, $t28);
    }
    if ($abort_flag) {
        assume {:print "$at(3,2733,2861)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,5):", $t13} $t13 == $t13;
        goto L2;
    }

    // $t29 := 0 at .\sources\fungible_asset.move:84:17+1
    assume {:print "$at(3,2920,2921)"} true;
    $t29 := 0;
    assume $IsValid'u64'($t29);

    // $t30 := 0 at .\sources\fungible_asset.move:85:20+1
    assume {:print "$at(3,2993,2994)"} true;
    $t30 := 0;
    assume $IsValid'u64'($t30);

    // $t31 := pack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState($t29, $t30) at .\sources\fungible_asset.move:83:24+111
    assume {:print "$at(3,2887,2998)"} true;
    $t31 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState($t29, $t30);

    // move_to<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>($t31, $t0) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:83:9+127
    if ($ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $t0->$addr)) {
        call $ExecFailureAbort();
    } else {
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory := $ResourceUpdate($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $t0->$addr, $t31);
    }
    if ($abort_flag) {
        assume {:print "$at(3,2872,2999)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,5):", $t13} $t13 == $t13;
        goto L2;
    }

    // label L1 at .\sources\fungible_asset.move:88:5+1
    assume {:print "$at(3,3033,3034)"} true;
L1:

    // return () at .\sources\fungible_asset.move:88:5+1
    assume {:print "$at(3,3033,3034)"} true;
    return;

    // label L2 at .\sources\fungible_asset.move:88:5+1
L2:

    // abort($t13) at .\sources\fungible_asset.move:88:5+1
    assume {:print "$at(3,3033,3034)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun fungible_asset::destroy_burn_capability [baseline] at .\sources\fungible_asset.move:442:1+86
procedure {:inline 1} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_destroy_burn_capability(_$t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[cap]($t0) at .\sources\fungible_asset.move:442:1+1
    assume {:print "$at(3,17290,17291)"} true;
    assume {:print "$track_local(102,6,0):", $t0} $t0 == $t0;

    // $t1 := unpack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::BurnCapability($t0) at .\sources\fungible_asset.move:443:9+17
    assume {:print "$at(3,17349,17366)"} true;
    $t1 := $t0->$dummy_field;

    // drop($t1) at .\sources\fungible_asset.move:443:9+17

    // label L1 at .\sources\fungible_asset.move:444:1+1
    assume {:print "$at(3,17375,17376)"} true;
L1:

    // return () at .\sources\fungible_asset.move:444:1+1
    assume {:print "$at(3,17375,17376)"} true;
    return;

}

// fun fungible_asset::destroy_burn_capability [verification] at .\sources\fungible_asset.move:442:1+86
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_destroy_burn_capability$verify(_$t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:442:1+1
    assume {:print "$at(3,17290,17291)"} true;
    assume $IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability'($t0);

    // trace_local[cap]($t0) at .\sources\fungible_asset.move:442:1+1
    assume {:print "$track_local(102,6,0):", $t0} $t0 == $t0;

    // $t1 := unpack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::BurnCapability($t0) at .\sources\fungible_asset.move:443:9+17
    assume {:print "$at(3,17349,17366)"} true;
    $t1 := $t0->$dummy_field;

    // drop($t1) at .\sources\fungible_asset.move:443:9+17

    // label L1 at .\sources\fungible_asset.move:444:1+1
    assume {:print "$at(3,17375,17376)"} true;
L1:

    // return () at .\sources\fungible_asset.move:444:1+1
    assume {:print "$at(3,17375,17376)"} true;
    return;

}

// fun fungible_asset::destroy_deposit_capability [baseline] at .\sources\fungible_asset.move:508:1+95
procedure {:inline 1} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_destroy_deposit_capability(_$t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[cap]($t0) at .\sources\fungible_asset.move:508:1+1
    assume {:print "$at(3,19841,19842)"} true;
    assume {:print "$track_local(102,7,0):", $t0} $t0 == $t0;

    // $t1 := unpack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::DepositCapability($t0) at .\sources\fungible_asset.move:509:9+20
    assume {:print "$at(3,19906,19926)"} true;
    $t1 := $t0->$dummy_field;

    // drop($t1) at .\sources\fungible_asset.move:509:9+20

    // label L1 at .\sources\fungible_asset.move:510:1+1
    assume {:print "$at(3,19935,19936)"} true;
L1:

    // return () at .\sources\fungible_asset.move:510:1+1
    assume {:print "$at(3,19935,19936)"} true;
    return;

}

// fun fungible_asset::destroy_deposit_capability [verification] at .\sources\fungible_asset.move:508:1+95
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_destroy_deposit_capability$verify(_$t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:508:1+1
    assume {:print "$at(3,19841,19842)"} true;
    assume $IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability'($t0);

    // trace_local[cap]($t0) at .\sources\fungible_asset.move:508:1+1
    assume {:print "$track_local(102,7,0):", $t0} $t0 == $t0;

    // $t1 := unpack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::DepositCapability($t0) at .\sources\fungible_asset.move:509:9+20
    assume {:print "$at(3,19906,19926)"} true;
    $t1 := $t0->$dummy_field;

    // drop($t1) at .\sources\fungible_asset.move:509:9+20

    // label L1 at .\sources\fungible_asset.move:510:1+1
    assume {:print "$at(3,19935,19936)"} true;
L1:

    // return () at .\sources\fungible_asset.move:510:1+1
    assume {:print "$at(3,19935,19936)"} true;
    return;

}

// fun fungible_asset::destroy_freeze_capability [baseline] at .\sources\fungible_asset.move:458:1+92
procedure {:inline 1} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_destroy_freeze_capability(_$t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[cap]($t0) at .\sources\fungible_asset.move:458:1+1
    assume {:print "$at(3,17846,17847)"} true;
    assume {:print "$track_local(102,8,0):", $t0} $t0 == $t0;

    // $t1 := unpack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::FreezeCapability($t0) at .\sources\fungible_asset.move:459:9+19
    assume {:print "$at(3,17909,17928)"} true;
    $t1 := $t0->$dummy_field;

    // drop($t1) at .\sources\fungible_asset.move:459:9+19

    // label L1 at .\sources\fungible_asset.move:460:1+1
    assume {:print "$at(3,17937,17938)"} true;
L1:

    // return () at .\sources\fungible_asset.move:460:1+1
    assume {:print "$at(3,17937,17938)"} true;
    return;

}

// fun fungible_asset::destroy_freeze_capability [verification] at .\sources\fungible_asset.move:458:1+92
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_destroy_freeze_capability$verify(_$t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:458:1+1
    assume {:print "$at(3,17846,17847)"} true;
    assume $IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability'($t0);

    // trace_local[cap]($t0) at .\sources\fungible_asset.move:458:1+1
    assume {:print "$track_local(102,8,0):", $t0} $t0 == $t0;

    // $t1 := unpack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::FreezeCapability($t0) at .\sources\fungible_asset.move:459:9+19
    assume {:print "$at(3,17909,17928)"} true;
    $t1 := $t0->$dummy_field;

    // drop($t1) at .\sources\fungible_asset.move:459:9+19

    // label L1 at .\sources\fungible_asset.move:460:1+1
    assume {:print "$at(3,17937,17938)"} true;
L1:

    // return () at .\sources\fungible_asset.move:460:1+1
    assume {:print "$at(3,17937,17938)"} true;
    return;

}

// fun fungible_asset::destroy_mint_capability [baseline] at .\sources\fungible_asset.move:424:1+87
procedure {:inline 1} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_destroy_mint_capability(_$t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[cap]($t0) at .\sources\fungible_asset.move:424:1+1
    assume {:print "$at(3,16743,16744)"} true;
    assume {:print "$track_local(102,9,0):", $t0} $t0 == $t0;

    // $t1 := unpack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::MintCapability($t0) at .\sources\fungible_asset.move:425:9+17
    assume {:print "$at(3,16803,16820)"} true;
    $t1 := $t0->$dummy_field;

    // drop($t1) at .\sources\fungible_asset.move:425:9+17

    // label L1 at .\sources\fungible_asset.move:426:1+1
    assume {:print "$at(3,16829,16830)"} true;
L1:

    // return () at .\sources\fungible_asset.move:426:1+1
    assume {:print "$at(3,16829,16830)"} true;
    return;

}

// fun fungible_asset::destroy_mint_capability [verification] at .\sources\fungible_asset.move:424:1+87
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_destroy_mint_capability$verify(_$t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:424:1+1
    assume {:print "$at(3,16743,16744)"} true;
    assume $IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability'($t0);

    // trace_local[cap]($t0) at .\sources\fungible_asset.move:424:1+1
    assume {:print "$track_local(102,9,0):", $t0} $t0 == $t0;

    // $t1 := unpack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::MintCapability($t0) at .\sources\fungible_asset.move:425:9+17
    assume {:print "$at(3,16803,16820)"} true;
    $t1 := $t0->$dummy_field;

    // drop($t1) at .\sources\fungible_asset.move:425:9+17

    // label L1 at .\sources\fungible_asset.move:426:1+1
    assume {:print "$at(3,16829,16830)"} true;
L1:

    // return () at .\sources\fungible_asset.move:426:1+1
    assume {:print "$at(3,16829,16830)"} true;
    return;

}

// fun fungible_asset::destroy_unfreeze_capability [baseline] at .\sources\fungible_asset.move:473:1+98
procedure {:inline 1} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_destroy_unfreeze_capability(_$t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[cap]($t0) at .\sources\fungible_asset.move:473:1+1
    assume {:print "$at(3,18415,18416)"} true;
    assume {:print "$track_local(102,10,0):", $t0} $t0 == $t0;

    // $t1 := unpack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::UnfreezeCapability($t0) at .\sources\fungible_asset.move:474:9+21
    assume {:print "$at(3,18482,18503)"} true;
    $t1 := $t0->$dummy_field;

    // drop($t1) at .\sources\fungible_asset.move:474:9+21

    // label L1 at .\sources\fungible_asset.move:475:1+1
    assume {:print "$at(3,18512,18513)"} true;
L1:

    // return () at .\sources\fungible_asset.move:475:1+1
    assume {:print "$at(3,18512,18513)"} true;
    return;

}

// fun fungible_asset::destroy_unfreeze_capability [verification] at .\sources\fungible_asset.move:473:1+98
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_destroy_unfreeze_capability$verify(_$t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:473:1+1
    assume {:print "$at(3,18415,18416)"} true;
    assume $IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability'($t0);

    // trace_local[cap]($t0) at .\sources\fungible_asset.move:473:1+1
    assume {:print "$track_local(102,10,0):", $t0} $t0 == $t0;

    // $t1 := unpack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::UnfreezeCapability($t0) at .\sources\fungible_asset.move:474:9+21
    assume {:print "$at(3,18482,18503)"} true;
    $t1 := $t0->$dummy_field;

    // drop($t1) at .\sources\fungible_asset.move:474:9+21

    // label L1 at .\sources\fungible_asset.move:475:1+1
    assume {:print "$at(3,18512,18513)"} true;
L1:

    // return () at .\sources\fungible_asset.move:475:1+1
    assume {:print "$at(3,18512,18513)"} true;
    return;

}

// fun fungible_asset::destroy_withdraw_capability [baseline] at .\sources\fungible_asset.move:491:1+99
procedure {:inline 1} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_destroy_withdraw_capability(_$t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[cap]($t0) at .\sources\fungible_asset.move:491:1+1
    assume {:print "$at(3,19134,19135)"} true;
    assume {:print "$track_local(102,11,0):", $t0} $t0 == $t0;

    // $t1 := unpack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::WithdrawCapability($t0) at .\sources\fungible_asset.move:492:9+21
    assume {:print "$at(3,19202,19223)"} true;
    $t1 := $t0->$dummy_field;

    // drop($t1) at .\sources\fungible_asset.move:492:9+21

    // label L1 at .\sources\fungible_asset.move:493:1+1
    assume {:print "$at(3,19232,19233)"} true;
L1:

    // return () at .\sources\fungible_asset.move:493:1+1
    assume {:print "$at(3,19232,19233)"} true;
    return;

}

// fun fungible_asset::destroy_withdraw_capability [verification] at .\sources\fungible_asset.move:491:1+99
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_destroy_withdraw_capability$verify(_$t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t0: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:491:1+1
    assume {:print "$at(3,19134,19135)"} true;
    assume $IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability'($t0);

    // trace_local[cap]($t0) at .\sources\fungible_asset.move:491:1+1
    assume {:print "$track_local(102,11,0):", $t0} $t0 == $t0;

    // $t1 := unpack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::WithdrawCapability($t0) at .\sources\fungible_asset.move:492:9+21
    assume {:print "$at(3,19202,19223)"} true;
    $t1 := $t0->$dummy_field;

    // drop($t1) at .\sources\fungible_asset.move:492:9+21

    // label L1 at .\sources\fungible_asset.move:493:1+1
    assume {:print "$at(3,19232,19233)"} true;
L1:

    // return () at .\sources\fungible_asset.move:493:1+1
    assume {:print "$at(3,19232,19233)"} true;
    return;

}

// fun fungible_asset::freeze_account [verification] at .\sources\fungible_asset.move:256:5+382
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_freeze_account$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: $1_object_Object'$1_fungible_asset_Metadata';
    var $t4: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t5: $1_fungible_asset_TransferRef;
    var $t6: $1_object_Object'$1_fungible_asset_Metadata';
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset;
    var $t12: $1_fungible_asset_TransferRef;
    var $t13: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#42: $Memory $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:256:5+1
    assume {:print "$at(3,9864,9865)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\fungible_asset.move:256:5+1
    assume $IsValid'address'($t1);

    // assume forall $rsc: 0x1::features::Features: ResourceDomain<0x1::features::Features>(): WellFormed($rsc) at .\sources\fungible_asset.move:256:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: 0x1::object::ObjectCore: ResourceDomain<0x1::object::ObjectCore>(): WellFormed($rsc) at .\sources\fungible_asset.move:256:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: 0x1::object::Untransferable: ResourceDomain<0x1::object::Untransferable>(): WellFormed($rsc) at .\sources\fungible_asset.move:256:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_Untransferable_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_Untransferable_$memory, $a_0);
    ($IsValid'$1_object_Untransferable'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::Untransferable: ResourceDomain<0x1::fungible_asset::Untransferable>(): WellFormed($rsc) at .\sources\fungible_asset.move:256:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Untransferable_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Untransferable_$memory, $a_0);
    ($IsValid'$1_fungible_asset_Untransferable'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::ConcurrentFungibleBalance: ResourceDomain<0x1::fungible_asset::ConcurrentFungibleBalance>(): WellFormed($rsc) at .\sources\fungible_asset.move:256:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentFungibleBalance'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::FungibleStore: ResourceDomain<0x1::fungible_asset::FungibleStore>(): WellFormed($rsc) at .\sources\fungible_asset.move:256:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0);
    ($IsValid'$1_fungible_asset_FungibleStore'($rsc))));

    // assume forall $rsc: 0x1::primary_fungible_store::DeriveRefPod: ResourceDomain<0x1::primary_fungible_store::DeriveRefPod>(): WellFormed($rsc) at .\sources\fungible_asset.move:256:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0)}(var $rsc := $ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0);
    ($IsValid'$1_primary_fungible_store_DeriveRefPod'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(): WellFormed($rsc) at .\sources\fungible_asset.move:256:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>(): WellFormed($rsc) at .\sources\fungible_asset.move:256:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'($rsc))));

    // assume exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0)) at .\sources\fungible_asset.move:236:5+58
    assume {:print "$at(3,8915,8973)"} true;
    assume $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0));

    // @42 := save_mem(fungible_asset::EmissionState) at .\sources\fungible_asset.move:236:5+58
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#42 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory;

    // trace_local[admin]($t0) at .\sources\fungible_asset.move:256:5+1
    assume {:print "$at(3,9864,9865)"} true;
    assume {:print "$track_local(102,12,0):", $t0} $t0 == $t0;

    // trace_local[account]($t1) at .\sources\fungible_asset.move:256:5+1
    assume {:print "$track_local(102,12,1):", $t1} $t1 == $t1;

    // $t6 := fungible_asset::get_metadata() on_abort goto L3 with $t7 at .\sources\fungible_asset.move:257:21+14
    assume {:print "$at(3,9983,9997)"} true;
    call $t6 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_get_metadata();
    if ($abort_flag) {
        assume {:print "$at(3,9983,9997)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,12):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_local[asset]($t6) at .\sources\fungible_asset.move:257:21+14
    assume {:print "$track_local(102,12,2):", $t6} $t6 == $t6;

    // trace_local[asset]($t6) at .\sources\fungible_asset.move:513:16+22
    assume {:print "$at(3,20092,20114)"} true;
    assume {:print "$track_local(102,12,3):", $t6} $t6 == $t6;

    // $t8 := signer::address_of($t0) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:517:41+25
    assume {:print "$at(3,20278,20303)"} true;
    call $t8 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(3,20278,20303)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,12):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t9 := object::is_owner<0x1::fungible_asset::Metadata>($t6, $t8) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:517:17+50
    call $t9 := $1_object_is_owner'$1_fungible_asset_Metadata'($t6, $t8);
    if ($abort_flag) {
        assume {:print "$at(3,20254,20304)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,12):", $t7} $t7 == $t7;
        goto L3;
    }

    // if ($t9) goto L1 else goto L0 at .\sources\fungible_asset.move:517:9+6
    if ($t9) { goto L1; } else { goto L0; }

    // label L1 at .\sources\fungible_asset.move:518:68+6
    assume {:print "$at(3,20413,20419)"} true;
L1:

    // $t10 := object::object_address<0x1::fungible_asset::Metadata>($t6) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:518:45+30
    assume {:print "$at(3,20390,20420)"} true;
    call $t10 := $1_object_object_address'$1_fungible_asset_Metadata'($t6);
    if ($abort_flag) {
        assume {:print "$at(3,20390,20420)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,12):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t11 := get_global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>($t10) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:518:9+67
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $t10)) {
        call $ExecFailureAbort();
    } else {
        $t11 := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $t10);
    }
    if ($abort_flag) {
        assume {:print "$at(3,20354,20421)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,12):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t12 := get_field<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>.transfer_ref($t11) at .\sources\fungible_asset.move:258:28+50
    assume {:print "$at(3,10027,10077)"} true;
    $t12 := $t11->$transfer_ref;

    // $t13 := primary_fungible_store::ensure_primary_store_exists<0x1::fungible_asset::Metadata>($t1, $t6) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:259:22+67
    assume {:print "$at(3,10101,10168)"} true;
    call $t13 := $1_primary_fungible_store_ensure_primary_store_exists'$1_fungible_asset_Metadata'($t1, $t6);
    if ($abort_flag) {
        assume {:print "$at(3,10101,10168)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,12):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t14 := true at .\sources\fungible_asset.move:260:63+4
    assume {:print "$at(3,10233,10237)"} true;
    $t14 := true;
    assume $IsValid'bool'($t14);

    // fungible_asset::set_frozen_flag<0x1::fungible_asset::FungibleStore>($t12, $t13, $t14) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:260:9+59
    call $1_fungible_asset_set_frozen_flag'$1_fungible_asset_FungibleStore'($t12, $t13, $t14);
    if ($abort_flag) {
        assume {:print "$at(3,10179,10238)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,12):", $t7} $t7 == $t7;
        goto L3;
    }

    // goto L2 at .\sources\fungible_asset.move:256:101+286
    assume {:print "$at(3,9960,10246)"} true;
    goto L2;

    // label L0 at .\sources\fungible_asset.move:517:94+10
    assume {:print "$at(3,20331,20341)"} true;
L0:

    // $t15 := 1 at .\sources\fungible_asset.move:517:94+10
    assume {:print "$at(3,20331,20341)"} true;
    $t15 := 1;
    assume $IsValid'u64'($t15);

    // $t16 := error::permission_denied($t15) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:517:69+36
    call $t16 := $1_error_permission_denied($t15);
    if ($abort_flag) {
        assume {:print "$at(3,20306,20342)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,12):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_abort($t16) at .\sources\fungible_asset.move:517:9+6
    assume {:print "$at(3,20246,20252)"} true;
    assume {:print "$track_abort(102,12):", $t16} $t16 == $t16;

    // $t7 := move($t16) at .\sources\fungible_asset.move:517:9+6
    $t7 := $t16;

    // goto L3 at .\sources\fungible_asset.move:517:9+6
    goto L3;

    // label L2 at .\sources\fungible_asset.move:261:5+1
    assume {:print "$at(3,10245,10246)"} true;
L2:

    // assert exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0)) at .\sources\fungible_asset.move:237:5+57
    assume {:print "$at(3,8979,9036)"} true;
    assert {:msg "assert_failed(3,8979,9036): post-condition does not hold"}
      $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0));

    // assert Eq<u64>(select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global[@42]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of[]($t0)))) at .\sources\fungible_asset.move:240:5+151
    assume {:print "$at(3,9091,9242)"} true;
    assert {:msg "assert_failed(3,9091,9242): post-condition does not hold"}
      $IsEqual'u64'($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$total_emitted, $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#42, $1_signer_$address_of($t0))->$total_emitted);

    // assert Eq<u64>(select fungible_asset::EmissionState.max_supply<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), select fungible_asset::EmissionState.max_supply<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global[@42]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of[]($t0)))) at .\sources\fungible_asset.move:244:5+145
    assume {:print "$at(3,9299,9444)"} true;
    assert {:msg "assert_failed(3,9299,9444): post-condition does not hold"}
      $IsEqual'u64'($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$max_supply, $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#42, $1_signer_$address_of($t0))->$max_supply);

    // assert Ge(select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global[@42]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of[]($t0)))) at .\sources\fungible_asset.move:248:5+151
    assume {:print "$at(3,9506,9657)"} true;
    assert {:msg "assert_failed(3,9506,9657): post-condition does not hold"}
      ($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$total_emitted >= $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#42, $1_signer_$address_of($t0))->$total_emitted);

    // return () at .\sources\fungible_asset.move:248:5+151
    return;

    // label L3 at .\sources\fungible_asset.move:261:5+1
    assume {:print "$at(3,10245,10246)"} true;
L3:

    // abort($t7) at .\sources\fungible_asset.move:261:5+1
    assume {:print "$at(3,10245,10246)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun fungible_asset::get_emission_state [verification] at .\sources\fungible_asset.move:396:1+209
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_get_emission_state$verify(_$t0: int) returns ($ret0: int, $ret1: int)
{
    // declare local variables
    var $t1: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState;
    var $t2: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t0: int;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:396:1+1
    assume {:print "$at(3,15886,15887)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(): WellFormed($rsc) at .\sources\fungible_asset.move:396:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'($rsc))));

    // assume exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>($t0) at .\sources\fungible_asset.move:390:5+46
    assume {:print "$at(3,15680,15726)"} true;
    assume $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $t0);

    // trace_local[admin_address]($t0) at .\sources\fungible_asset.move:396:1+1
    assume {:print "$at(3,15886,15887)"} true;
    assume {:print "$track_local(102,13,0):", $t0} $t0 == $t0;

    // $t2 := get_global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>($t0) on_abort goto L2 with $t3 at .\sources\fungible_asset.move:397:20+43
    assume {:print "$at(3,15997,16040)"} true;
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(3,15997,16040)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,13):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_local[emission]($t2) at .\sources\fungible_asset.move:397:20+43
    assume {:print "$track_local(102,13,1):", $t2} $t2 == $t2;

    // $t4 := get_field<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>.total_emitted($t2) at .\sources\fungible_asset.move:398:6+22
    assume {:print "$at(3,16048,16070)"} true;
    $t4 := $t2->$total_emitted;

    // $t5 := get_field<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>.max_supply($t2) at .\sources\fungible_asset.move:398:30+19
    $t5 := $t2->$max_supply;

    // trace_return[0]($t4) at .\sources\fungible_asset.move:398:5+45
    assume {:print "$track_return(102,13,0):", $t4} $t4 == $t4;

    // trace_return[1]($t5) at .\sources\fungible_asset.move:398:5+45
    assume {:print "$track_return(102,13,1):", $t5} $t5 == $t5;

    // label L1 at .\sources\fungible_asset.move:399:1+1
    assume {:print "$at(3,16094,16095)"} true;
L1:

    // assert Eq<u64>($t4, select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>($t0))) at .\sources\fungible_asset.move:391:5+71
    assume {:print "$at(3,15732,15803)"} true;
    assert {:msg "assert_failed(3,15732,15803): post-condition does not hold"}
      $IsEqual'u64'($t4, $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $t0)->$total_emitted);

    // assert Eq<u64>($t5, select fungible_asset::EmissionState.max_supply<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>($t0))) at .\sources\fungible_asset.move:392:5+68
    assume {:print "$at(3,15809,15877)"} true;
    assert {:msg "assert_failed(3,15809,15877): post-condition does not hold"}
      $IsEqual'u64'($t5, $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $t0)->$max_supply);

    // return ($t4, $t5) at .\sources\fungible_asset.move:392:5+68
    $ret0 := $t4;
    $ret1 := $t5;
    return;

    // label L2 at .\sources\fungible_asset.move:399:1+1
    assume {:print "$at(3,16094,16095)"} true;
L2:

    // abort($t3) at .\sources\fungible_asset.move:399:1+1
    assume {:print "$at(3,16094,16095)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun fungible_asset::get_metadata [baseline] at .\sources\fungible_asset.move:92:5+201
procedure {:inline 1} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_get_metadata() returns ($ret0: $1_object_Object'$1_fungible_asset_Metadata')
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;

    // bytecode translation starts here
    // $t1 := 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2 at .\sources\fungible_asset.move:93:60+12
    assume {:print "$at(3,3264,3276)"} true;
    $t1 := 53928825328177859400592440539620451040482903794754235996746518077645647684578;
    assume $IsValid'address'($t1);

    // trace_local[$t3]($t1) at .\sources\fungible_asset.move:93:60+12
    assume {:print "$track_local(102,14,0):", $t1} $t1 == $t1;

    // $t2 := [66, 76, 79, 67, 75, 70, 79, 82, 71, 69] at .\sources\fungible_asset.move:93:74+12
    $t2 := ConcatVec(ConcatVec(MakeVec4(66, 76, 79, 67), MakeVec4(75, 70, 79, 82)), MakeVec2(71, 69));
    assume $IsValid'vec'u8''($t2);

    // $t3 := opaque begin: object::create_object_address($t1, $t2) at .\sources\fungible_asset.move:93:29+58

    // $t4 := havoc[val]() at .\sources\fungible_asset.move:93:29+58
    havoc $t4;

    // if ($t4) goto L4 else goto L3 at .\sources\fungible_asset.move:93:29+58
    if ($t4) { goto L4; } else { goto L3; }

    // label L4 at .\sources\fungible_asset.move:93:29+58
L4:

    // trace_abort($t5) at .\sources\fungible_asset.move:93:29+58
    assume {:print "$at(3,3233,3291)"} true;
    assume {:print "$track_abort(102,14):", $t5} $t5 == $t5;

    // goto L2 at .\sources\fungible_asset.move:93:29+58
    goto L2;

    // label L3 at .\sources\fungible_asset.move:93:29+58
L3:

    // assume WellFormed($t3) at .\sources\fungible_asset.move:93:29+58
    assume {:print "$at(3,3233,3291)"} true;
    assume $IsValid'address'($t3);

    // assume Eq<address>($t3, object::spec_create_object_address($t1, $t2)) at .\sources\fungible_asset.move:93:29+58
    assume $IsEqual'address'($t3, $1_object_spec_create_object_address($t1, $t2));

    // $t3 := opaque end: object::create_object_address($t1, $t2) at .\sources\fungible_asset.move:93:29+58

    // $t6 := object::address_to_object<0x1::fungible_asset::Metadata>($t3) on_abort goto L2 with $t5 at .\sources\fungible_asset.move:94:9+50
    assume {:print "$at(3,3302,3352)"} true;
    call $t6 := $1_object_address_to_object'$1_fungible_asset_Metadata'($t3);
    if ($abort_flag) {
        assume {:print "$at(3,3302,3352)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(102,14):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t6) at .\sources\fungible_asset.move:94:9+50
    assume {:print "$track_return(102,14,0):", $t6} $t6 == $t6;

    // label L1 at .\sources\fungible_asset.move:95:5+1
    assume {:print "$at(3,3358,3359)"} true;
L1:

    // return $t6 at .\sources\fungible_asset.move:95:5+1
    assume {:print "$at(3,3358,3359)"} true;
    $ret0 := $t6;
    return;

    // label L2 at .\sources\fungible_asset.move:95:5+1
L2:

    // abort($t5) at .\sources\fungible_asset.move:95:5+1
    assume {:print "$at(3,3358,3359)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun fungible_asset::get_metadata [verification] at .\sources\fungible_asset.move:92:5+201
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_get_metadata$verify() returns ($ret0: $1_object_Object'$1_fungible_asset_Metadata')
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: 0x1::object::ObjectCore: ResourceDomain<0x1::object::ObjectCore>(): WellFormed($rsc) at .\sources\fungible_asset.move:92:5+1
    assume {:print "$at(3,3158,3159)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // $t1 := 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2 at .\sources\fungible_asset.move:93:60+12
    assume {:print "$at(3,3264,3276)"} true;
    $t1 := 53928825328177859400592440539620451040482903794754235996746518077645647684578;
    assume $IsValid'address'($t1);

    // trace_local[$t3]($t1) at .\sources\fungible_asset.move:93:60+12
    assume {:print "$track_local(102,14,0):", $t1} $t1 == $t1;

    // $t2 := [66, 76, 79, 67, 75, 70, 79, 82, 71, 69] at .\sources\fungible_asset.move:93:74+12
    $t2 := ConcatVec(ConcatVec(MakeVec4(66, 76, 79, 67), MakeVec4(75, 70, 79, 82)), MakeVec2(71, 69));
    assume $IsValid'vec'u8''($t2);

    // $t3 := opaque begin: object::create_object_address($t1, $t2) at .\sources\fungible_asset.move:93:29+58

    // $t4 := havoc[val]() at .\sources\fungible_asset.move:93:29+58
    havoc $t4;

    // if ($t4) goto L4 else goto L3 at .\sources\fungible_asset.move:93:29+58
    if ($t4) { goto L4; } else { goto L3; }

    // label L4 at .\sources\fungible_asset.move:93:29+58
L4:

    // trace_abort($t5) at .\sources\fungible_asset.move:93:29+58
    assume {:print "$at(3,3233,3291)"} true;
    assume {:print "$track_abort(102,14):", $t5} $t5 == $t5;

    // goto L2 at .\sources\fungible_asset.move:93:29+58
    goto L2;

    // label L3 at .\sources\fungible_asset.move:93:29+58
L3:

    // assume WellFormed($t3) at .\sources\fungible_asset.move:93:29+58
    assume {:print "$at(3,3233,3291)"} true;
    assume $IsValid'address'($t3);

    // assume Eq<address>($t3, object::spec_create_object_address($t1, $t2)) at .\sources\fungible_asset.move:93:29+58
    assume $IsEqual'address'($t3, $1_object_spec_create_object_address($t1, $t2));

    // $t3 := opaque end: object::create_object_address($t1, $t2) at .\sources\fungible_asset.move:93:29+58

    // $t6 := object::address_to_object<0x1::fungible_asset::Metadata>($t3) on_abort goto L2 with $t5 at .\sources\fungible_asset.move:94:9+50
    assume {:print "$at(3,3302,3352)"} true;
    call $t6 := $1_object_address_to_object'$1_fungible_asset_Metadata'($t3);
    if ($abort_flag) {
        assume {:print "$at(3,3302,3352)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(102,14):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t6) at .\sources\fungible_asset.move:94:9+50
    assume {:print "$track_return(102,14,0):", $t6} $t6 == $t6;

    // label L1 at .\sources\fungible_asset.move:95:5+1
    assume {:print "$at(3,3358,3359)"} true;
L1:

    // return $t6 at .\sources\fungible_asset.move:95:5+1
    assume {:print "$at(3,3358,3359)"} true;
    $ret0 := $t6;
    return;

    // label L2 at .\sources\fungible_asset.move:95:5+1
L2:

    // abort($t5) at .\sources\fungible_asset.move:95:5+1
    assume {:print "$at(3,3358,3359)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun fungible_asset::grant_burn_capability [verification] at .\sources\fungible_asset.move:430:1+257
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_grant_burn_capability$verify(_$t0: $signer, _$t1: $signer) returns ()
{
    // declare local variables
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability;
    var $t8: int;
    var $t9: int;
    var $t0: $signer;
    var $t1: $signer;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:430:1+1
    assume {:print "$at(3,16838,16839)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\fungible_asset.move:430:1+1
    assume $IsValid'signer'($t1) && $1_signer_is_txn_signer($t1) && $1_signer_is_txn_signer_addr($t1->$addr);

    // assume forall $rsc: 0x1::object::ObjectCore: ResourceDomain<0x1::object::ObjectCore>(): WellFormed($rsc) at .\sources\fungible_asset.move:430:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::BurnCapability: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::BurnCapability>(): WellFormed($rsc) at .\sources\fungible_asset.move:430:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability'($rsc))));

    // trace_local[admin]($t0) at .\sources\fungible_asset.move:430:1+1
    assume {:print "$track_local(102,15,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at .\sources\fungible_asset.move:430:1+1
    assume {:print "$track_local(102,15,1):", $t1} $t1 == $t1;

    // $t2 := fungible_asset::get_metadata() on_abort goto L3 with $t3 at .\sources\fungible_asset.move:431:17+14
    assume {:print "$at(3,16931,16945)"} true;
    call $t2 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_get_metadata();
    if ($abort_flag) {
        assume {:print "$at(3,16931,16945)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,15):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t4 := signer::address_of($t0) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:432:37+25
    assume {:print "$at(3,16984,17009)"} true;
    call $t4 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(3,16984,17009)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,15):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t5 := object::is_owner<0x1::fungible_asset::Metadata>($t2, $t4) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:432:13+50
    call $t5 := $1_object_is_owner'$1_fungible_asset_Metadata'($t2, $t4);
    if ($abort_flag) {
        assume {:print "$at(3,16960,17010)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,15):", $t3} $t3 == $t3;
        goto L3;
    }

    // if ($t5) goto L1 else goto L0 at .\sources\fungible_asset.move:432:5+6
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at .\sources\fungible_asset.move:433:13+9
    assume {:print "$at(3,17064,17073)"} true;
L1:

    // $t6 := false at .\sources\fungible_asset.move:433:24+16
    assume {:print "$at(3,17075,17091)"} true;
    $t6 := false;
    assume $IsValid'bool'($t6);

    // $t7 := pack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::BurnCapability($t6) at .\sources\fungible_asset.move:433:24+16
    $t7 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability($t6);

    // move_to<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::BurnCapability>($t7, $t1) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:433:5+36
    if ($ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability_$memory, $t1->$addr)) {
        call $ExecFailureAbort();
    } else {
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability_$memory := $ResourceUpdate($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability_$memory, $t1->$addr, $t7);
    }
    if ($abort_flag) {
        assume {:print "$at(3,17056,17092)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,15):", $t3} $t3 == $t3;
        goto L3;
    }

    // goto L2 at .\sources\fungible_asset.move:430:75+183
    assume {:print "$at(3,16912,17095)"} true;
    goto L2;

    // label L0 at .\sources\fungible_asset.move:432:5+6
    assume {:print "$at(3,16952,16958)"} true;
L0:

    // $t8 := 1 at .\sources\fungible_asset.move:432:90+10
    assume {:print "$at(3,17037,17047)"} true;
    $t8 := 1;
    assume $IsValid'u64'($t8);

    // $t9 := error::permission_denied($t8) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:432:65+36
    call $t9 := $1_error_permission_denied($t8);
    if ($abort_flag) {
        assume {:print "$at(3,17012,17048)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,15):", $t3} $t3 == $t3;
        goto L3;
    }

    // trace_abort($t9) at .\sources\fungible_asset.move:432:5+6
    assume {:print "$at(3,16952,16958)"} true;
    assume {:print "$track_abort(102,15):", $t9} $t9 == $t9;

    // $t3 := move($t9) at .\sources\fungible_asset.move:432:5+6
    $t3 := $t9;

    // goto L3 at .\sources\fungible_asset.move:432:5+6
    goto L3;

    // label L2 at .\sources\fungible_asset.move:434:1+1
    assume {:print "$at(3,17094,17095)"} true;
L2:

    // return () at .\sources\fungible_asset.move:434:1+1
    assume {:print "$at(3,17094,17095)"} true;
    return;

    // label L3 at .\sources\fungible_asset.move:434:1+1
L3:

    // abort($t3) at .\sources\fungible_asset.move:434:1+1
    assume {:print "$at(3,17094,17095)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun fungible_asset::grant_deposit_capability [verification] at .\sources\fungible_asset.move:496:1+264
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_grant_deposit_capability$verify(_$t0: $signer, _$t1: $signer) returns ()
{
    // declare local variables
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability;
    var $t8: int;
    var $t9: int;
    var $t0: $signer;
    var $t1: $signer;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:496:1+1
    assume {:print "$at(3,19239,19240)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\fungible_asset.move:496:1+1
    assume $IsValid'signer'($t1) && $1_signer_is_txn_signer($t1) && $1_signer_is_txn_signer_addr($t1->$addr);

    // assume forall $rsc: 0x1::object::ObjectCore: ResourceDomain<0x1::object::ObjectCore>(): WellFormed($rsc) at .\sources\fungible_asset.move:496:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::DepositCapability: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::DepositCapability>(): WellFormed($rsc) at .\sources\fungible_asset.move:496:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability'($rsc))));

    // trace_local[admin]($t0) at .\sources\fungible_asset.move:496:1+1
    assume {:print "$track_local(102,16,0):", $t0} $t0 == $t0;

    // trace_local[reciepient]($t1) at .\sources\fungible_asset.move:496:1+1
    assume {:print "$track_local(102,16,1):", $t1} $t1 == $t1;

    // $t2 := fungible_asset::get_metadata() on_abort goto L3 with $t3 at .\sources\fungible_asset.move:497:17+14
    assume {:print "$at(3,19336,19350)"} true;
    call $t2 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_get_metadata();
    if ($abort_flag) {
        assume {:print "$at(3,19336,19350)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,16):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t4 := signer::address_of($t0) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:498:36+25
    assume {:print "$at(3,19388,19413)"} true;
    call $t4 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(3,19388,19413)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,16):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t5 := object::is_owner<0x1::fungible_asset::Metadata>($t2, $t4) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:498:13+49
    call $t5 := $1_object_is_owner'$1_fungible_asset_Metadata'($t2, $t4);
    if ($abort_flag) {
        assume {:print "$at(3,19365,19414)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,16):", $t3} $t3 == $t3;
        goto L3;
    }

    // if ($t5) goto L1 else goto L0 at .\sources\fungible_asset.move:498:5+6
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at .\sources\fungible_asset.move:499:13+10
    assume {:print "$at(3,19468,19478)"} true;
L1:

    // $t6 := false at .\sources\fungible_asset.move:499:24+19
    assume {:print "$at(3,19479,19498)"} true;
    $t6 := false;
    assume $IsValid'bool'($t6);

    // $t7 := pack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::DepositCapability($t6) at .\sources\fungible_asset.move:499:24+19
    $t7 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability($t6);

    // move_to<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::DepositCapability>($t7, $t1) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:499:5+39
    if ($ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability_$memory, $t1->$addr)) {
        call $ExecFailureAbort();
    } else {
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability_$memory := $ResourceUpdate($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability_$memory, $t1->$addr, $t7);
    }
    if ($abort_flag) {
        assume {:print "$at(3,19460,19499)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,16):", $t3} $t3 == $t3;
        goto L3;
    }

    // goto L2 at .\sources\fungible_asset.move:496:79+186
    assume {:print "$at(3,19317,19503)"} true;
    goto L2;

    // label L0 at .\sources\fungible_asset.move:498:5+6
    assume {:print "$at(3,19357,19363)"} true;
L0:

    // $t8 := 1 at .\sources\fungible_asset.move:498:89+10
    assume {:print "$at(3,19441,19451)"} true;
    $t8 := 1;
    assume $IsValid'u64'($t8);

    // $t9 := error::permission_denied($t8) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:498:64+36
    call $t9 := $1_error_permission_denied($t8);
    if ($abort_flag) {
        assume {:print "$at(3,19416,19452)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,16):", $t3} $t3 == $t3;
        goto L3;
    }

    // trace_abort($t9) at .\sources\fungible_asset.move:498:5+6
    assume {:print "$at(3,19357,19363)"} true;
    assume {:print "$track_abort(102,16):", $t9} $t9 == $t9;

    // $t3 := move($t9) at .\sources\fungible_asset.move:498:5+6
    $t3 := $t9;

    // goto L3 at .\sources\fungible_asset.move:498:5+6
    goto L3;

    // label L2 at .\sources\fungible_asset.move:500:1+1
    assume {:print "$at(3,19502,19503)"} true;
L2:

    // return () at .\sources\fungible_asset.move:500:1+1
    assume {:print "$at(3,19502,19503)"} true;
    return;

    // label L3 at .\sources\fungible_asset.move:500:1+1
L3:

    // abort($t3) at .\sources\fungible_asset.move:500:1+1
    assume {:print "$at(3,19502,19503)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun fungible_asset::grant_freeze_capability [verification] at .\sources\fungible_asset.move:446:1+263
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_grant_freeze_capability$verify(_$t0: $signer, _$t1: $signer) returns ()
{
    // declare local variables
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability;
    var $t8: int;
    var $t9: int;
    var $t0: $signer;
    var $t1: $signer;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:446:1+1
    assume {:print "$at(3,17380,17381)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\fungible_asset.move:446:1+1
    assume $IsValid'signer'($t1) && $1_signer_is_txn_signer($t1) && $1_signer_is_txn_signer_addr($t1->$addr);

    // assume forall $rsc: 0x1::object::ObjectCore: ResourceDomain<0x1::object::ObjectCore>(): WellFormed($rsc) at .\sources\fungible_asset.move:446:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::FreezeCapability: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::FreezeCapability>(): WellFormed($rsc) at .\sources\fungible_asset.move:446:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability'($rsc))));

    // trace_local[admin]($t0) at .\sources\fungible_asset.move:446:1+1
    assume {:print "$track_local(102,17,0):", $t0} $t0 == $t0;

    // trace_local[reciepient]($t1) at .\sources\fungible_asset.move:446:1+1
    assume {:print "$track_local(102,17,1):", $t1} $t1 == $t1;

    // $t2 := fungible_asset::get_metadata() on_abort goto L3 with $t3 at .\sources\fungible_asset.move:447:17+14
    assume {:print "$at(3,17476,17490)"} true;
    call $t2 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_get_metadata();
    if ($abort_flag) {
        assume {:print "$at(3,17476,17490)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,17):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t4 := signer::address_of($t0) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:448:37+25
    assume {:print "$at(3,17529,17554)"} true;
    call $t4 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(3,17529,17554)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,17):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t5 := object::is_owner<0x1::fungible_asset::Metadata>($t2, $t4) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:448:13+50
    call $t5 := $1_object_is_owner'$1_fungible_asset_Metadata'($t2, $t4);
    if ($abort_flag) {
        assume {:print "$at(3,17505,17555)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,17):", $t3} $t3 == $t3;
        goto L3;
    }

    // if ($t5) goto L1 else goto L0 at .\sources\fungible_asset.move:448:5+6
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at .\sources\fungible_asset.move:449:13+10
    assume {:print "$at(3,17609,17619)"} true;
L1:

    // $t6 := false at .\sources\fungible_asset.move:449:25+18
    assume {:print "$at(3,17621,17639)"} true;
    $t6 := false;
    assume $IsValid'bool'($t6);

    // $t7 := pack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::FreezeCapability($t6) at .\sources\fungible_asset.move:449:25+18
    $t7 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability($t6);

    // move_to<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::FreezeCapability>($t7, $t1) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:449:5+39
    if ($ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability_$memory, $t1->$addr)) {
        call $ExecFailureAbort();
    } else {
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability_$memory := $ResourceUpdate($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability_$memory, $t1->$addr, $t7);
    }
    if ($abort_flag) {
        assume {:print "$at(3,17601,17640)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,17):", $t3} $t3 == $t3;
        goto L3;
    }

    // goto L2 at .\sources\fungible_asset.move:446:78+186
    assume {:print "$at(3,17457,17643)"} true;
    goto L2;

    // label L0 at .\sources\fungible_asset.move:448:5+6
    assume {:print "$at(3,17497,17503)"} true;
L0:

    // $t8 := 1 at .\sources\fungible_asset.move:448:90+10
    assume {:print "$at(3,17582,17592)"} true;
    $t8 := 1;
    assume $IsValid'u64'($t8);

    // $t9 := error::permission_denied($t8) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:448:65+36
    call $t9 := $1_error_permission_denied($t8);
    if ($abort_flag) {
        assume {:print "$at(3,17557,17593)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,17):", $t3} $t3 == $t3;
        goto L3;
    }

    // trace_abort($t9) at .\sources\fungible_asset.move:448:5+6
    assume {:print "$at(3,17497,17503)"} true;
    assume {:print "$track_abort(102,17):", $t9} $t9 == $t9;

    // $t3 := move($t9) at .\sources\fungible_asset.move:448:5+6
    $t3 := $t9;

    // goto L3 at .\sources\fungible_asset.move:448:5+6
    goto L3;

    // label L2 at .\sources\fungible_asset.move:450:1+1
    assume {:print "$at(3,17642,17643)"} true;
L2:

    // return () at .\sources\fungible_asset.move:450:1+1
    assume {:print "$at(3,17642,17643)"} true;
    return;

    // label L3 at .\sources\fungible_asset.move:450:1+1
L3:

    // abort($t3) at .\sources\fungible_asset.move:450:1+1
    assume {:print "$at(3,17642,17643)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun fungible_asset::grant_mint_capability [verification] at .\sources\fungible_asset.move:405:1+263
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_grant_mint_capability$verify(_$t0: $signer, _$t1: $signer) returns ()
{
    // declare local variables
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability;
    var $t8: int;
    var $t9: int;
    var $t0: $signer;
    var $t1: $signer;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:405:1+1
    assume {:print "$at(3,16107,16108)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\fungible_asset.move:405:1+1
    assume $IsValid'signer'($t1) && $1_signer_is_txn_signer($t1) && $1_signer_is_txn_signer_addr($t1->$addr);

    // assume forall $rsc: 0x1::object::ObjectCore: ResourceDomain<0x1::object::ObjectCore>(): WellFormed($rsc) at .\sources\fungible_asset.move:405:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::MintCapability: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::MintCapability>(): WellFormed($rsc) at .\sources\fungible_asset.move:405:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability'($rsc))));

    // trace_local[admin]($t0) at .\sources\fungible_asset.move:405:1+1
    assume {:print "$track_local(102,18,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at .\sources\fungible_asset.move:405:1+1
    assume {:print "$track_local(102,18,1):", $t1} $t1 == $t1;

    // $t2 := fungible_asset::get_metadata() on_abort goto L3 with $t3 at .\sources\fungible_asset.move:406:17+14
    assume {:print "$at(3,16202,16216)"} true;
    call $t2 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_get_metadata();
    if ($abort_flag) {
        assume {:print "$at(3,16202,16216)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,18):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t4 := signer::address_of($t0) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:407:37+25
    assume {:print "$at(3,16255,16280)"} true;
    call $t4 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(3,16255,16280)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,18):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t5 := object::is_owner<0x1::fungible_asset::Metadata>($t2, $t4) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:407:13+50
    call $t5 := $1_object_is_owner'$1_fungible_asset_Metadata'($t2, $t4);
    if ($abort_flag) {
        assume {:print "$at(3,16231,16281)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,18):", $t3} $t3 == $t3;
        goto L3;
    }

    // if ($t5) goto L1 else goto L0 at .\sources\fungible_asset.move:407:5+6
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at .\sources\fungible_asset.move:409:13+9
    assume {:print "$at(3,16337,16346)"} true;
L1:

    // $t6 := false at .\sources\fungible_asset.move:409:24+17
    assume {:print "$at(3,16348,16365)"} true;
    $t6 := false;
    assume $IsValid'bool'($t6);

    // $t7 := pack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::MintCapability($t6) at .\sources\fungible_asset.move:409:24+17
    $t7 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability($t6);

    // move_to<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::MintCapability>($t7, $t1) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:409:5+37
    if ($ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability_$memory, $t1->$addr)) {
        call $ExecFailureAbort();
    } else {
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability_$memory := $ResourceUpdate($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability_$memory, $t1->$addr, $t7);
    }
    if ($abort_flag) {
        assume {:print "$at(3,16329,16366)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,18):", $t3} $t3 == $t3;
        goto L3;
    }

    // goto L2 at .\sources\fungible_asset.move:405:77+187
    assume {:print "$at(3,16183,16370)"} true;
    goto L2;

    // label L0 at .\sources\fungible_asset.move:407:5+6
    assume {:print "$at(3,16223,16229)"} true;
L0:

    // $t8 := 1 at .\sources\fungible_asset.move:407:90+10
    assume {:print "$at(3,16308,16318)"} true;
    $t8 := 1;
    assume $IsValid'u64'($t8);

    // $t9 := error::permission_denied($t8) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:407:65+36
    call $t9 := $1_error_permission_denied($t8);
    if ($abort_flag) {
        assume {:print "$at(3,16283,16319)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,18):", $t3} $t3 == $t3;
        goto L3;
    }

    // trace_abort($t9) at .\sources\fungible_asset.move:407:5+6
    assume {:print "$at(3,16223,16229)"} true;
    assume {:print "$track_abort(102,18):", $t9} $t9 == $t9;

    // $t3 := move($t9) at .\sources\fungible_asset.move:407:5+6
    $t3 := $t9;

    // goto L3 at .\sources\fungible_asset.move:407:5+6
    goto L3;

    // label L2 at .\sources\fungible_asset.move:410:1+1
    assume {:print "$at(3,16369,16370)"} true;
L2:

    // return () at .\sources\fungible_asset.move:410:1+1
    assume {:print "$at(3,16369,16370)"} true;
    return;

    // label L3 at .\sources\fungible_asset.move:410:1+1
L3:

    // abort($t3) at .\sources\fungible_asset.move:410:1+1
    assume {:print "$at(3,16369,16370)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun fungible_asset::grant_unfreeze_capability [verification] at .\sources\fungible_asset.move:462:1+264
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_grant_unfreeze_capability$verify(_$t0: $signer, _$t1: $signer) returns ()
{
    // declare local variables
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability;
    var $t8: int;
    var $t9: int;
    var $t0: $signer;
    var $t1: $signer;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:462:1+1
    assume {:print "$at(3,17942,17943)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\fungible_asset.move:462:1+1
    assume $IsValid'signer'($t1) && $1_signer_is_txn_signer($t1) && $1_signer_is_txn_signer_addr($t1->$addr);

    // assume forall $rsc: 0x1::object::ObjectCore: ResourceDomain<0x1::object::ObjectCore>(): WellFormed($rsc) at .\sources\fungible_asset.move:462:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::UnfreezeCapability: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::UnfreezeCapability>(): WellFormed($rsc) at .\sources\fungible_asset.move:462:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability'($rsc))));

    // trace_local[admin]($t0) at .\sources\fungible_asset.move:462:1+1
    assume {:print "$track_local(102,19,0):", $t0} $t0 == $t0;

    // trace_local[reciepient]($t1) at .\sources\fungible_asset.move:462:1+1
    assume {:print "$track_local(102,19,1):", $t1} $t1 == $t1;

    // $t2 := fungible_asset::get_metadata() on_abort goto L3 with $t3 at .\sources\fungible_asset.move:463:17+14
    assume {:print "$at(3,18040,18054)"} true;
    call $t2 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_get_metadata();
    if ($abort_flag) {
        assume {:print "$at(3,18040,18054)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,19):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t4 := signer::address_of($t0) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:464:37+25
    assume {:print "$at(3,18093,18118)"} true;
    call $t4 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(3,18093,18118)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,19):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t5 := object::is_owner<0x1::fungible_asset::Metadata>($t2, $t4) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:464:13+50
    call $t5 := $1_object_is_owner'$1_fungible_asset_Metadata'($t2, $t4);
    if ($abort_flag) {
        assume {:print "$at(3,18069,18119)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,19):", $t3} $t3 == $t3;
        goto L3;
    }

    // if ($t5) goto L1 else goto L0 at .\sources\fungible_asset.move:464:5+6
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at .\sources\fungible_asset.move:465:13+10
    assume {:print "$at(3,18173,18183)"} true;
L1:

    // $t6 := false at .\sources\fungible_asset.move:465:24+18
    assume {:print "$at(3,18184,18202)"} true;
    $t6 := false;
    assume $IsValid'bool'($t6);

    // $t7 := pack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::UnfreezeCapability($t6) at .\sources\fungible_asset.move:465:24+18
    $t7 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability($t6);

    // move_to<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::UnfreezeCapability>($t7, $t1) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:465:5+38
    if ($ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability_$memory, $t1->$addr)) {
        call $ExecFailureAbort();
    } else {
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability_$memory := $ResourceUpdate($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability_$memory, $t1->$addr, $t7);
    }
    if ($abort_flag) {
        assume {:print "$at(3,18165,18203)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,19):", $t3} $t3 == $t3;
        goto L3;
    }

    // goto L2 at .\sources\fungible_asset.move:462:80+185
    assume {:print "$at(3,18021,18206)"} true;
    goto L2;

    // label L0 at .\sources\fungible_asset.move:464:5+6
    assume {:print "$at(3,18061,18067)"} true;
L0:

    // $t8 := 1 at .\sources\fungible_asset.move:464:90+10
    assume {:print "$at(3,18146,18156)"} true;
    $t8 := 1;
    assume $IsValid'u64'($t8);

    // $t9 := error::permission_denied($t8) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:464:65+36
    call $t9 := $1_error_permission_denied($t8);
    if ($abort_flag) {
        assume {:print "$at(3,18121,18157)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,19):", $t3} $t3 == $t3;
        goto L3;
    }

    // trace_abort($t9) at .\sources\fungible_asset.move:464:5+6
    assume {:print "$at(3,18061,18067)"} true;
    assume {:print "$track_abort(102,19):", $t9} $t9 == $t9;

    // $t3 := move($t9) at .\sources\fungible_asset.move:464:5+6
    $t3 := $t9;

    // goto L3 at .\sources\fungible_asset.move:464:5+6
    goto L3;

    // label L2 at .\sources\fungible_asset.move:466:1+1
    assume {:print "$at(3,18205,18206)"} true;
L2:

    // return () at .\sources\fungible_asset.move:466:1+1
    assume {:print "$at(3,18205,18206)"} true;
    return;

    // label L3 at .\sources\fungible_asset.move:466:1+1
L3:

    // abort($t3) at .\sources\fungible_asset.move:466:1+1
    assume {:print "$at(3,18205,18206)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun fungible_asset::grant_withdraw_capability [verification] at .\sources\fungible_asset.move:478:1+268
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_grant_withdraw_capability$verify(_$t0: $signer, _$t1: $signer) returns ()
{
    // declare local variables
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability;
    var $t8: int;
    var $t9: int;
    var $t0: $signer;
    var $t1: $signer;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:478:1+1
    assume {:print "$at(3,18519,18520)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\fungible_asset.move:478:1+1
    assume $IsValid'signer'($t1) && $1_signer_is_txn_signer($t1) && $1_signer_is_txn_signer_addr($t1->$addr);

    // assume forall $rsc: 0x1::object::ObjectCore: ResourceDomain<0x1::object::ObjectCore>(): WellFormed($rsc) at .\sources\fungible_asset.move:478:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::WithdrawCapability: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::WithdrawCapability>(): WellFormed($rsc) at .\sources\fungible_asset.move:478:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability'($rsc))));

    // trace_local[admin]($t0) at .\sources\fungible_asset.move:478:1+1
    assume {:print "$track_local(102,20,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at .\sources\fungible_asset.move:478:1+1
    assume {:print "$track_local(102,20,1):", $t1} $t1 == $t1;

    // $t2 := fungible_asset::get_metadata() on_abort goto L3 with $t3 at .\sources\fungible_asset.move:479:17+14
    assume {:print "$at(3,18617,18631)"} true;
    call $t2 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_get_metadata();
    if ($abort_flag) {
        assume {:print "$at(3,18617,18631)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,20):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t4 := signer::address_of($t0) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:480:37+25
    assume {:print "$at(3,18670,18695)"} true;
    call $t4 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(3,18670,18695)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,20):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t5 := object::is_owner<0x1::fungible_asset::Metadata>($t2, $t4) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:480:13+50
    call $t5 := $1_object_is_owner'$1_fungible_asset_Metadata'($t2, $t4);
    if ($abort_flag) {
        assume {:print "$at(3,18646,18696)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,20):", $t3} $t3 == $t3;
        goto L3;
    }

    // if ($t5) goto L1 else goto L0 at .\sources\fungible_asset.move:480:5+6
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at .\sources\fungible_asset.move:481:13+9
    assume {:print "$at(3,18750,18759)"} true;
L1:

    // $t6 := false at .\sources\fungible_asset.move:481:24+21
    assume {:print "$at(3,18761,18782)"} true;
    $t6 := false;
    assume $IsValid'bool'($t6);

    // $t7 := pack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::WithdrawCapability($t6) at .\sources\fungible_asset.move:481:24+21
    $t7 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability($t6);

    // move_to<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::WithdrawCapability>($t7, $t1) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:481:5+41
    if ($ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability_$memory, $t1->$addr)) {
        call $ExecFailureAbort();
    } else {
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability_$memory := $ResourceUpdate($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability_$memory, $t1->$addr, $t7);
    }
    if ($abort_flag) {
        assume {:print "$at(3,18742,18783)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,20):", $t3} $t3 == $t3;
        goto L3;
    }

    // goto L2 at .\sources\fungible_asset.move:478:80+189
    assume {:print "$at(3,18598,18787)"} true;
    goto L2;

    // label L0 at .\sources\fungible_asset.move:480:5+6
    assume {:print "$at(3,18638,18644)"} true;
L0:

    // $t8 := 1 at .\sources\fungible_asset.move:480:90+10
    assume {:print "$at(3,18723,18733)"} true;
    $t8 := 1;
    assume $IsValid'u64'($t8);

    // $t9 := error::permission_denied($t8) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:480:65+36
    call $t9 := $1_error_permission_denied($t8);
    if ($abort_flag) {
        assume {:print "$at(3,18698,18734)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,20):", $t3} $t3 == $t3;
        goto L3;
    }

    // trace_abort($t9) at .\sources\fungible_asset.move:480:5+6
    assume {:print "$at(3,18638,18644)"} true;
    assume {:print "$track_abort(102,20):", $t9} $t9 == $t9;

    // $t3 := move($t9) at .\sources\fungible_asset.move:480:5+6
    $t3 := $t9;

    // goto L3 at .\sources\fungible_asset.move:480:5+6
    goto L3;

    // label L2 at .\sources\fungible_asset.move:482:1+1
    assume {:print "$at(3,18786,18787)"} true;
L2:

    // return () at .\sources\fungible_asset.move:482:1+1
    assume {:print "$at(3,18786,18787)"} true;
    return;

    // label L3 at .\sources\fungible_asset.move:482:1+1
L3:

    // abort($t3) at .\sources\fungible_asset.move:482:1+1
    assume {:print "$at(3,18786,18787)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun fungible_asset::revoke_burn_capability [verification] at .\sources\fungible_asset.move:437:1+185
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_revoke_burn_capability$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability;
    var $t3: int;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:437:1+1
    assume {:print "$at(3,17101,17102)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\fungible_asset.move:437:1+1
    assume $IsValid'address'($t1);

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::BurnCapability: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::BurnCapability>(): WellFormed($rsc) at .\sources\fungible_asset.move:437:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability'($rsc))));

    // trace_local[_admin]($t0) at .\sources\fungible_asset.move:437:1+1
    assume {:print "$track_local(102,21,0):", $t0} $t0 == $t0;

    // trace_local[target]($t1) at .\sources\fungible_asset.move:437:1+1
    assume {:print "$track_local(102,21,1):", $t1} $t1 == $t1;

    // $t2 := move_from<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::BurnCapability>($t1) on_abort goto L2 with $t3 at .\sources\fungible_asset.move:438:15+33
    assume {:print "$at(3,17214,17247)"} true;
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability_$memory, $t1);
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability_$memory := $ResourceRemove($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_BurnCapability_$memory, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(3,17214,17247)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,21):", $t3} $t3 == $t3;
        goto L2;
    }

    // fungible_asset::destroy_burn_capability($t2) on_abort goto L2 with $t3 at .\sources\fungible_asset.move:439:5+28
    assume {:print "$at(3,17254,17282)"} true;
    call $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_destroy_burn_capability($t2);
    if ($abort_flag) {
        assume {:print "$at(3,17254,17282)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,21):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at .\sources\fungible_asset.move:440:1+1
    assume {:print "$at(3,17285,17286)"} true;
L1:

    // return () at .\sources\fungible_asset.move:440:1+1
    assume {:print "$at(3,17285,17286)"} true;
    return;

    // label L2 at .\sources\fungible_asset.move:440:1+1
L2:

    // abort($t3) at .\sources\fungible_asset.move:440:1+1
    assume {:print "$at(3,17285,17286)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun fungible_asset::revoke_deposit_capability [verification] at .\sources\fungible_asset.move:501:1+332
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_revoke_deposit_capability$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability;
    var $t7: int;
    var $t8: int;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:501:1+1
    assume {:print "$at(3,19505,19506)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\fungible_asset.move:501:1+1
    assume $IsValid'address'($t1);

    // assume forall $rsc: 0x1::object::ObjectCore: ResourceDomain<0x1::object::ObjectCore>(): WellFormed($rsc) at .\sources\fungible_asset.move:501:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::DepositCapability: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::DepositCapability>(): WellFormed($rsc) at .\sources\fungible_asset.move:501:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability'($rsc))));

    // trace_local[admin]($t0) at .\sources\fungible_asset.move:501:1+1
    assume {:print "$track_local(102,22,0):", $t0} $t0 == $t0;

    // trace_local[target]($t1) at .\sources\fungible_asset.move:501:1+1
    assume {:print "$track_local(102,22,1):", $t1} $t1 == $t1;

    // $t2 := fungible_asset::get_metadata() on_abort goto L3 with $t3 at .\sources\fungible_asset.move:502:17+14
    assume {:print "$at(3,19625,19639)"} true;
    call $t2 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_get_metadata();
    if ($abort_flag) {
        assume {:print "$at(3,19625,19639)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,22):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t4 := signer::address_of($t0) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:503:37+25
    assume {:print "$at(3,19678,19703)"} true;
    call $t4 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(3,19678,19703)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,22):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t5 := object::is_owner<0x1::fungible_asset::Metadata>($t2, $t4) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:503:13+50
    call $t5 := $1_object_is_owner'$1_fungible_asset_Metadata'($t2, $t4);
    if ($abort_flag) {
        assume {:print "$at(3,19654,19704)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,22):", $t3} $t3 == $t3;
        goto L3;
    }

    // if ($t5) goto L1 else goto L0 at .\sources\fungible_asset.move:503:5+6
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at .\sources\fungible_asset.move:504:14+36
    assume {:print "$at(3,19759,19795)"} true;
L1:

    // $t6 := move_from<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::DepositCapability>($t1) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:504:14+36
    assume {:print "$at(3,19759,19795)"} true;
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability_$memory, $t1);
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability_$memory := $ResourceRemove($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_DepositCapability_$memory, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(3,19759,19795)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,22):", $t3} $t3 == $t3;
        goto L3;
    }

    // fungible_asset::destroy_deposit_capability($t6) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:505:5+31
    assume {:print "$at(3,19802,19833)"} true;
    call $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_destroy_deposit_capability($t6);
    if ($abort_flag) {
        assume {:print "$at(3,19802,19833)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,22):", $t3} $t3 == $t3;
        goto L3;
    }

    // goto L2 at .\sources\fungible_asset.move:501:102+231
    assume {:print "$at(3,19606,19837)"} true;
    goto L2;

    // label L0 at .\sources\fungible_asset.move:503:90+10
    assume {:print "$at(3,19731,19741)"} true;
L0:

    // $t7 := 1 at .\sources\fungible_asset.move:503:90+10
    assume {:print "$at(3,19731,19741)"} true;
    $t7 := 1;
    assume $IsValid'u64'($t7);

    // $t8 := error::permission_denied($t7) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:503:65+36
    call $t8 := $1_error_permission_denied($t7);
    if ($abort_flag) {
        assume {:print "$at(3,19706,19742)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,22):", $t3} $t3 == $t3;
        goto L3;
    }

    // trace_abort($t8) at .\sources\fungible_asset.move:503:5+6
    assume {:print "$at(3,19646,19652)"} true;
    assume {:print "$track_abort(102,22):", $t8} $t8 == $t8;

    // $t3 := move($t8) at .\sources\fungible_asset.move:503:5+6
    $t3 := $t8;

    // goto L3 at .\sources\fungible_asset.move:503:5+6
    goto L3;

    // label L2 at .\sources\fungible_asset.move:506:1+1
    assume {:print "$at(3,19836,19837)"} true;
L2:

    // return () at .\sources\fungible_asset.move:506:1+1
    assume {:print "$at(3,19836,19837)"} true;
    return;

    // label L3 at .\sources\fungible_asset.move:506:1+1
L3:

    // abort($t3) at .\sources\fungible_asset.move:506:1+1
    assume {:print "$at(3,19836,19837)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun fungible_asset::revoke_freeze_capability [verification] at .\sources\fungible_asset.move:453:1+193
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_revoke_freeze_capability$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability;
    var $t3: int;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:453:1+1
    assume {:print "$at(3,17649,17650)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\fungible_asset.move:453:1+1
    assume $IsValid'address'($t1);

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::FreezeCapability: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::FreezeCapability>(): WellFormed($rsc) at .\sources\fungible_asset.move:453:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability'($rsc))));

    // trace_local[_admin]($t0) at .\sources\fungible_asset.move:453:1+1
    assume {:print "$track_local(102,23,0):", $t0} $t0 == $t0;

    // trace_local[target]($t1) at .\sources\fungible_asset.move:453:1+1
    assume {:print "$track_local(102,23,1):", $t1} $t1 == $t1;

    // $t2 := move_from<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::FreezeCapability>($t1) on_abort goto L2 with $t3 at .\sources\fungible_asset.move:454:15+35
    assume {:print "$at(3,17766,17801)"} true;
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability_$memory, $t1);
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability_$memory := $ResourceRemove($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_FreezeCapability_$memory, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(3,17766,17801)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,23):", $t3} $t3 == $t3;
        goto L2;
    }

    // fungible_asset::destroy_freeze_capability($t2) on_abort goto L2 with $t3 at .\sources\fungible_asset.move:455:5+30
    assume {:print "$at(3,17808,17838)"} true;
    call $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_destroy_freeze_capability($t2);
    if ($abort_flag) {
        assume {:print "$at(3,17808,17838)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,23):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at .\sources\fungible_asset.move:456:1+1
    assume {:print "$at(3,17841,17842)"} true;
L1:

    // return () at .\sources\fungible_asset.move:456:1+1
    assume {:print "$at(3,17841,17842)"} true;
    return;

    // label L2 at .\sources\fungible_asset.move:456:1+1
L2:

    // abort($t3) at .\sources\fungible_asset.move:456:1+1
    assume {:print "$at(3,17841,17842)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun fungible_asset::revoke_mint_capability [verification] at .\sources\fungible_asset.move:418:1+187
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_revoke_mint_capability$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability;
    var $t3: int;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:418:1+1
    assume {:print "$at(3,16550,16551)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\fungible_asset.move:418:1+1
    assume $IsValid'address'($t1);

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::MintCapability: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::MintCapability>(): WellFormed($rsc) at .\sources\fungible_asset.move:418:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability'($rsc))));

    // assume exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::MintCapability>($t1) at .\sources\fungible_asset.move:414:5+40
    assume {:print "$at(3,16457,16497)"} true;
    assume $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability_$memory, $t1);

    // trace_local[_admin]($t0) at .\sources\fungible_asset.move:418:1+1
    assume {:print "$at(3,16550,16551)"} true;
    assume {:print "$track_local(102,24,0):", $t0} $t0 == $t0;

    // trace_local[target]($t1) at .\sources\fungible_asset.move:418:1+1
    assume {:print "$track_local(102,24,1):", $t1} $t1 == $t1;

    // $t2 := move_from<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::MintCapability>($t1) on_abort goto L2 with $t3 at .\sources\fungible_asset.move:419:15+33
    assume {:print "$at(3,16665,16698)"} true;
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability_$memory, $t1);
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability_$memory := $ResourceRemove($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability_$memory, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(3,16665,16698)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,24):", $t3} $t3 == $t3;
        goto L2;
    }

    // fungible_asset::destroy_mint_capability($t2) on_abort goto L2 with $t3 at .\sources\fungible_asset.move:420:5+28
    assume {:print "$at(3,16705,16733)"} true;
    call $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_destroy_mint_capability($t2);
    if ($abort_flag) {
        assume {:print "$at(3,16705,16733)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,24):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at .\sources\fungible_asset.move:421:1+1
    assume {:print "$at(3,16736,16737)"} true;
L1:

    // assert Not(exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::MintCapability>($t1)) at .\sources\fungible_asset.move:415:5+40
    assume {:print "$at(3,16503,16543)"} true;
    assert {:msg "assert_failed(3,16503,16543): post-condition does not hold"}
      !$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_MintCapability_$memory, $t1);

    // return () at .\sources\fungible_asset.move:415:5+40
    return;

    // label L2 at .\sources\fungible_asset.move:421:1+1
    assume {:print "$at(3,16736,16737)"} true;
L2:

    // abort($t3) at .\sources\fungible_asset.move:421:1+1
    assume {:print "$at(3,16736,16737)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun fungible_asset::revoke_unfreeze_capability [verification] at .\sources\fungible_asset.move:469:1+201
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_revoke_unfreeze_capability$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability;
    var $t3: int;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:469:1+1
    assume {:print "$at(3,18212,18213)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\fungible_asset.move:469:1+1
    assume $IsValid'address'($t1);

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::UnfreezeCapability: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::UnfreezeCapability>(): WellFormed($rsc) at .\sources\fungible_asset.move:469:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability'($rsc))));

    // trace_local[_admin]($t0) at .\sources\fungible_asset.move:469:1+1
    assume {:print "$track_local(102,25,0):", $t0} $t0 == $t0;

    // trace_local[target]($t1) at .\sources\fungible_asset.move:469:1+1
    assume {:print "$track_local(102,25,1):", $t1} $t1 == $t1;

    // $t2 := move_from<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::UnfreezeCapability>($t1) on_abort goto L2 with $t3 at .\sources\fungible_asset.move:470:15+37
    assume {:print "$at(3,18333,18370)"} true;
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability_$memory, $t1);
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability_$memory := $ResourceRemove($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_UnfreezeCapability_$memory, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(3,18333,18370)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,25):", $t3} $t3 == $t3;
        goto L2;
    }

    // fungible_asset::destroy_unfreeze_capability($t2) on_abort goto L2 with $t3 at .\sources\fungible_asset.move:471:5+32
    assume {:print "$at(3,18377,18409)"} true;
    call $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_destroy_unfreeze_capability($t2);
    if ($abort_flag) {
        assume {:print "$at(3,18377,18409)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,25):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at .\sources\fungible_asset.move:472:1+1
    assume {:print "$at(3,18412,18413)"} true;
L1:

    // return () at .\sources\fungible_asset.move:472:1+1
    assume {:print "$at(3,18412,18413)"} true;
    return;

    // label L2 at .\sources\fungible_asset.move:472:1+1
L2:

    // abort($t3) at .\sources\fungible_asset.move:472:1+1
    assume {:print "$at(3,18412,18413)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun fungible_asset::revoke_withdraw_capability [verification] at .\sources\fungible_asset.move:484:1+339
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_revoke_withdraw_capability$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability;
    var $t7: int;
    var $t8: int;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:484:1+1
    assume {:print "$at(3,18791,18792)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\fungible_asset.move:484:1+1
    assume $IsValid'address'($t1);

    // assume forall $rsc: 0x1::object::ObjectCore: ResourceDomain<0x1::object::ObjectCore>(): WellFormed($rsc) at .\sources\fungible_asset.move:484:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::WithdrawCapability: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::WithdrawCapability>(): WellFormed($rsc) at .\sources\fungible_asset.move:484:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability'($rsc))));

    // trace_local[admin]($t0) at .\sources\fungible_asset.move:484:1+1
    assume {:print "$track_local(102,26,0):", $t0} $t0 == $t0;

    // trace_local[target]($t1) at .\sources\fungible_asset.move:484:1+1
    assume {:print "$track_local(102,26,1):", $t1} $t1 == $t1;

    // $t2 := fungible_asset::get_metadata() on_abort goto L3 with $t3 at .\sources\fungible_asset.move:485:17+14
    assume {:print "$at(3,18915,18929)"} true;
    call $t2 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_get_metadata();
    if ($abort_flag) {
        assume {:print "$at(3,18915,18929)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,26):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t4 := signer::address_of($t0) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:486:37+25
    assume {:print "$at(3,18968,18993)"} true;
    call $t4 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(3,18968,18993)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,26):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t5 := object::is_owner<0x1::fungible_asset::Metadata>($t2, $t4) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:486:13+50
    call $t5 := $1_object_is_owner'$1_fungible_asset_Metadata'($t2, $t4);
    if ($abort_flag) {
        assume {:print "$at(3,18944,18994)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,26):", $t3} $t3 == $t3;
        goto L3;
    }

    // if ($t5) goto L1 else goto L0 at .\sources\fungible_asset.move:486:5+6
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at .\sources\fungible_asset.move:487:15+37
    assume {:print "$at(3,19050,19087)"} true;
L1:

    // $t6 := move_from<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::WithdrawCapability>($t1) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:487:15+37
    assume {:print "$at(3,19050,19087)"} true;
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability_$memory, $t1);
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability_$memory := $ResourceRemove($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_WithdrawCapability_$memory, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(3,19050,19087)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,26):", $t3} $t3 == $t3;
        goto L3;
    }

    // fungible_asset::destroy_withdraw_capability($t6) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:488:5+32
    assume {:print "$at(3,19094,19126)"} true;
    call $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_destroy_withdraw_capability($t6);
    if ($abort_flag) {
        assume {:print "$at(3,19094,19126)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,26):", $t3} $t3 == $t3;
        goto L3;
    }

    // goto L2 at .\sources\fungible_asset.move:484:106+234
    assume {:print "$at(3,18896,19130)"} true;
    goto L2;

    // label L0 at .\sources\fungible_asset.move:486:90+10
    assume {:print "$at(3,19021,19031)"} true;
L0:

    // $t7 := 1 at .\sources\fungible_asset.move:486:90+10
    assume {:print "$at(3,19021,19031)"} true;
    $t7 := 1;
    assume $IsValid'u64'($t7);

    // $t8 := error::permission_denied($t7) on_abort goto L3 with $t3 at .\sources\fungible_asset.move:486:65+36
    call $t8 := $1_error_permission_denied($t7);
    if ($abort_flag) {
        assume {:print "$at(3,18996,19032)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(102,26):", $t3} $t3 == $t3;
        goto L3;
    }

    // trace_abort($t8) at .\sources\fungible_asset.move:486:5+6
    assume {:print "$at(3,18936,18942)"} true;
    assume {:print "$track_abort(102,26):", $t8} $t8 == $t8;

    // $t3 := move($t8) at .\sources\fungible_asset.move:486:5+6
    $t3 := $t8;

    // goto L3 at .\sources\fungible_asset.move:486:5+6
    goto L3;

    // label L2 at .\sources\fungible_asset.move:489:1+1
    assume {:print "$at(3,19129,19130)"} true;
L2:

    // return () at .\sources\fungible_asset.move:489:1+1
    assume {:print "$at(3,19129,19130)"} true;
    return;

    // label L3 at .\sources\fungible_asset.move:489:1+1
L3:

    // abort($t3) at .\sources\fungible_asset.move:489:1+1
    assume {:print "$at(3,19129,19130)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun fungible_asset::set_max_supply [verification] at .\sources\fungible_asset.move:376:1+339
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_set_max_supply$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: $Mutation ($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState);
    var $t3: $Mutation (int);
    var $t4: int;
    var $t5: int;
    var $t6: $Mutation ($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState);
    var $t7: int;
    var $t8: bool;
    var $t9: $Mutation (int);
    var $t10: int;
    var $t11: int;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#43: $Memory $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:376:1+1
    assume {:print "$at(3,15244,15245)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\fungible_asset.move:376:1+1
    assume $IsValid'u64'($t1);

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(): WellFormed($rsc) at .\sources\fungible_asset.move:376:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'($rsc))));

    // assume exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0)) at .\sources\fungible_asset.move:360:5+58
    assume {:print "$at(3,14565,14623)"} true;
    assume $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0));

    // assume Ge($t1, select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0)))) at .\sources\fungible_asset.move:364:5+83
    assume {:print "$at(3,14755,14838)"} true;
    assume ($t1 >= $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$total_emitted);

    // @43 := save_mem(fungible_asset::EmissionState) at .\sources\fungible_asset.move:364:5+83
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#43 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory;

    // trace_local[admin]($t0) at .\sources\fungible_asset.move:376:1+1
    assume {:print "$at(3,15244,15245)"} true;
    assume {:print "$track_local(102,27,0):", $t0} $t0 == $t0;

    // trace_local[new_cap]($t1) at .\sources\fungible_asset.move:376:1+1
    assume {:print "$track_local(102,27,1):", $t1} $t1 == $t1;

    // $t4 := signer::address_of($t0) on_abort goto L3 with $t5 at .\sources\fungible_asset.move:377:53+25
    assume {:print "$at(3,15384,15409)"} true;
    call $t4 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(3,15384,15409)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(102,27):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t6 := borrow_global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>($t4) on_abort goto L3 with $t5 at .\sources\fungible_asset.move:377:20+59
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $Mutation($Global($t4), EmptyVec(), $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $t4));
    }
    if ($abort_flag) {
        assume {:print "$at(3,15351,15410)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(102,27):", $t5} $t5 == $t5;
        goto L3;
    }

    // trace_local[emission]($t6) at .\sources\fungible_asset.move:377:20+59
    $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState' := $Dereference($t6);
    assume {:print "$track_local(102,27,2):", $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'} $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState' == $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState';

    // $t7 := get_field<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>.total_emitted($t6) at .\sources\fungible_asset.move:380:20+22
    assume {:print "$at(3,15452,15474)"} true;
    $t7 := $Dereference($t6)->$total_emitted;

    // $t8 := >=($t1, $t7) at .\sources\fungible_asset.move:380:9+33
    call $t8 := $Ge($t1, $t7);

    // if ($t8) goto L1 else goto L0 at .\sources\fungible_asset.move:379:5+6
    assume {:print "$at(3,15423,15429)"} true;
    if ($t8) { goto L1; } else { goto L0; }

    // label L1 at .\sources\fungible_asset.move:384:5+19
    assume {:print "$at(3,15550,15569)"} true;
L1:

    // $t9 := borrow_field<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>.max_supply($t6) at .\sources\fungible_asset.move:384:5+19
    assume {:print "$at(3,15550,15569)"} true;
    $t9 := $ChildMutation($t6, 0, $Dereference($t6)->$max_supply);

    // trace_local[$t10]($t9) at .\sources\fungible_asset.move:384:5+29
    $temp_0'u64' := $Dereference($t9);
    assume {:print "$track_local(102,27,3):", $temp_0'u64'} $temp_0'u64' == $temp_0'u64';

    // write_ref($t9, $t1) at .\sources\fungible_asset.move:384:5+29
    $t9 := $UpdateMutation($t9, $t1);

    // write_back[Reference($t6).max_supply (u64)]($t9) at .\sources\fungible_asset.move:384:5+29
    $t6 := $UpdateMutation($t6, $Update'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'_max_supply($Dereference($t6), $Dereference($t9)));

    // write_back[0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState@]($t6) at .\sources\fungible_asset.move:384:5+29
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory := $ResourceUpdate($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $GlobalLocationAddress($t6),
        $Dereference($t6));

    // goto L2 at .\sources\fungible_asset.move:376:86+254
    assume {:print "$at(3,15329,15583)"} true;
    goto L2;

    // label L0 at .\sources\fungible_asset.move:379:5+6
    assume {:print "$at(3,15423,15429)"} true;
L0:

    // drop($t6) at .\sources\fungible_asset.move:379:5+6
    assume {:print "$at(3,15423,15429)"} true;

    // $t10 := 226 at .\sources\fungible_asset.move:381:34+23
    assume {:print "$at(3,15510,15533)"} true;
    $t10 := 226;
    assume $IsValid'u64'($t10);

    // $t11 := error::permission_denied($t10) on_abort goto L3 with $t5 at .\sources\fungible_asset.move:381:9+49
    call $t11 := $1_error_permission_denied($t10);
    if ($abort_flag) {
        assume {:print "$at(3,15485,15534)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(102,27):", $t5} $t5 == $t5;
        goto L3;
    }

    // trace_abort($t11) at .\sources\fungible_asset.move:379:5+6
    assume {:print "$at(3,15423,15429)"} true;
    assume {:print "$track_abort(102,27):", $t11} $t11 == $t11;

    // $t5 := move($t11) at .\sources\fungible_asset.move:379:5+6
    $t5 := $t11;

    // goto L3 at .\sources\fungible_asset.move:379:5+6
    goto L3;

    // label L2 at .\sources\fungible_asset.move:385:1+1
    assume {:print "$at(3,15582,15583)"} true;
L2:

    // assert exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0)) at .\sources\fungible_asset.move:361:5+57
    assume {:print "$at(3,14629,14686)"} true;
    assert {:msg "assert_failed(3,14629,14686): post-condition does not hold"}
      $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0));

    // assert Eq<u64>(select fungible_asset::EmissionState.max_supply<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), $t1) at .\sources\fungible_asset.move:367:5+79
    assume {:print "$at(3,14894,14973)"} true;
    assert {:msg "assert_failed(3,14894,14973): post-condition does not hold"}
      $IsEqual'u64'($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$max_supply, $t1);

    // assert Eq<u64>(select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global[@43]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of[]($t0)))) at .\sources\fungible_asset.move:370:5+151
    assume {:print "$at(3,15029,15180)"} true;
    assert {:msg "assert_failed(3,15029,15180): post-condition does not hold"}
      $IsEqual'u64'($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$total_emitted, $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#43, $1_signer_$address_of($t0))->$total_emitted);

    // return () at .\sources\fungible_asset.move:370:5+151
    return;

    // label L3 at .\sources\fungible_asset.move:385:1+1
    assume {:print "$at(3,15582,15583)"} true;
L3:

    // abort($t5) at .\sources\fungible_asset.move:385:1+1
    assume {:print "$at(3,15582,15583)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun fungible_asset::test_initialize [verification] at .\sources\fungible_asset.move:523:1+926
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_test_initialize$verify(_$t0: $signer) returns ()
{
    // declare local variables
    var $t1: $1_object_ConstructorRef;
    var $t2: $1_object_ConstructorRef;
    var $t3: $1_fungible_asset_BurnRef;
    var $t4: $signer;
    var $t5: $signer;
    var $t6: $1_fungible_asset_TransferRef;
    var $t7: $1_fungible_asset_MintRef;
    var $t8: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset;
    var $t9: Vec (int);
    var $t10: int;
    var $t11: int;
    var $t12: $1_object_ConstructorRef;
    var $t13: int;
    var $t14: $1_option_Option'u128';
    var $t15: Vec (int);
    var $t16: $1_string_String;
    var $t17: Vec (int);
    var $t18: $1_string_String;
    var $t19: int;
    var $t20: Vec (int);
    var $t21: $1_string_String;
    var $t22: Vec (int);
    var $t23: $1_string_String;
    var $t24: $1_fungible_asset_MintRef;
    var $t25: $1_fungible_asset_BurnRef;
    var $t26: $1_fungible_asset_TransferRef;
    var $t27: $signer;
    var $t28: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset;
    var $t29: int;
    var $t30: int;
    var $t31: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState;
    var $t0: $signer;
    var $temp_0'$1_fungible_asset_BurnRef': $1_fungible_asset_BurnRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset': $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:523:1+1
    assume {:print "$at(3,20458,20459)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume forall $rsc: 0x1::features::Features: ResourceDomain<0x1::features::Features>(): WellFormed($rsc) at .\sources\fungible_asset.move:523:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: 0x1::object::ObjectCore: ResourceDomain<0x1::object::ObjectCore>(): WellFormed($rsc) at .\sources\fungible_asset.move:523:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::ConcurrentSupply: ResourceDomain<0x1::fungible_asset::ConcurrentSupply>(): WellFormed($rsc) at .\sources\fungible_asset.move:523:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentSupply'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::Metadata: ResourceDomain<0x1::fungible_asset::Metadata>(): WellFormed($rsc) at .\sources\fungible_asset.move:523:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Metadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Metadata_$memory, $a_0);
    ($IsValid'$1_fungible_asset_Metadata'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::Supply: ResourceDomain<0x1::fungible_asset::Supply>(): And(WellFormed($rsc), Le(Len<u128>(select option::Option.vec(select fungible_asset::Supply.maximum($rsc))), 1)) at .\sources\fungible_asset.move:523:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Supply_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Supply_$memory, $a_0);
    (($IsValid'$1_fungible_asset_Supply'($rsc) && (LenVec($rsc->$maximum->$vec) <= 1)))));

    // assume forall $rsc: 0x1::primary_fungible_store::DeriveRefPod: ResourceDomain<0x1::primary_fungible_store::DeriveRefPod>(): WellFormed($rsc) at .\sources\fungible_asset.move:523:1+1
    assume (forall $a_0: int :: {$ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0)}(var $rsc := $ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0);
    ($IsValid'$1_primary_fungible_store_DeriveRefPod'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(): WellFormed($rsc) at .\sources\fungible_asset.move:523:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>(): WellFormed($rsc) at .\sources\fungible_asset.move:523:1+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'($rsc))));

    // trace_local[admin]($t0) at .\sources\fungible_asset.move:523:1+1
    assume {:print "$track_local(102,28,0):", $t0} $t0 == $t0;

    // $t9 := [66, 76, 79, 67, 75, 70, 79, 82, 71, 69] at .\sources\fungible_asset.move:524:63+12
    assume {:print "$at(3,20566,20578)"} true;
    $t9 := ConcatVec(ConcatVec(MakeVec4(66, 76, 79, 67), MakeVec4(75, 70, 79, 82)), MakeVec2(71, 69));
    assume $IsValid'vec'u8''($t9);

    // assume Identical($t10, signer::$address_of($t0)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.spec.move:162:9+50
    assume {:print "$at(185,6936,6986)"} true;
    assume ($t10 == $1_signer_$address_of($t0));

    // assume Identical($t11, object::spec_create_object_address($t10, $t9)) at C:\Users\DELL/.move\https___github_com_aptos-labs_aptos-core_git_testnet\aptos-move/framework/aptos-framework\sources\object.spec.move:163:9+65
    assume {:print "$at(185,6995,7060)"} true;
    assume ($t11 == $1_object_spec_create_object_address($t10, $t9));

    // $t12 := object::create_named_object($t0, $t9) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:524:28+48
    assume {:print "$at(3,20531,20579)"} true;
    call $t12 := $1_object_create_named_object($t0, $t9);
    if ($abort_flag) {
        assume {:print "$at(3,20531,20579)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,28):", $t13} $t13 == $t13;
        goto L2;
    }

    // trace_local[$t2]($t12) at .\sources\fungible_asset.move:524:28+48
    assume {:print "$track_local(102,28,1):", $t12} $t12 == $t12;

    // trace_local[constructor_ref]($t12) at .\sources\fungible_asset.move:524:27+49
    assume {:print "$track_local(102,28,2):", $t12} $t12 == $t12;

    // $t14 := opaque begin: option::none<u128>() at .\sources\fungible_asset.move:527:9+14
    assume {:print "$at(3,20690,20704)"} true;

    // assume And(WellFormed($t14), Le(Len<u128>(select option::Option.vec($t14)), 1)) at .\sources\fungible_asset.move:527:9+14
    assume ($IsValid'$1_option_Option'u128''($t14) && (LenVec($t14->$vec) <= 1));

    // assume Eq<0x1::option::Option<u128>>($t14, option::spec_none<u128>()) at .\sources\fungible_asset.move:527:9+14
    assume $IsEqual'$1_option_Option'u128''($t14, $1_option_spec_none'u128'());

    // $t14 := opaque end: option::none<u128>() at .\sources\fungible_asset.move:527:9+14

    // $t15 := [66, 76, 79, 67, 75, 70, 79, 82, 71, 69, 32, 67, 111, 105, 110] at .\sources\fungible_asset.move:528:14+18
    assume {:print "$at(3,20720,20738)"} true;
    $t15 := ConcatVec(ConcatVec(ConcatVec(MakeVec4(66, 76, 79, 67), MakeVec4(75, 70, 79, 82)), MakeVec4(71, 69, 32, 67)), MakeVec3(111, 105, 110));
    assume $IsValid'vec'u8''($t15);

    // $t16 := string::utf8($t15) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:528:9+24
    call $t16 := $1_string_utf8($t15);
    if ($abort_flag) {
        assume {:print "$at(3,20715,20739)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,28):", $t13} $t13 == $t13;
        goto L2;
    }

    // $t17 := [66, 76, 79, 67, 75, 70, 79, 82, 71, 69] at .\sources\fungible_asset.move:529:14+12
    assume {:print "$at(3,20755,20767)"} true;
    $t17 := ConcatVec(ConcatVec(MakeVec4(66, 76, 79, 67), MakeVec4(75, 70, 79, 82)), MakeVec2(71, 69));
    assume $IsValid'vec'u8''($t17);

    // $t18 := string::utf8($t17) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:529:9+18
    call $t18 := $1_string_utf8($t17);
    if ($abort_flag) {
        assume {:print "$at(3,20750,20768)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,28):", $t13} $t13 == $t13;
        goto L2;
    }

    // $t19 := 8 at .\sources\fungible_asset.move:530:9+1
    assume {:print "$at(3,20779,20780)"} true;
    $t19 := 8;
    assume $IsValid'u8'($t19);

    // $t20 := [104, 116, 116, 112, 115, 58, 47, 47, 46, 46, 46] at .\sources\fungible_asset.move:531:14+14
    assume {:print "$at(3,20796,20810)"} true;
    $t20 := ConcatVec(ConcatVec(MakeVec4(104, 116, 116, 112), MakeVec4(115, 58, 47, 47)), MakeVec3(46, 46, 46));
    assume $IsValid'vec'u8''($t20);

    // $t21 := string::utf8($t20) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:531:9+20
    call $t21 := $1_string_utf8($t20);
    if ($abort_flag) {
        assume {:print "$at(3,20791,20811)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,28):", $t13} $t13 == $t13;
        goto L2;
    }

    // $t22 := [104, 116, 116, 112, 58, 47, 47, 109, 101, 116, 97, 115, 99, 104, 111, 111, 108, 46, 115, 111] at .\sources\fungible_asset.move:532:14+23
    assume {:print "$at(3,20827,20850)"} true;
    $t22 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(104, 116, 116, 112), MakeVec4(58, 47, 47, 109)), MakeVec4(101, 116, 97, 115)), MakeVec4(99, 104, 111, 111)), MakeVec4(108, 46, 115, 111));
    assume $IsValid'vec'u8''($t22);

    // $t23 := string::utf8($t22) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:532:9+29
    call $t23 := $1_string_utf8($t22);
    if ($abort_flag) {
        assume {:print "$at(3,20822,20851)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,28):", $t13} $t13 == $t13;
        goto L2;
    }

    // primary_fungible_store::create_primary_store_enabled_fungible_asset($t12, $t14, $t16, $t18, $t19, $t21, $t23) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:525:5+273
    assume {:print "$at(3,20586,20859)"} true;
    call $1_primary_fungible_store_create_primary_store_enabled_fungible_asset($t12, $t14, $t16, $t18, $t19, $t21, $t23);
    if ($abort_flag) {
        assume {:print "$at(3,20586,20859)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,28):", $t13} $t13 == $t13;
        goto L2;
    }

    // $t24 := fungible_asset::generate_mint_ref($t12) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:535:20+50
    assume {:print "$at(3,20883,20933)"} true;
    call $t24 := $1_fungible_asset_generate_mint_ref($t12);
    if ($abort_flag) {
        assume {:print "$at(3,20883,20933)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,28):", $t13} $t13 == $t13;
        goto L2;
    }

    // $t25 := fungible_asset::generate_burn_ref($t12) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:536:20+50
    assume {:print "$at(3,20955,21005)"} true;
    call $t25 := $1_fungible_asset_generate_burn_ref($t12);
    if ($abort_flag) {
        assume {:print "$at(3,20955,21005)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,28):", $t13} $t13 == $t13;
        goto L2;
    }

    // trace_local[burn_ref]($t25) at .\sources\fungible_asset.move:536:20+50
    assume {:print "$track_local(102,28,3):", $t25} $t25 == $t25;

    // $t26 := fungible_asset::generate_transfer_ref($t12) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:537:24+54
    assume {:print "$at(3,21031,21085)"} true;
    call $t26 := $1_fungible_asset_generate_transfer_ref($t12);
    if ($abort_flag) {
        assume {:print "$at(3,21031,21085)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,28):", $t13} $t13 == $t13;
        goto L2;
    }

    // $t27 := object::generate_signer($t12) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:538:34+40
    assume {:print "$at(3,21121,21161)"} true;
    call $t27 := $1_object_generate_signer($t12);
    if ($abort_flag) {
        assume {:print "$at(3,21121,21161)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,28):", $t13} $t13 == $t13;
        goto L2;
    }

    // trace_local[metadata_object_signer]($t27) at .\sources\fungible_asset.move:538:34+40
    assume {:print "$track_local(102,28,4):", $t27} $t27 == $t27;

    // trace_local[$t3]($t27) at .\sources\fungible_asset.move:541:32+8
    assume {:print "$at(3,21243,21251)"} true;
    assume {:print "$track_local(102,28,5):", $t27} $t27 == $t27;

    // $t28 := pack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset($t24, $t26, $t25) at .\sources\fungible_asset.move:541:9+57
    $t28 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset($t24, $t26, $t25);

    // trace_local[$t21]($t28) at .\sources\fungible_asset.move:539:5+116
    assume {:print "$at(3,21168,21284)"} true;
    assume {:print "$track_local(102,28,8):", $t28} $t28 == $t28;

    // move_to<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>($t28, $t27) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:539:5+116
    if ($ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $t27->$addr)) {
        call $ExecFailureAbort();
    } else {
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory := $ResourceUpdate($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $t27->$addr, $t28);
    }
    if ($abort_flag) {
        assume {:print "$at(3,21168,21284)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,28):", $t13} $t13 == $t13;
        goto L2;
    }

    // $t29 := 0 at .\sources\fungible_asset.move:544:21+1
    assume {:print "$at(3,21343,21344)"} true;
    $t29 := 0;
    assume $IsValid'u64'($t29);

    // $t30 := 0 at .\sources\fungible_asset.move:545:24+1
    assume {:print "$at(3,21370,21371)"} true;
    $t30 := 0;
    assume $IsValid'u64'($t30);

    // $t31 := pack 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState($t29, $t30) at .\sources\fungible_asset.move:543:20+73
    assume {:print "$at(3,21306,21379)"} true;
    $t31 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState($t29, $t30);

    // move_to<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>($t31, $t0) on_abort goto L2 with $t13 at .\sources\fungible_asset.move:543:5+89
    if ($ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $t0->$addr)) {
        call $ExecFailureAbort();
    } else {
        $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory := $ResourceUpdate($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $t0->$addr, $t31);
    }
    if ($abort_flag) {
        assume {:print "$at(3,21291,21380)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(102,28):", $t13} $t13 == $t13;
        goto L2;
    }

    // label L1 at .\sources\fungible_asset.move:547:1+1
    assume {:print "$at(3,21383,21384)"} true;
L1:

    // return () at .\sources\fungible_asset.move:547:1+1
    assume {:print "$at(3,21383,21384)"} true;
    return;

    // label L2 at .\sources\fungible_asset.move:547:1+1
L2:

    // abort($t13) at .\sources\fungible_asset.move:547:1+1
    assume {:print "$at(3,21383,21384)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun fungible_asset::unfreeze_account [verification] at .\sources\fungible_asset.move:286:5+385
procedure {:timeLimit 40} $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_unfreeze_account$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: $1_object_Object'$1_fungible_asset_Metadata';
    var $t4: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t5: $1_fungible_asset_TransferRef;
    var $t6: $1_object_Object'$1_fungible_asset_Metadata';
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset;
    var $t12: $1_fungible_asset_TransferRef;
    var $t13: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#44: $Memory $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at .\sources\fungible_asset.move:286:5+1
    assume {:print "$at(3,11282,11283)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at .\sources\fungible_asset.move:286:5+1
    assume $IsValid'address'($t1);

    // assume forall $rsc: 0x1::features::Features: ResourceDomain<0x1::features::Features>(): WellFormed($rsc) at .\sources\fungible_asset.move:286:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: 0x1::object::ObjectCore: ResourceDomain<0x1::object::ObjectCore>(): WellFormed($rsc) at .\sources\fungible_asset.move:286:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: 0x1::object::Untransferable: ResourceDomain<0x1::object::Untransferable>(): WellFormed($rsc) at .\sources\fungible_asset.move:286:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_Untransferable_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_Untransferable_$memory, $a_0);
    ($IsValid'$1_object_Untransferable'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::Untransferable: ResourceDomain<0x1::fungible_asset::Untransferable>(): WellFormed($rsc) at .\sources\fungible_asset.move:286:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Untransferable_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Untransferable_$memory, $a_0);
    ($IsValid'$1_fungible_asset_Untransferable'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::ConcurrentFungibleBalance: ResourceDomain<0x1::fungible_asset::ConcurrentFungibleBalance>(): WellFormed($rsc) at .\sources\fungible_asset.move:286:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentFungibleBalance'($rsc))));

    // assume forall $rsc: 0x1::fungible_asset::FungibleStore: ResourceDomain<0x1::fungible_asset::FungibleStore>(): WellFormed($rsc) at .\sources\fungible_asset.move:286:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0);
    ($IsValid'$1_fungible_asset_FungibleStore'($rsc))));

    // assume forall $rsc: 0x1::primary_fungible_store::DeriveRefPod: ResourceDomain<0x1::primary_fungible_store::DeriveRefPod>(): WellFormed($rsc) at .\sources\fungible_asset.move:286:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0)}(var $rsc := $ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0);
    ($IsValid'$1_primary_fungible_store_DeriveRefPod'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(): WellFormed($rsc) at .\sources\fungible_asset.move:286:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState'($rsc))));

    // assume forall $rsc: 0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset: ResourceDomain<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>(): WellFormed($rsc) at .\sources\fungible_asset.move:286:5+1
    assume (forall $a_0: int :: {$ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $a_0)}(var $rsc := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $a_0);
    ($IsValid'$773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset'($rsc))));

    // assume exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0)) at .\sources\fungible_asset.move:266:5+58
    assume {:print "$at(3,10330,10388)"} true;
    assume $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0));

    // @44 := save_mem(fungible_asset::EmissionState) at .\sources\fungible_asset.move:266:5+58
    $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#44 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory;

    // trace_local[admin]($t0) at .\sources\fungible_asset.move:286:5+1
    assume {:print "$at(3,11282,11283)"} true;
    assume {:print "$track_local(102,29,0):", $t0} $t0 == $t0;

    // trace_local[account]($t1) at .\sources\fungible_asset.move:286:5+1
    assume {:print "$track_local(102,29,1):", $t1} $t1 == $t1;

    // $t6 := fungible_asset::get_metadata() on_abort goto L3 with $t7 at .\sources\fungible_asset.move:287:21+14
    assume {:print "$at(3,11403,11417)"} true;
    call $t6 := $773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_get_metadata();
    if ($abort_flag) {
        assume {:print "$at(3,11403,11417)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,29):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_local[asset]($t6) at .\sources\fungible_asset.move:287:21+14
    assume {:print "$track_local(102,29,2):", $t6} $t6 == $t6;

    // trace_local[asset]($t6) at .\sources\fungible_asset.move:513:16+22
    assume {:print "$at(3,20092,20114)"} true;
    assume {:print "$track_local(102,29,3):", $t6} $t6 == $t6;

    // $t8 := signer::address_of($t0) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:517:41+25
    assume {:print "$at(3,20278,20303)"} true;
    call $t8 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(3,20278,20303)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,29):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t9 := object::is_owner<0x1::fungible_asset::Metadata>($t6, $t8) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:517:17+50
    call $t9 := $1_object_is_owner'$1_fungible_asset_Metadata'($t6, $t8);
    if ($abort_flag) {
        assume {:print "$at(3,20254,20304)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,29):", $t7} $t7 == $t7;
        goto L3;
    }

    // if ($t9) goto L1 else goto L0 at .\sources\fungible_asset.move:517:9+6
    if ($t9) { goto L1; } else { goto L0; }

    // label L1 at .\sources\fungible_asset.move:518:68+6
    assume {:print "$at(3,20413,20419)"} true;
L1:

    // $t10 := object::object_address<0x1::fungible_asset::Metadata>($t6) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:518:45+30
    assume {:print "$at(3,20390,20420)"} true;
    call $t10 := $1_object_object_address'$1_fungible_asset_Metadata'($t6);
    if ($abort_flag) {
        assume {:print "$at(3,20390,20420)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,29):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t11 := get_global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>($t10) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:518:9+67
    if (!$ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $t10)) {
        call $ExecFailureAbort();
    } else {
        $t11 := $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_ManagedFungibleAsset_$memory, $t10);
    }
    if ($abort_flag) {
        assume {:print "$at(3,20354,20421)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,29):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t12 := get_field<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::ManagedFungibleAsset>.transfer_ref($t11) at .\sources\fungible_asset.move:288:28+50
    assume {:print "$at(3,11447,11497)"} true;
    $t12 := $t11->$transfer_ref;

    // $t13 := primary_fungible_store::ensure_primary_store_exists<0x1::fungible_asset::Metadata>($t1, $t6) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:289:22+67
    assume {:print "$at(3,11521,11588)"} true;
    call $t13 := $1_primary_fungible_store_ensure_primary_store_exists'$1_fungible_asset_Metadata'($t1, $t6);
    if ($abort_flag) {
        assume {:print "$at(3,11521,11588)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,29):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t14 := false at .\sources\fungible_asset.move:290:63+5
    assume {:print "$at(3,11653,11658)"} true;
    $t14 := false;
    assume $IsValid'bool'($t14);

    // fungible_asset::set_frozen_flag<0x1::fungible_asset::FungibleStore>($t12, $t13, $t14) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:290:9+60
    call $1_fungible_asset_set_frozen_flag'$1_fungible_asset_FungibleStore'($t12, $t13, $t14);
    if ($abort_flag) {
        assume {:print "$at(3,11599,11659)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,29):", $t7} $t7 == $t7;
        goto L3;
    }

    // goto L2 at .\sources\fungible_asset.move:286:103+287
    assume {:print "$at(3,11380,11667)"} true;
    goto L2;

    // label L0 at .\sources\fungible_asset.move:517:94+10
    assume {:print "$at(3,20331,20341)"} true;
L0:

    // $t15 := 1 at .\sources\fungible_asset.move:517:94+10
    assume {:print "$at(3,20331,20341)"} true;
    $t15 := 1;
    assume $IsValid'u64'($t15);

    // $t16 := error::permission_denied($t15) on_abort goto L3 with $t7 at .\sources\fungible_asset.move:517:69+36
    call $t16 := $1_error_permission_denied($t15);
    if ($abort_flag) {
        assume {:print "$at(3,20306,20342)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(102,29):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_abort($t16) at .\sources\fungible_asset.move:517:9+6
    assume {:print "$at(3,20246,20252)"} true;
    assume {:print "$track_abort(102,29):", $t16} $t16 == $t16;

    // $t7 := move($t16) at .\sources\fungible_asset.move:517:9+6
    $t7 := $t16;

    // goto L3 at .\sources\fungible_asset.move:517:9+6
    goto L3;

    // label L2 at .\sources\fungible_asset.move:291:5+1
    assume {:print "$at(3,11666,11667)"} true;
L2:

    // assert exists<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0)) at .\sources\fungible_asset.move:267:5+57
    assume {:print "$at(3,10394,10451)"} true;
    assert {:msg "assert_failed(3,10394,10451): post-condition does not hold"}
      $ResourceExists($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0));

    // assert Eq<u64>(select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global[@44]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of[]($t0)))) at .\sources\fungible_asset.move:270:5+151
    assume {:print "$at(3,10506,10657)"} true;
    assert {:msg "assert_failed(3,10506,10657): post-condition does not hold"}
      $IsEqual'u64'($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$total_emitted, $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#44, $1_signer_$address_of($t0))->$total_emitted);

    // assert Eq<u64>(select fungible_asset::EmissionState.max_supply<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), select fungible_asset::EmissionState.max_supply<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global[@44]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of[]($t0)))) at .\sources\fungible_asset.move:274:5+145
    assume {:print "$at(3,10716,10861)"} true;
    assert {:msg "assert_failed(3,10716,10861): post-condition does not hold"}
      $IsEqual'u64'($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$max_supply, $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#44, $1_signer_$address_of($t0))->$max_supply);

    // assert Ge(select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of($t0))), select fungible_asset::EmissionState.total_emitted<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(global[@44]<0x773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2::fungible_asset::EmissionState>(signer::$address_of[]($t0)))) at .\sources\fungible_asset.move:278:5+151
    assume {:print "$at(3,10931,11082)"} true;
    assert {:msg "assert_failed(3,10931,11082): post-condition does not hold"}
      ($ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory, $1_signer_$address_of($t0))->$total_emitted >= $ResourceValue($773aa22a10f5b3d542478a81b448a8c95815f6323eb626c965d918b23dcea3e2_fungible_asset_EmissionState_$memory#44, $1_signer_$address_of($t0))->$total_emitted);

    // return () at .\sources\fungible_asset.move:278:5+151
    return;

    // label L3 at .\sources\fungible_asset.move:291:5+1
    assume {:print "$at(3,11666,11667)"} true;
L3:

    // abort($t7) at .\sources\fungible_asset.move:291:5+1
    assume {:print "$at(3,11666,11667)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}
